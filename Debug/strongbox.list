
strongbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d64  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002134  08005eec  08005eec  00006eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008020  08008020  0000a04c  2**0
                  CONTENTS
  4 .ARM          00000000  08008020  08008020  0000a04c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008020  08008020  0000a04c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008020  08008020  00009020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008024  08008024  00009024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000004c  20000000  08008028  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a04c  2**0
                  CONTENTS
 10 .bss          00000524  2000004c  2000004c  0000a04c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000570  20000570  0000a04c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a04c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000de73  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002272  00000000  00000000  00017eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba8  00000000  00000000  0001a168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008df  00000000  00000000  0001ad10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d8f5  00000000  00000000  0001b5ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010893  00000000  00000000  00038ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ae8df  00000000  00000000  00049777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f8056  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e50  00000000  00000000  000f809c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  000faeec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000004c 	.word	0x2000004c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005ed4 	.word	0x08005ed4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000050 	.word	0x20000050
 80001c4:	08005ed4 	.word	0x08005ed4

080001c8 <KEYPAD_Init>:
static KEYPAD_info gs_KEYPAD_info[KEYPAD_UNITS] = {0};



void KEYPAD_Init(uint16_t au16_Instance, uint8_t* au8_KeyStates)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b092      	sub	sp, #72	@ 0x48
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	6039      	str	r1, [r7, #0]
 80001d2:	80fb      	strh	r3, [r7, #6]
	uint8_t i = 0;
 80001d4:	2300      	movs	r3, #0
 80001d6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001da:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]
 80001e8:	611a      	str	r2, [r3, #16]

	if(au8_KeyStates != NULL)
 80001ea:	683b      	ldr	r3, [r7, #0]
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	f000 8186 	beq.w	80004fe <KEYPAD_Init+0x336>
	{
		gs_KEYPAD_info[au16_Instance].KEY_States = au8_KeyStates;
 80001f2:	88fb      	ldrh	r3, [r7, #6]
 80001f4:	4996      	ldr	r1, [pc, #600]	@ (8000450 <KEYPAD_Init+0x288>)
 80001f6:	683a      	ldr	r2, [r7, #0]
 80001f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	{
		/* Potentially Should Return An Error */
		return;
	}
	/*--------[ Configure The KeyPAD ROWs GPIO Pins ]-------*/
	for(i=0; i<ROWS; i++)
 80001fc:	2300      	movs	r3, #0
 80001fe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000202:	e0ac      	b.n	800035e <KEYPAD_Init+0x196>
	{
		if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOA)
 8000204:	88fa      	ldrh	r2, [r7, #6]
 8000206:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 800020a:	4892      	ldr	r0, [pc, #584]	@ (8000454 <KEYPAD_Init+0x28c>)
 800020c:	4613      	mov	r3, r2
 800020e:	005b      	lsls	r3, r3, #1
 8000210:	4413      	add	r3, r2
 8000212:	009b      	lsls	r3, r3, #2
 8000214:	440b      	add	r3, r1
 8000216:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800021a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800021e:	d10c      	bne.n	800023a <KEYPAD_Init+0x72>
	    {
	        __HAL_RCC_GPIOA_CLK_ENABLE();
 8000220:	4b8d      	ldr	r3, [pc, #564]	@ (8000458 <KEYPAD_Init+0x290>)
 8000222:	695b      	ldr	r3, [r3, #20]
 8000224:	4a8c      	ldr	r2, [pc, #560]	@ (8000458 <KEYPAD_Init+0x290>)
 8000226:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800022a:	6153      	str	r3, [r2, #20]
 800022c:	4b8a      	ldr	r3, [pc, #552]	@ (8000458 <KEYPAD_Init+0x290>)
 800022e:	695b      	ldr	r3, [r3, #20]
 8000230:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000234:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000238:	e06a      	b.n	8000310 <KEYPAD_Init+0x148>
	    }
		else if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOB)
 800023a:	88fa      	ldrh	r2, [r7, #6]
 800023c:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8000240:	4884      	ldr	r0, [pc, #528]	@ (8000454 <KEYPAD_Init+0x28c>)
 8000242:	4613      	mov	r3, r2
 8000244:	005b      	lsls	r3, r3, #1
 8000246:	4413      	add	r3, r2
 8000248:	009b      	lsls	r3, r3, #2
 800024a:	440b      	add	r3, r1
 800024c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000250:	4a82      	ldr	r2, [pc, #520]	@ (800045c <KEYPAD_Init+0x294>)
 8000252:	4293      	cmp	r3, r2
 8000254:	d10c      	bne.n	8000270 <KEYPAD_Init+0xa8>
		{
			__HAL_RCC_GPIOB_CLK_ENABLE();
 8000256:	4b80      	ldr	r3, [pc, #512]	@ (8000458 <KEYPAD_Init+0x290>)
 8000258:	695b      	ldr	r3, [r3, #20]
 800025a:	4a7f      	ldr	r2, [pc, #508]	@ (8000458 <KEYPAD_Init+0x290>)
 800025c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000260:	6153      	str	r3, [r2, #20]
 8000262:	4b7d      	ldr	r3, [pc, #500]	@ (8000458 <KEYPAD_Init+0x290>)
 8000264:	695b      	ldr	r3, [r3, #20]
 8000266:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800026a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800026c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800026e:	e04f      	b.n	8000310 <KEYPAD_Init+0x148>
		}
		else if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOC)
 8000270:	88fa      	ldrh	r2, [r7, #6]
 8000272:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8000276:	4877      	ldr	r0, [pc, #476]	@ (8000454 <KEYPAD_Init+0x28c>)
 8000278:	4613      	mov	r3, r2
 800027a:	005b      	lsls	r3, r3, #1
 800027c:	4413      	add	r3, r2
 800027e:	009b      	lsls	r3, r3, #2
 8000280:	440b      	add	r3, r1
 8000282:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000286:	4a76      	ldr	r2, [pc, #472]	@ (8000460 <KEYPAD_Init+0x298>)
 8000288:	4293      	cmp	r3, r2
 800028a:	d10c      	bne.n	80002a6 <KEYPAD_Init+0xde>
		{
			__HAL_RCC_GPIOC_CLK_ENABLE();
 800028c:	4b72      	ldr	r3, [pc, #456]	@ (8000458 <KEYPAD_Init+0x290>)
 800028e:	695b      	ldr	r3, [r3, #20]
 8000290:	4a71      	ldr	r2, [pc, #452]	@ (8000458 <KEYPAD_Init+0x290>)
 8000292:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000296:	6153      	str	r3, [r2, #20]
 8000298:	4b6f      	ldr	r3, [pc, #444]	@ (8000458 <KEYPAD_Init+0x290>)
 800029a:	695b      	ldr	r3, [r3, #20]
 800029c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80002a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80002a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80002a4:	e034      	b.n	8000310 <KEYPAD_Init+0x148>
		}
		else if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOD)
 80002a6:	88fa      	ldrh	r2, [r7, #6]
 80002a8:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80002ac:	4869      	ldr	r0, [pc, #420]	@ (8000454 <KEYPAD_Init+0x28c>)
 80002ae:	4613      	mov	r3, r2
 80002b0:	005b      	lsls	r3, r3, #1
 80002b2:	4413      	add	r3, r2
 80002b4:	009b      	lsls	r3, r3, #2
 80002b6:	440b      	add	r3, r1
 80002b8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80002bc:	4a69      	ldr	r2, [pc, #420]	@ (8000464 <KEYPAD_Init+0x29c>)
 80002be:	4293      	cmp	r3, r2
 80002c0:	d10c      	bne.n	80002dc <KEYPAD_Init+0x114>
		{
			__HAL_RCC_GPIOD_CLK_ENABLE();
 80002c2:	4b65      	ldr	r3, [pc, #404]	@ (8000458 <KEYPAD_Init+0x290>)
 80002c4:	695b      	ldr	r3, [r3, #20]
 80002c6:	4a64      	ldr	r2, [pc, #400]	@ (8000458 <KEYPAD_Init+0x290>)
 80002c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002cc:	6153      	str	r3, [r2, #20]
 80002ce:	4b62      	ldr	r3, [pc, #392]	@ (8000458 <KEYPAD_Init+0x290>)
 80002d0:	695b      	ldr	r3, [r3, #20]
 80002d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80002d6:	623b      	str	r3, [r7, #32]
 80002d8:	6a3b      	ldr	r3, [r7, #32]
 80002da:	e019      	b.n	8000310 <KEYPAD_Init+0x148>
		}
		else if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOE)
 80002dc:	88fa      	ldrh	r2, [r7, #6]
 80002de:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80002e2:	485c      	ldr	r0, [pc, #368]	@ (8000454 <KEYPAD_Init+0x28c>)
 80002e4:	4613      	mov	r3, r2
 80002e6:	005b      	lsls	r3, r3, #1
 80002e8:	4413      	add	r3, r2
 80002ea:	009b      	lsls	r3, r3, #2
 80002ec:	440b      	add	r3, r1
 80002ee:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80002f2:	4a5d      	ldr	r2, [pc, #372]	@ (8000468 <KEYPAD_Init+0x2a0>)
 80002f4:	4293      	cmp	r3, r2
 80002f6:	d10b      	bne.n	8000310 <KEYPAD_Init+0x148>
		{
			__HAL_RCC_GPIOE_CLK_ENABLE();
 80002f8:	4b57      	ldr	r3, [pc, #348]	@ (8000458 <KEYPAD_Init+0x290>)
 80002fa:	695b      	ldr	r3, [r3, #20]
 80002fc:	4a56      	ldr	r2, [pc, #344]	@ (8000458 <KEYPAD_Init+0x290>)
 80002fe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000302:	6153      	str	r3, [r2, #20]
 8000304:	4b54      	ldr	r3, [pc, #336]	@ (8000458 <KEYPAD_Init+0x290>)
 8000306:	695b      	ldr	r3, [r3, #20]
 8000308:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800030c:	61fb      	str	r3, [r7, #28]
 800030e:	69fb      	ldr	r3, [r7, #28]
		}
		GPIO_InitStruct.Pin = KEYPAD_CfgParam[au16_Instance].ROW_PIN[i];
 8000310:	88fa      	ldrh	r2, [r7, #6]
 8000312:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8000316:	484f      	ldr	r0, [pc, #316]	@ (8000454 <KEYPAD_Init+0x28c>)
 8000318:	4613      	mov	r3, r2
 800031a:	005b      	lsls	r3, r3, #1
 800031c:	4413      	add	r3, r2
 800031e:	00db      	lsls	r3, r3, #3
 8000320:	440b      	add	r3, r1
 8000322:	3308      	adds	r3, #8
 8000324:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000328:	633b      	str	r3, [r7, #48]	@ 0x30
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800032a:	2300      	movs	r3, #0
 800032c:	637b      	str	r3, [r7, #52]	@ 0x34
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800032e:	2302      	movs	r3, #2
 8000330:	63bb      	str	r3, [r7, #56]	@ 0x38
		HAL_GPIO_Init(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i], &GPIO_InitStruct);
 8000332:	88fa      	ldrh	r2, [r7, #6]
 8000334:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8000338:	4846      	ldr	r0, [pc, #280]	@ (8000454 <KEYPAD_Init+0x28c>)
 800033a:	4613      	mov	r3, r2
 800033c:	005b      	lsls	r3, r3, #1
 800033e:	4413      	add	r3, r2
 8000340:	009b      	lsls	r3, r3, #2
 8000342:	440b      	add	r3, r1
 8000344:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000348:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800034c:	4611      	mov	r1, r2
 800034e:	4618      	mov	r0, r3
 8000350:	f002 fd76 	bl	8002e40 <HAL_GPIO_Init>
	for(i=0; i<ROWS; i++)
 8000354:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000358:	3301      	adds	r3, #1
 800035a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800035e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000362:	2b03      	cmp	r3, #3
 8000364:	f67f af4e 	bls.w	8000204 <KEYPAD_Init+0x3c>
	}
	/*--------[ Configure The KeyPAD ROWs GPIO Pins ]-------*/
	for(i=0; i<ROWS; i++)
 8000368:	2300      	movs	r3, #0
 800036a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800036e:	e0c0      	b.n	80004f2 <KEYPAD_Init+0x32a>
	{
		if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOA)
 8000370:	88fa      	ldrh	r2, [r7, #6]
 8000372:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8000376:	4837      	ldr	r0, [pc, #220]	@ (8000454 <KEYPAD_Init+0x28c>)
 8000378:	4613      	mov	r3, r2
 800037a:	005b      	lsls	r3, r3, #1
 800037c:	4413      	add	r3, r2
 800037e:	009b      	lsls	r3, r3, #2
 8000380:	440b      	add	r3, r1
 8000382:	3306      	adds	r3, #6
 8000384:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000388:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800038c:	d10c      	bne.n	80003a8 <KEYPAD_Init+0x1e0>
	    {
	        __HAL_RCC_GPIOA_CLK_ENABLE();
 800038e:	4b32      	ldr	r3, [pc, #200]	@ (8000458 <KEYPAD_Init+0x290>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	4a31      	ldr	r2, [pc, #196]	@ (8000458 <KEYPAD_Init+0x290>)
 8000394:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000398:	6153      	str	r3, [r2, #20]
 800039a:	4b2f      	ldr	r3, [pc, #188]	@ (8000458 <KEYPAD_Init+0x290>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003a2:	61bb      	str	r3, [r7, #24]
 80003a4:	69bb      	ldr	r3, [r7, #24]
 80003a6:	e07c      	b.n	80004a2 <KEYPAD_Init+0x2da>
	    }
		else if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOB)
 80003a8:	88fa      	ldrh	r2, [r7, #6]
 80003aa:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80003ae:	4829      	ldr	r0, [pc, #164]	@ (8000454 <KEYPAD_Init+0x28c>)
 80003b0:	4613      	mov	r3, r2
 80003b2:	005b      	lsls	r3, r3, #1
 80003b4:	4413      	add	r3, r2
 80003b6:	009b      	lsls	r3, r3, #2
 80003b8:	440b      	add	r3, r1
 80003ba:	3306      	adds	r3, #6
 80003bc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80003c0:	4a26      	ldr	r2, [pc, #152]	@ (800045c <KEYPAD_Init+0x294>)
 80003c2:	4293      	cmp	r3, r2
 80003c4:	d10c      	bne.n	80003e0 <KEYPAD_Init+0x218>
		{
			__HAL_RCC_GPIOB_CLK_ENABLE();
 80003c6:	4b24      	ldr	r3, [pc, #144]	@ (8000458 <KEYPAD_Init+0x290>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	4a23      	ldr	r2, [pc, #140]	@ (8000458 <KEYPAD_Init+0x290>)
 80003cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80003d0:	6153      	str	r3, [r2, #20]
 80003d2:	4b21      	ldr	r3, [pc, #132]	@ (8000458 <KEYPAD_Init+0x290>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80003da:	617b      	str	r3, [r7, #20]
 80003dc:	697b      	ldr	r3, [r7, #20]
 80003de:	e060      	b.n	80004a2 <KEYPAD_Init+0x2da>
		}
		else if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOC)
 80003e0:	88fa      	ldrh	r2, [r7, #6]
 80003e2:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80003e6:	481b      	ldr	r0, [pc, #108]	@ (8000454 <KEYPAD_Init+0x28c>)
 80003e8:	4613      	mov	r3, r2
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	4413      	add	r3, r2
 80003ee:	009b      	lsls	r3, r3, #2
 80003f0:	440b      	add	r3, r1
 80003f2:	3306      	adds	r3, #6
 80003f4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80003f8:	4a19      	ldr	r2, [pc, #100]	@ (8000460 <KEYPAD_Init+0x298>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d10c      	bne.n	8000418 <KEYPAD_Init+0x250>
		{
			__HAL_RCC_GPIOC_CLK_ENABLE();
 80003fe:	4b16      	ldr	r3, [pc, #88]	@ (8000458 <KEYPAD_Init+0x290>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	4a15      	ldr	r2, [pc, #84]	@ (8000458 <KEYPAD_Init+0x290>)
 8000404:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000408:	6153      	str	r3, [r2, #20]
 800040a:	4b13      	ldr	r3, [pc, #76]	@ (8000458 <KEYPAD_Init+0x290>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000412:	613b      	str	r3, [r7, #16]
 8000414:	693b      	ldr	r3, [r7, #16]
 8000416:	e044      	b.n	80004a2 <KEYPAD_Init+0x2da>
		}
		else if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOD)
 8000418:	88fa      	ldrh	r2, [r7, #6]
 800041a:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 800041e:	480d      	ldr	r0, [pc, #52]	@ (8000454 <KEYPAD_Init+0x28c>)
 8000420:	4613      	mov	r3, r2
 8000422:	005b      	lsls	r3, r3, #1
 8000424:	4413      	add	r3, r2
 8000426:	009b      	lsls	r3, r3, #2
 8000428:	440b      	add	r3, r1
 800042a:	3306      	adds	r3, #6
 800042c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000430:	4a0c      	ldr	r2, [pc, #48]	@ (8000464 <KEYPAD_Init+0x29c>)
 8000432:	4293      	cmp	r3, r2
 8000434:	d11a      	bne.n	800046c <KEYPAD_Init+0x2a4>
		{
			__HAL_RCC_GPIOD_CLK_ENABLE();
 8000436:	4b08      	ldr	r3, [pc, #32]	@ (8000458 <KEYPAD_Init+0x290>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a07      	ldr	r2, [pc, #28]	@ (8000458 <KEYPAD_Init+0x290>)
 800043c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000440:	6153      	str	r3, [r2, #20]
 8000442:	4b05      	ldr	r3, [pc, #20]	@ (8000458 <KEYPAD_Init+0x290>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800044a:	60fb      	str	r3, [r7, #12]
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	e028      	b.n	80004a2 <KEYPAD_Init+0x2da>
 8000450:	20000068 	.word	0x20000068
 8000454:	08005f10 	.word	0x08005f10
 8000458:	40021000 	.word	0x40021000
 800045c:	48000400 	.word	0x48000400
 8000460:	48000800 	.word	0x48000800
 8000464:	48000c00 	.word	0x48000c00
 8000468:	48001000 	.word	0x48001000
		}
		else if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOE)
 800046c:	88fa      	ldrh	r2, [r7, #6]
 800046e:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8000472:	4825      	ldr	r0, [pc, #148]	@ (8000508 <KEYPAD_Init+0x340>)
 8000474:	4613      	mov	r3, r2
 8000476:	005b      	lsls	r3, r3, #1
 8000478:	4413      	add	r3, r2
 800047a:	009b      	lsls	r3, r3, #2
 800047c:	440b      	add	r3, r1
 800047e:	3306      	adds	r3, #6
 8000480:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000484:	4a21      	ldr	r2, [pc, #132]	@ (800050c <KEYPAD_Init+0x344>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d10b      	bne.n	80004a2 <KEYPAD_Init+0x2da>
		{
			__HAL_RCC_GPIOE_CLK_ENABLE();
 800048a:	4b21      	ldr	r3, [pc, #132]	@ (8000510 <KEYPAD_Init+0x348>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	4a20      	ldr	r2, [pc, #128]	@ (8000510 <KEYPAD_Init+0x348>)
 8000490:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000494:	6153      	str	r3, [r2, #20]
 8000496:	4b1e      	ldr	r3, [pc, #120]	@ (8000510 <KEYPAD_Init+0x348>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800049e:	60bb      	str	r3, [r7, #8]
 80004a0:	68bb      	ldr	r3, [r7, #8]
		}
		GPIO_InitStruct.Pin = KEYPAD_CfgParam[au16_Instance].COL_PIN[i];
 80004a2:	88fa      	ldrh	r2, [r7, #6]
 80004a4:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80004a8:	4817      	ldr	r0, [pc, #92]	@ (8000508 <KEYPAD_Init+0x340>)
 80004aa:	4613      	mov	r3, r2
 80004ac:	005b      	lsls	r3, r3, #1
 80004ae:	4413      	add	r3, r2
 80004b0:	00db      	lsls	r3, r3, #3
 80004b2:	440b      	add	r3, r1
 80004b4:	3314      	adds	r3, #20
 80004b6:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80004ba:	633b      	str	r3, [r7, #48]	@ 0x30
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004bc:	2301      	movs	r3, #1
 80004be:	637b      	str	r3, [r7, #52]	@ 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80004c0:	2301      	movs	r3, #1
 80004c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		HAL_GPIO_Init(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i], &GPIO_InitStruct);
 80004c4:	88fa      	ldrh	r2, [r7, #6]
 80004c6:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80004ca:	480f      	ldr	r0, [pc, #60]	@ (8000508 <KEYPAD_Init+0x340>)
 80004cc:	4613      	mov	r3, r2
 80004ce:	005b      	lsls	r3, r3, #1
 80004d0:	4413      	add	r3, r2
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	440b      	add	r3, r1
 80004d6:	3306      	adds	r3, #6
 80004d8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80004dc:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80004e0:	4611      	mov	r1, r2
 80004e2:	4618      	mov	r0, r3
 80004e4:	f002 fcac 	bl	8002e40 <HAL_GPIO_Init>
	for(i=0; i<ROWS; i++)
 80004e8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80004ec:	3301      	adds	r3, #1
 80004ee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80004f2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80004f6:	2b03      	cmp	r3, #3
 80004f8:	f67f af3a 	bls.w	8000370 <KEYPAD_Init+0x1a8>
 80004fc:	e000      	b.n	8000500 <KEYPAD_Init+0x338>
		return;
 80004fe:	bf00      	nop
	}
}
 8000500:	3748      	adds	r7, #72	@ 0x48
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	08005f10 	.word	0x08005f10
 800050c:	48001000 	.word	0x48001000
 8000510:	40021000 	.word	0x40021000

08000514 <KEYPAD_Scan>:



void KEYPAD_Scan(uint16_t au16_Instance)
{
 8000514:	b590      	push	{r4, r7, lr}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	80fb      	strh	r3, [r7, #6]
	uint8_t au8_ReadState[ROWS] = {0};
 800051e:	2300      	movs	r3, #0
 8000520:	60bb      	str	r3, [r7, #8]
	uint8_t au8_ReadSt;
	uint8_t i=0;
 8000522:	2300      	movs	r3, #0
 8000524:	73fb      	strb	r3, [r7, #15]

	/* Steady State: Output The Pattern [1 1 1 1] To The COL Pins */
	for(i=0; i<COLS; i++)
 8000526:	2300      	movs	r3, #0
 8000528:	73fb      	strb	r3, [r7, #15]
 800052a:	e01c      	b.n	8000566 <KEYPAD_Scan+0x52>
	{
		HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i], KEYPAD_CfgParam[au16_Instance].COL_PIN[i], 1);
 800052c:	88fa      	ldrh	r2, [r7, #6]
 800052e:	7bf9      	ldrb	r1, [r7, #15]
 8000530:	48a7      	ldr	r0, [pc, #668]	@ (80007d0 <KEYPAD_Scan+0x2bc>)
 8000532:	4613      	mov	r3, r2
 8000534:	005b      	lsls	r3, r3, #1
 8000536:	4413      	add	r3, r2
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	440b      	add	r3, r1
 800053c:	3306      	adds	r3, #6
 800053e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8000542:	88fa      	ldrh	r2, [r7, #6]
 8000544:	7bf9      	ldrb	r1, [r7, #15]
 8000546:	4ca2      	ldr	r4, [pc, #648]	@ (80007d0 <KEYPAD_Scan+0x2bc>)
 8000548:	4613      	mov	r3, r2
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	4413      	add	r3, r2
 800054e:	00db      	lsls	r3, r3, #3
 8000550:	440b      	add	r3, r1
 8000552:	3314      	adds	r3, #20
 8000554:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8000558:	2201      	movs	r2, #1
 800055a:	4619      	mov	r1, r3
 800055c:	f002 fe02 	bl	8003164 <HAL_GPIO_WritePin>
	for(i=0; i<COLS; i++)
 8000560:	7bfb      	ldrb	r3, [r7, #15]
 8000562:	3301      	adds	r3, #1
 8000564:	73fb      	strb	r3, [r7, #15]
 8000566:	7bfb      	ldrb	r3, [r7, #15]
 8000568:	2b03      	cmp	r3, #3
 800056a:	d9df      	bls.n	800052c <KEYPAD_Scan+0x18>
	}
	/* Steady State: Read The ROW Pins To Know If Any Key Is Pressed At All or Not */
	for(i=0; i<ROWS; i++)
 800056c:	2300      	movs	r3, #0
 800056e:	73fb      	strb	r3, [r7, #15]
 8000570:	e022      	b.n	80005b8 <KEYPAD_Scan+0xa4>
	{
		au8_ReadState[i] = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i], KEYPAD_CfgParam[au16_Instance].ROW_PIN[i]);
 8000572:	88fa      	ldrh	r2, [r7, #6]
 8000574:	7bf9      	ldrb	r1, [r7, #15]
 8000576:	4896      	ldr	r0, [pc, #600]	@ (80007d0 <KEYPAD_Scan+0x2bc>)
 8000578:	4613      	mov	r3, r2
 800057a:	005b      	lsls	r3, r3, #1
 800057c:	4413      	add	r3, r2
 800057e:	009b      	lsls	r3, r3, #2
 8000580:	440b      	add	r3, r1
 8000582:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8000586:	88fa      	ldrh	r2, [r7, #6]
 8000588:	7bf9      	ldrb	r1, [r7, #15]
 800058a:	4c91      	ldr	r4, [pc, #580]	@ (80007d0 <KEYPAD_Scan+0x2bc>)
 800058c:	4613      	mov	r3, r2
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	4413      	add	r3, r2
 8000592:	00db      	lsls	r3, r3, #3
 8000594:	440b      	add	r3, r1
 8000596:	3308      	adds	r3, #8
 8000598:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 800059c:	7bfc      	ldrb	r4, [r7, #15]
 800059e:	4619      	mov	r1, r3
 80005a0:	f002 fdc8 	bl	8003134 <HAL_GPIO_ReadPin>
 80005a4:	4603      	mov	r3, r0
 80005a6:	461a      	mov	r2, r3
 80005a8:	f104 0310 	add.w	r3, r4, #16
 80005ac:	443b      	add	r3, r7
 80005ae:	f803 2c08 	strb.w	r2, [r3, #-8]
	for(i=0; i<ROWS; i++)
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	3301      	adds	r3, #1
 80005b6:	73fb      	strb	r3, [r7, #15]
 80005b8:	7bfb      	ldrb	r3, [r7, #15]
 80005ba:	2b03      	cmp	r3, #3
 80005bc:	d9d9      	bls.n	8000572 <KEYPAD_Scan+0x5e>
	}
	/* If Any member in array au8_ReadState is 1, we know that a key is pressed */
	/* And we'll keep changing the COL pins output pattern until we find the pressed key or keys */
	/* Else: We'll end the scan procedure at this point */
	if(au8_ReadState[0] | au8_ReadState[1] | au8_ReadState[2] | au8_ReadState[3])
 80005be:	7a3a      	ldrb	r2, [r7, #8]
 80005c0:	7a7b      	ldrb	r3, [r7, #9]
 80005c2:	4313      	orrs	r3, r2
 80005c4:	b2da      	uxtb	r2, r3
 80005c6:	7abb      	ldrb	r3, [r7, #10]
 80005c8:	4313      	orrs	r3, r2
 80005ca:	b2da      	uxtb	r2, r3
 80005cc:	7afb      	ldrb	r3, [r7, #11]
 80005ce:	4313      	orrs	r3, r2
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	f001 808d 	beq.w	80016f2 <KEYPAD_Scan+0x11de>
	{
		/*--[ First Row Check ]--*/
		if(au8_ReadState[0])
 80005d8:	7a3b      	ldrb	r3, [r7, #8]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	f000 8200 	beq.w	80009e0 <KEYPAD_Scan+0x4cc>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 1);
 80005e0:	88fa      	ldrh	r2, [r7, #6]
 80005e2:	497b      	ldr	r1, [pc, #492]	@ (80007d0 <KEYPAD_Scan+0x2bc>)
 80005e4:	4613      	mov	r3, r2
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	4413      	add	r3, r2
 80005ea:	011b      	lsls	r3, r3, #4
 80005ec:	440b      	add	r3, r1
 80005ee:	3318      	adds	r3, #24
 80005f0:	6818      	ldr	r0, [r3, #0]
 80005f2:	88fa      	ldrh	r2, [r7, #6]
 80005f4:	4976      	ldr	r1, [pc, #472]	@ (80007d0 <KEYPAD_Scan+0x2bc>)
 80005f6:	4613      	mov	r3, r2
 80005f8:	005b      	lsls	r3, r3, #1
 80005fa:	4413      	add	r3, r2
 80005fc:	011b      	lsls	r3, r3, #4
 80005fe:	440b      	add	r3, r1
 8000600:	3328      	adds	r3, #40	@ 0x28
 8000602:	881b      	ldrh	r3, [r3, #0]
 8000604:	2201      	movs	r2, #1
 8000606:	4619      	mov	r1, r3
 8000608:	f002 fdac 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 800060c:	88fa      	ldrh	r2, [r7, #6]
 800060e:	4970      	ldr	r1, [pc, #448]	@ (80007d0 <KEYPAD_Scan+0x2bc>)
 8000610:	4613      	mov	r3, r2
 8000612:	005b      	lsls	r3, r3, #1
 8000614:	4413      	add	r3, r2
 8000616:	011b      	lsls	r3, r3, #4
 8000618:	440b      	add	r3, r1
 800061a:	331c      	adds	r3, #28
 800061c:	6818      	ldr	r0, [r3, #0]
 800061e:	88fa      	ldrh	r2, [r7, #6]
 8000620:	496b      	ldr	r1, [pc, #428]	@ (80007d0 <KEYPAD_Scan+0x2bc>)
 8000622:	4613      	mov	r3, r2
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	4413      	add	r3, r2
 8000628:	011b      	lsls	r3, r3, #4
 800062a:	440b      	add	r3, r1
 800062c:	332a      	adds	r3, #42	@ 0x2a
 800062e:	881b      	ldrh	r3, [r3, #0]
 8000630:	2200      	movs	r2, #0
 8000632:	4619      	mov	r1, r3
 8000634:	f002 fd96 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8000638:	88fa      	ldrh	r2, [r7, #6]
 800063a:	4965      	ldr	r1, [pc, #404]	@ (80007d0 <KEYPAD_Scan+0x2bc>)
 800063c:	4613      	mov	r3, r2
 800063e:	005b      	lsls	r3, r3, #1
 8000640:	4413      	add	r3, r2
 8000642:	011b      	lsls	r3, r3, #4
 8000644:	440b      	add	r3, r1
 8000646:	3320      	adds	r3, #32
 8000648:	6818      	ldr	r0, [r3, #0]
 800064a:	88fa      	ldrh	r2, [r7, #6]
 800064c:	4960      	ldr	r1, [pc, #384]	@ (80007d0 <KEYPAD_Scan+0x2bc>)
 800064e:	4613      	mov	r3, r2
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	4413      	add	r3, r2
 8000654:	011b      	lsls	r3, r3, #4
 8000656:	440b      	add	r3, r1
 8000658:	332c      	adds	r3, #44	@ 0x2c
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	2200      	movs	r2, #0
 800065e:	4619      	mov	r1, r3
 8000660:	f002 fd80 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8000664:	88fa      	ldrh	r2, [r7, #6]
 8000666:	495a      	ldr	r1, [pc, #360]	@ (80007d0 <KEYPAD_Scan+0x2bc>)
 8000668:	4613      	mov	r3, r2
 800066a:	005b      	lsls	r3, r3, #1
 800066c:	4413      	add	r3, r2
 800066e:	011b      	lsls	r3, r3, #4
 8000670:	440b      	add	r3, r1
 8000672:	3324      	adds	r3, #36	@ 0x24
 8000674:	6818      	ldr	r0, [r3, #0]
 8000676:	88fa      	ldrh	r2, [r7, #6]
 8000678:	4955      	ldr	r1, [pc, #340]	@ (80007d0 <KEYPAD_Scan+0x2bc>)
 800067a:	4613      	mov	r3, r2
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	4413      	add	r3, r2
 8000680:	011b      	lsls	r3, r3, #4
 8000682:	440b      	add	r3, r1
 8000684:	332e      	adds	r3, #46	@ 0x2e
 8000686:	881b      	ldrh	r3, [r3, #0]
 8000688:	2200      	movs	r2, #0
 800068a:	4619      	mov	r1, r3
 800068c:	f002 fd6a 	bl	8003164 <HAL_GPIO_WritePin>
			/* Read ROW0-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[0], KEYPAD_CfgParam[au16_Instance].ROW_PIN[0]);
 8000690:	88fa      	ldrh	r2, [r7, #6]
 8000692:	494f      	ldr	r1, [pc, #316]	@ (80007d0 <KEYPAD_Scan+0x2bc>)
 8000694:	4613      	mov	r3, r2
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	4413      	add	r3, r2
 800069a:	011b      	lsls	r3, r3, #4
 800069c:	440b      	add	r3, r1
 800069e:	6818      	ldr	r0, [r3, #0]
 80006a0:	88fa      	ldrh	r2, [r7, #6]
 80006a2:	494b      	ldr	r1, [pc, #300]	@ (80007d0 <KEYPAD_Scan+0x2bc>)
 80006a4:	4613      	mov	r3, r2
 80006a6:	005b      	lsls	r3, r3, #1
 80006a8:	4413      	add	r3, r2
 80006aa:	011b      	lsls	r3, r3, #4
 80006ac:	440b      	add	r3, r1
 80006ae:	3310      	adds	r3, #16
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	4619      	mov	r1, r3
 80006b4:	f002 fd3e 	bl	8003134 <HAL_GPIO_ReadPin>
 80006b8:	4603      	mov	r3, r0
 80006ba:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80006bc:	7bbb      	ldrb	r3, [r7, #14]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d006      	beq.n	80006d0 <KEYPAD_Scan+0x1bc>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[0] = 1;
 80006c2:	88fb      	ldrh	r3, [r7, #6]
 80006c4:	4a43      	ldr	r2, [pc, #268]	@ (80007d4 <KEYPAD_Scan+0x2c0>)
 80006c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ca:	2201      	movs	r2, #1
 80006cc:	701a      	strb	r2, [r3, #0]
 80006ce:	e005      	b.n	80006dc <KEYPAD_Scan+0x1c8>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[0] = 0;
 80006d0:	88fb      	ldrh	r3, [r7, #6]
 80006d2:	4a40      	ldr	r2, [pc, #256]	@ (80007d4 <KEYPAD_Scan+0x2c0>)
 80006d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006d8:	2200      	movs	r2, #0
 80006da:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 80006dc:	88fa      	ldrh	r2, [r7, #6]
 80006de:	493c      	ldr	r1, [pc, #240]	@ (80007d0 <KEYPAD_Scan+0x2bc>)
 80006e0:	4613      	mov	r3, r2
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	4413      	add	r3, r2
 80006e6:	011b      	lsls	r3, r3, #4
 80006e8:	440b      	add	r3, r1
 80006ea:	3318      	adds	r3, #24
 80006ec:	6818      	ldr	r0, [r3, #0]
 80006ee:	88fa      	ldrh	r2, [r7, #6]
 80006f0:	4937      	ldr	r1, [pc, #220]	@ (80007d0 <KEYPAD_Scan+0x2bc>)
 80006f2:	4613      	mov	r3, r2
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	4413      	add	r3, r2
 80006f8:	011b      	lsls	r3, r3, #4
 80006fa:	440b      	add	r3, r1
 80006fc:	3328      	adds	r3, #40	@ 0x28
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	2200      	movs	r2, #0
 8000702:	4619      	mov	r1, r3
 8000704:	f002 fd2e 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 1);
 8000708:	88fa      	ldrh	r2, [r7, #6]
 800070a:	4931      	ldr	r1, [pc, #196]	@ (80007d0 <KEYPAD_Scan+0x2bc>)
 800070c:	4613      	mov	r3, r2
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	4413      	add	r3, r2
 8000712:	011b      	lsls	r3, r3, #4
 8000714:	440b      	add	r3, r1
 8000716:	331c      	adds	r3, #28
 8000718:	6818      	ldr	r0, [r3, #0]
 800071a:	88fa      	ldrh	r2, [r7, #6]
 800071c:	492c      	ldr	r1, [pc, #176]	@ (80007d0 <KEYPAD_Scan+0x2bc>)
 800071e:	4613      	mov	r3, r2
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	4413      	add	r3, r2
 8000724:	011b      	lsls	r3, r3, #4
 8000726:	440b      	add	r3, r1
 8000728:	332a      	adds	r3, #42	@ 0x2a
 800072a:	881b      	ldrh	r3, [r3, #0]
 800072c:	2201      	movs	r2, #1
 800072e:	4619      	mov	r1, r3
 8000730:	f002 fd18 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8000734:	88fa      	ldrh	r2, [r7, #6]
 8000736:	4926      	ldr	r1, [pc, #152]	@ (80007d0 <KEYPAD_Scan+0x2bc>)
 8000738:	4613      	mov	r3, r2
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	4413      	add	r3, r2
 800073e:	011b      	lsls	r3, r3, #4
 8000740:	440b      	add	r3, r1
 8000742:	3320      	adds	r3, #32
 8000744:	6818      	ldr	r0, [r3, #0]
 8000746:	88fa      	ldrh	r2, [r7, #6]
 8000748:	4921      	ldr	r1, [pc, #132]	@ (80007d0 <KEYPAD_Scan+0x2bc>)
 800074a:	4613      	mov	r3, r2
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	4413      	add	r3, r2
 8000750:	011b      	lsls	r3, r3, #4
 8000752:	440b      	add	r3, r1
 8000754:	332c      	adds	r3, #44	@ 0x2c
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	2200      	movs	r2, #0
 800075a:	4619      	mov	r1, r3
 800075c:	f002 fd02 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8000760:	88fa      	ldrh	r2, [r7, #6]
 8000762:	491b      	ldr	r1, [pc, #108]	@ (80007d0 <KEYPAD_Scan+0x2bc>)
 8000764:	4613      	mov	r3, r2
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	4413      	add	r3, r2
 800076a:	011b      	lsls	r3, r3, #4
 800076c:	440b      	add	r3, r1
 800076e:	3324      	adds	r3, #36	@ 0x24
 8000770:	6818      	ldr	r0, [r3, #0]
 8000772:	88fa      	ldrh	r2, [r7, #6]
 8000774:	4916      	ldr	r1, [pc, #88]	@ (80007d0 <KEYPAD_Scan+0x2bc>)
 8000776:	4613      	mov	r3, r2
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	4413      	add	r3, r2
 800077c:	011b      	lsls	r3, r3, #4
 800077e:	440b      	add	r3, r1
 8000780:	332e      	adds	r3, #46	@ 0x2e
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	2200      	movs	r2, #0
 8000786:	4619      	mov	r1, r3
 8000788:	f002 fcec 	bl	8003164 <HAL_GPIO_WritePin>
			/* Read ROW0-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[0], KEYPAD_CfgParam[au16_Instance].ROW_PIN[0]);
 800078c:	88fa      	ldrh	r2, [r7, #6]
 800078e:	4910      	ldr	r1, [pc, #64]	@ (80007d0 <KEYPAD_Scan+0x2bc>)
 8000790:	4613      	mov	r3, r2
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	4413      	add	r3, r2
 8000796:	011b      	lsls	r3, r3, #4
 8000798:	440b      	add	r3, r1
 800079a:	6818      	ldr	r0, [r3, #0]
 800079c:	88fa      	ldrh	r2, [r7, #6]
 800079e:	490c      	ldr	r1, [pc, #48]	@ (80007d0 <KEYPAD_Scan+0x2bc>)
 80007a0:	4613      	mov	r3, r2
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	4413      	add	r3, r2
 80007a6:	011b      	lsls	r3, r3, #4
 80007a8:	440b      	add	r3, r1
 80007aa:	3310      	adds	r3, #16
 80007ac:	881b      	ldrh	r3, [r3, #0]
 80007ae:	4619      	mov	r1, r3
 80007b0:	f002 fcc0 	bl	8003134 <HAL_GPIO_ReadPin>
 80007b4:	4603      	mov	r3, r0
 80007b6:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80007b8:	7bbb      	ldrb	r3, [r7, #14]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d00c      	beq.n	80007d8 <KEYPAD_Scan+0x2c4>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[1] = 1;
 80007be:	88fb      	ldrh	r3, [r7, #6]
 80007c0:	4a04      	ldr	r2, [pc, #16]	@ (80007d4 <KEYPAD_Scan+0x2c0>)
 80007c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007c6:	3301      	adds	r3, #1
 80007c8:	2201      	movs	r2, #1
 80007ca:	701a      	strb	r2, [r3, #0]
 80007cc:	e00b      	b.n	80007e6 <KEYPAD_Scan+0x2d2>
 80007ce:	bf00      	nop
 80007d0:	08005f10 	.word	0x08005f10
 80007d4:	20000068 	.word	0x20000068
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[1] = 0;
 80007d8:	88fb      	ldrh	r3, [r7, #6]
 80007da:	4a7f      	ldr	r2, [pc, #508]	@ (80009d8 <KEYPAD_Scan+0x4c4>)
 80007dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007e0:	3301      	adds	r3, #1
 80007e2:	2200      	movs	r2, #0
 80007e4:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 80007e6:	88fa      	ldrh	r2, [r7, #6]
 80007e8:	497c      	ldr	r1, [pc, #496]	@ (80009dc <KEYPAD_Scan+0x4c8>)
 80007ea:	4613      	mov	r3, r2
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	4413      	add	r3, r2
 80007f0:	011b      	lsls	r3, r3, #4
 80007f2:	440b      	add	r3, r1
 80007f4:	3318      	adds	r3, #24
 80007f6:	6818      	ldr	r0, [r3, #0]
 80007f8:	88fa      	ldrh	r2, [r7, #6]
 80007fa:	4978      	ldr	r1, [pc, #480]	@ (80009dc <KEYPAD_Scan+0x4c8>)
 80007fc:	4613      	mov	r3, r2
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	4413      	add	r3, r2
 8000802:	011b      	lsls	r3, r3, #4
 8000804:	440b      	add	r3, r1
 8000806:	3328      	adds	r3, #40	@ 0x28
 8000808:	881b      	ldrh	r3, [r3, #0]
 800080a:	2200      	movs	r2, #0
 800080c:	4619      	mov	r1, r3
 800080e:	f002 fca9 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8000812:	88fa      	ldrh	r2, [r7, #6]
 8000814:	4971      	ldr	r1, [pc, #452]	@ (80009dc <KEYPAD_Scan+0x4c8>)
 8000816:	4613      	mov	r3, r2
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	4413      	add	r3, r2
 800081c:	011b      	lsls	r3, r3, #4
 800081e:	440b      	add	r3, r1
 8000820:	331c      	adds	r3, #28
 8000822:	6818      	ldr	r0, [r3, #0]
 8000824:	88fa      	ldrh	r2, [r7, #6]
 8000826:	496d      	ldr	r1, [pc, #436]	@ (80009dc <KEYPAD_Scan+0x4c8>)
 8000828:	4613      	mov	r3, r2
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	4413      	add	r3, r2
 800082e:	011b      	lsls	r3, r3, #4
 8000830:	440b      	add	r3, r1
 8000832:	332a      	adds	r3, #42	@ 0x2a
 8000834:	881b      	ldrh	r3, [r3, #0]
 8000836:	2200      	movs	r2, #0
 8000838:	4619      	mov	r1, r3
 800083a:	f002 fc93 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 1);
 800083e:	88fa      	ldrh	r2, [r7, #6]
 8000840:	4966      	ldr	r1, [pc, #408]	@ (80009dc <KEYPAD_Scan+0x4c8>)
 8000842:	4613      	mov	r3, r2
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	4413      	add	r3, r2
 8000848:	011b      	lsls	r3, r3, #4
 800084a:	440b      	add	r3, r1
 800084c:	3320      	adds	r3, #32
 800084e:	6818      	ldr	r0, [r3, #0]
 8000850:	88fa      	ldrh	r2, [r7, #6]
 8000852:	4962      	ldr	r1, [pc, #392]	@ (80009dc <KEYPAD_Scan+0x4c8>)
 8000854:	4613      	mov	r3, r2
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	4413      	add	r3, r2
 800085a:	011b      	lsls	r3, r3, #4
 800085c:	440b      	add	r3, r1
 800085e:	332c      	adds	r3, #44	@ 0x2c
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	2201      	movs	r2, #1
 8000864:	4619      	mov	r1, r3
 8000866:	f002 fc7d 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 800086a:	88fa      	ldrh	r2, [r7, #6]
 800086c:	495b      	ldr	r1, [pc, #364]	@ (80009dc <KEYPAD_Scan+0x4c8>)
 800086e:	4613      	mov	r3, r2
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	4413      	add	r3, r2
 8000874:	011b      	lsls	r3, r3, #4
 8000876:	440b      	add	r3, r1
 8000878:	3324      	adds	r3, #36	@ 0x24
 800087a:	6818      	ldr	r0, [r3, #0]
 800087c:	88fa      	ldrh	r2, [r7, #6]
 800087e:	4957      	ldr	r1, [pc, #348]	@ (80009dc <KEYPAD_Scan+0x4c8>)
 8000880:	4613      	mov	r3, r2
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	4413      	add	r3, r2
 8000886:	011b      	lsls	r3, r3, #4
 8000888:	440b      	add	r3, r1
 800088a:	332e      	adds	r3, #46	@ 0x2e
 800088c:	881b      	ldrh	r3, [r3, #0]
 800088e:	2200      	movs	r2, #0
 8000890:	4619      	mov	r1, r3
 8000892:	f002 fc67 	bl	8003164 <HAL_GPIO_WritePin>
			/* Read ROW0-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[0], KEYPAD_CfgParam[au16_Instance].ROW_PIN[0]);
 8000896:	88fa      	ldrh	r2, [r7, #6]
 8000898:	4950      	ldr	r1, [pc, #320]	@ (80009dc <KEYPAD_Scan+0x4c8>)
 800089a:	4613      	mov	r3, r2
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	4413      	add	r3, r2
 80008a0:	011b      	lsls	r3, r3, #4
 80008a2:	440b      	add	r3, r1
 80008a4:	6818      	ldr	r0, [r3, #0]
 80008a6:	88fa      	ldrh	r2, [r7, #6]
 80008a8:	494c      	ldr	r1, [pc, #304]	@ (80009dc <KEYPAD_Scan+0x4c8>)
 80008aa:	4613      	mov	r3, r2
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	4413      	add	r3, r2
 80008b0:	011b      	lsls	r3, r3, #4
 80008b2:	440b      	add	r3, r1
 80008b4:	3310      	adds	r3, #16
 80008b6:	881b      	ldrh	r3, [r3, #0]
 80008b8:	4619      	mov	r1, r3
 80008ba:	f002 fc3b 	bl	8003134 <HAL_GPIO_ReadPin>
 80008be:	4603      	mov	r3, r0
 80008c0:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80008c2:	7bbb      	ldrb	r3, [r7, #14]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d007      	beq.n	80008d8 <KEYPAD_Scan+0x3c4>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[2] = 1;
 80008c8:	88fb      	ldrh	r3, [r7, #6]
 80008ca:	4a43      	ldr	r2, [pc, #268]	@ (80009d8 <KEYPAD_Scan+0x4c4>)
 80008cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008d0:	3302      	adds	r3, #2
 80008d2:	2201      	movs	r2, #1
 80008d4:	701a      	strb	r2, [r3, #0]
 80008d6:	e006      	b.n	80008e6 <KEYPAD_Scan+0x3d2>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[2] = 0;
 80008d8:	88fb      	ldrh	r3, [r7, #6]
 80008da:	4a3f      	ldr	r2, [pc, #252]	@ (80009d8 <KEYPAD_Scan+0x4c4>)
 80008dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008e0:	3302      	adds	r3, #2
 80008e2:	2200      	movs	r2, #0
 80008e4:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 80008e6:	88fa      	ldrh	r2, [r7, #6]
 80008e8:	493c      	ldr	r1, [pc, #240]	@ (80009dc <KEYPAD_Scan+0x4c8>)
 80008ea:	4613      	mov	r3, r2
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	4413      	add	r3, r2
 80008f0:	011b      	lsls	r3, r3, #4
 80008f2:	440b      	add	r3, r1
 80008f4:	3318      	adds	r3, #24
 80008f6:	6818      	ldr	r0, [r3, #0]
 80008f8:	88fa      	ldrh	r2, [r7, #6]
 80008fa:	4938      	ldr	r1, [pc, #224]	@ (80009dc <KEYPAD_Scan+0x4c8>)
 80008fc:	4613      	mov	r3, r2
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	4413      	add	r3, r2
 8000902:	011b      	lsls	r3, r3, #4
 8000904:	440b      	add	r3, r1
 8000906:	3328      	adds	r3, #40	@ 0x28
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	2200      	movs	r2, #0
 800090c:	4619      	mov	r1, r3
 800090e:	f002 fc29 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8000912:	88fa      	ldrh	r2, [r7, #6]
 8000914:	4931      	ldr	r1, [pc, #196]	@ (80009dc <KEYPAD_Scan+0x4c8>)
 8000916:	4613      	mov	r3, r2
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	4413      	add	r3, r2
 800091c:	011b      	lsls	r3, r3, #4
 800091e:	440b      	add	r3, r1
 8000920:	331c      	adds	r3, #28
 8000922:	6818      	ldr	r0, [r3, #0]
 8000924:	88fa      	ldrh	r2, [r7, #6]
 8000926:	492d      	ldr	r1, [pc, #180]	@ (80009dc <KEYPAD_Scan+0x4c8>)
 8000928:	4613      	mov	r3, r2
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	4413      	add	r3, r2
 800092e:	011b      	lsls	r3, r3, #4
 8000930:	440b      	add	r3, r1
 8000932:	332a      	adds	r3, #42	@ 0x2a
 8000934:	881b      	ldrh	r3, [r3, #0]
 8000936:	2200      	movs	r2, #0
 8000938:	4619      	mov	r1, r3
 800093a:	f002 fc13 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 800093e:	88fa      	ldrh	r2, [r7, #6]
 8000940:	4926      	ldr	r1, [pc, #152]	@ (80009dc <KEYPAD_Scan+0x4c8>)
 8000942:	4613      	mov	r3, r2
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	4413      	add	r3, r2
 8000948:	011b      	lsls	r3, r3, #4
 800094a:	440b      	add	r3, r1
 800094c:	3320      	adds	r3, #32
 800094e:	6818      	ldr	r0, [r3, #0]
 8000950:	88fa      	ldrh	r2, [r7, #6]
 8000952:	4922      	ldr	r1, [pc, #136]	@ (80009dc <KEYPAD_Scan+0x4c8>)
 8000954:	4613      	mov	r3, r2
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	4413      	add	r3, r2
 800095a:	011b      	lsls	r3, r3, #4
 800095c:	440b      	add	r3, r1
 800095e:	332c      	adds	r3, #44	@ 0x2c
 8000960:	881b      	ldrh	r3, [r3, #0]
 8000962:	2200      	movs	r2, #0
 8000964:	4619      	mov	r1, r3
 8000966:	f002 fbfd 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 1);
 800096a:	88fa      	ldrh	r2, [r7, #6]
 800096c:	491b      	ldr	r1, [pc, #108]	@ (80009dc <KEYPAD_Scan+0x4c8>)
 800096e:	4613      	mov	r3, r2
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	4413      	add	r3, r2
 8000974:	011b      	lsls	r3, r3, #4
 8000976:	440b      	add	r3, r1
 8000978:	3324      	adds	r3, #36	@ 0x24
 800097a:	6818      	ldr	r0, [r3, #0]
 800097c:	88fa      	ldrh	r2, [r7, #6]
 800097e:	4917      	ldr	r1, [pc, #92]	@ (80009dc <KEYPAD_Scan+0x4c8>)
 8000980:	4613      	mov	r3, r2
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	4413      	add	r3, r2
 8000986:	011b      	lsls	r3, r3, #4
 8000988:	440b      	add	r3, r1
 800098a:	332e      	adds	r3, #46	@ 0x2e
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	2201      	movs	r2, #1
 8000990:	4619      	mov	r1, r3
 8000992:	f002 fbe7 	bl	8003164 <HAL_GPIO_WritePin>
			/* Read ROW0-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[0], KEYPAD_CfgParam[au16_Instance].ROW_PIN[0]);
 8000996:	88fa      	ldrh	r2, [r7, #6]
 8000998:	4910      	ldr	r1, [pc, #64]	@ (80009dc <KEYPAD_Scan+0x4c8>)
 800099a:	4613      	mov	r3, r2
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	4413      	add	r3, r2
 80009a0:	011b      	lsls	r3, r3, #4
 80009a2:	440b      	add	r3, r1
 80009a4:	6818      	ldr	r0, [r3, #0]
 80009a6:	88fa      	ldrh	r2, [r7, #6]
 80009a8:	490c      	ldr	r1, [pc, #48]	@ (80009dc <KEYPAD_Scan+0x4c8>)
 80009aa:	4613      	mov	r3, r2
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	4413      	add	r3, r2
 80009b0:	011b      	lsls	r3, r3, #4
 80009b2:	440b      	add	r3, r1
 80009b4:	3310      	adds	r3, #16
 80009b6:	881b      	ldrh	r3, [r3, #0]
 80009b8:	4619      	mov	r1, r3
 80009ba:	f002 fbbb 	bl	8003134 <HAL_GPIO_ReadPin>
 80009be:	4603      	mov	r3, r0
 80009c0:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80009c2:	7bbb      	ldrb	r3, [r7, #14]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d026      	beq.n	8000a16 <KEYPAD_Scan+0x502>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[3] = 1;
 80009c8:	88fb      	ldrh	r3, [r7, #6]
 80009ca:	4a03      	ldr	r2, [pc, #12]	@ (80009d8 <KEYPAD_Scan+0x4c4>)
 80009cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d0:	3303      	adds	r3, #3
 80009d2:	2201      	movs	r2, #1
 80009d4:	701a      	strb	r2, [r3, #0]
 80009d6:	e01e      	b.n	8000a16 <KEYPAD_Scan+0x502>
 80009d8:	20000068 	.word	0x20000068
 80009dc:	08005f10 	.word	0x08005f10
			}
		}
		else
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[0] = 0;
 80009e0:	88fb      	ldrh	r3, [r7, #6]
 80009e2:	4a8c      	ldr	r2, [pc, #560]	@ (8000c14 <KEYPAD_Scan+0x700>)
 80009e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[1] = 0;
 80009ec:	88fb      	ldrh	r3, [r7, #6]
 80009ee:	4a89      	ldr	r2, [pc, #548]	@ (8000c14 <KEYPAD_Scan+0x700>)
 80009f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f4:	3301      	adds	r3, #1
 80009f6:	2200      	movs	r2, #0
 80009f8:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[2] = 0;
 80009fa:	88fb      	ldrh	r3, [r7, #6]
 80009fc:	4a85      	ldr	r2, [pc, #532]	@ (8000c14 <KEYPAD_Scan+0x700>)
 80009fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a02:	3302      	adds	r3, #2
 8000a04:	2200      	movs	r2, #0
 8000a06:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[3] = 0;
 8000a08:	88fb      	ldrh	r3, [r7, #6]
 8000a0a:	4a82      	ldr	r2, [pc, #520]	@ (8000c14 <KEYPAD_Scan+0x700>)
 8000a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a10:	3303      	adds	r3, #3
 8000a12:	2200      	movs	r2, #0
 8000a14:	701a      	strb	r2, [r3, #0]
		}
		/*---------------------[END OF 1st ROW Check ]--------------------*/
		/*--[ Second Row Check ]--*/
		if(au8_ReadState[1])
 8000a16:	7a7b      	ldrb	r3, [r7, #9]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	f000 8205 	beq.w	8000e28 <KEYPAD_Scan+0x914>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 1);
 8000a1e:	88fa      	ldrh	r2, [r7, #6]
 8000a20:	497d      	ldr	r1, [pc, #500]	@ (8000c18 <KEYPAD_Scan+0x704>)
 8000a22:	4613      	mov	r3, r2
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	4413      	add	r3, r2
 8000a28:	011b      	lsls	r3, r3, #4
 8000a2a:	440b      	add	r3, r1
 8000a2c:	3318      	adds	r3, #24
 8000a2e:	6818      	ldr	r0, [r3, #0]
 8000a30:	88fa      	ldrh	r2, [r7, #6]
 8000a32:	4979      	ldr	r1, [pc, #484]	@ (8000c18 <KEYPAD_Scan+0x704>)
 8000a34:	4613      	mov	r3, r2
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	4413      	add	r3, r2
 8000a3a:	011b      	lsls	r3, r3, #4
 8000a3c:	440b      	add	r3, r1
 8000a3e:	3328      	adds	r3, #40	@ 0x28
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	2201      	movs	r2, #1
 8000a44:	4619      	mov	r1, r3
 8000a46:	f002 fb8d 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8000a4a:	88fa      	ldrh	r2, [r7, #6]
 8000a4c:	4972      	ldr	r1, [pc, #456]	@ (8000c18 <KEYPAD_Scan+0x704>)
 8000a4e:	4613      	mov	r3, r2
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	4413      	add	r3, r2
 8000a54:	011b      	lsls	r3, r3, #4
 8000a56:	440b      	add	r3, r1
 8000a58:	331c      	adds	r3, #28
 8000a5a:	6818      	ldr	r0, [r3, #0]
 8000a5c:	88fa      	ldrh	r2, [r7, #6]
 8000a5e:	496e      	ldr	r1, [pc, #440]	@ (8000c18 <KEYPAD_Scan+0x704>)
 8000a60:	4613      	mov	r3, r2
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	4413      	add	r3, r2
 8000a66:	011b      	lsls	r3, r3, #4
 8000a68:	440b      	add	r3, r1
 8000a6a:	332a      	adds	r3, #42	@ 0x2a
 8000a6c:	881b      	ldrh	r3, [r3, #0]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	4619      	mov	r1, r3
 8000a72:	f002 fb77 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8000a76:	88fa      	ldrh	r2, [r7, #6]
 8000a78:	4967      	ldr	r1, [pc, #412]	@ (8000c18 <KEYPAD_Scan+0x704>)
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	4413      	add	r3, r2
 8000a80:	011b      	lsls	r3, r3, #4
 8000a82:	440b      	add	r3, r1
 8000a84:	3320      	adds	r3, #32
 8000a86:	6818      	ldr	r0, [r3, #0]
 8000a88:	88fa      	ldrh	r2, [r7, #6]
 8000a8a:	4963      	ldr	r1, [pc, #396]	@ (8000c18 <KEYPAD_Scan+0x704>)
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	4413      	add	r3, r2
 8000a92:	011b      	lsls	r3, r3, #4
 8000a94:	440b      	add	r3, r1
 8000a96:	332c      	adds	r3, #44	@ 0x2c
 8000a98:	881b      	ldrh	r3, [r3, #0]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f002 fb61 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8000aa2:	88fa      	ldrh	r2, [r7, #6]
 8000aa4:	495c      	ldr	r1, [pc, #368]	@ (8000c18 <KEYPAD_Scan+0x704>)
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	4413      	add	r3, r2
 8000aac:	011b      	lsls	r3, r3, #4
 8000aae:	440b      	add	r3, r1
 8000ab0:	3324      	adds	r3, #36	@ 0x24
 8000ab2:	6818      	ldr	r0, [r3, #0]
 8000ab4:	88fa      	ldrh	r2, [r7, #6]
 8000ab6:	4958      	ldr	r1, [pc, #352]	@ (8000c18 <KEYPAD_Scan+0x704>)
 8000ab8:	4613      	mov	r3, r2
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	4413      	add	r3, r2
 8000abe:	011b      	lsls	r3, r3, #4
 8000ac0:	440b      	add	r3, r1
 8000ac2:	332e      	adds	r3, #46	@ 0x2e
 8000ac4:	881b      	ldrh	r3, [r3, #0]
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f002 fb4b 	bl	8003164 <HAL_GPIO_WritePin>
			/* Read ROW1-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[1], KEYPAD_CfgParam[au16_Instance].ROW_PIN[1]);
 8000ace:	88fa      	ldrh	r2, [r7, #6]
 8000ad0:	4951      	ldr	r1, [pc, #324]	@ (8000c18 <KEYPAD_Scan+0x704>)
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	4413      	add	r3, r2
 8000ad8:	011b      	lsls	r3, r3, #4
 8000ada:	440b      	add	r3, r1
 8000adc:	3304      	adds	r3, #4
 8000ade:	6818      	ldr	r0, [r3, #0]
 8000ae0:	88fa      	ldrh	r2, [r7, #6]
 8000ae2:	494d      	ldr	r1, [pc, #308]	@ (8000c18 <KEYPAD_Scan+0x704>)
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	4413      	add	r3, r2
 8000aea:	011b      	lsls	r3, r3, #4
 8000aec:	440b      	add	r3, r1
 8000aee:	3312      	adds	r3, #18
 8000af0:	881b      	ldrh	r3, [r3, #0]
 8000af2:	4619      	mov	r1, r3
 8000af4:	f002 fb1e 	bl	8003134 <HAL_GPIO_ReadPin>
 8000af8:	4603      	mov	r3, r0
 8000afa:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8000afc:	7bbb      	ldrb	r3, [r7, #14]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d007      	beq.n	8000b12 <KEYPAD_Scan+0x5fe>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[4] = 1;
 8000b02:	88fb      	ldrh	r3, [r7, #6]
 8000b04:	4a43      	ldr	r2, [pc, #268]	@ (8000c14 <KEYPAD_Scan+0x700>)
 8000b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b0a:	3304      	adds	r3, #4
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	701a      	strb	r2, [r3, #0]
 8000b10:	e006      	b.n	8000b20 <KEYPAD_Scan+0x60c>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[4] = 0;
 8000b12:	88fb      	ldrh	r3, [r7, #6]
 8000b14:	4a3f      	ldr	r2, [pc, #252]	@ (8000c14 <KEYPAD_Scan+0x700>)
 8000b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b1a:	3304      	adds	r3, #4
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8000b20:	88fa      	ldrh	r2, [r7, #6]
 8000b22:	493d      	ldr	r1, [pc, #244]	@ (8000c18 <KEYPAD_Scan+0x704>)
 8000b24:	4613      	mov	r3, r2
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	4413      	add	r3, r2
 8000b2a:	011b      	lsls	r3, r3, #4
 8000b2c:	440b      	add	r3, r1
 8000b2e:	3318      	adds	r3, #24
 8000b30:	6818      	ldr	r0, [r3, #0]
 8000b32:	88fa      	ldrh	r2, [r7, #6]
 8000b34:	4938      	ldr	r1, [pc, #224]	@ (8000c18 <KEYPAD_Scan+0x704>)
 8000b36:	4613      	mov	r3, r2
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	4413      	add	r3, r2
 8000b3c:	011b      	lsls	r3, r3, #4
 8000b3e:	440b      	add	r3, r1
 8000b40:	3328      	adds	r3, #40	@ 0x28
 8000b42:	881b      	ldrh	r3, [r3, #0]
 8000b44:	2200      	movs	r2, #0
 8000b46:	4619      	mov	r1, r3
 8000b48:	f002 fb0c 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 1);
 8000b4c:	88fa      	ldrh	r2, [r7, #6]
 8000b4e:	4932      	ldr	r1, [pc, #200]	@ (8000c18 <KEYPAD_Scan+0x704>)
 8000b50:	4613      	mov	r3, r2
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	4413      	add	r3, r2
 8000b56:	011b      	lsls	r3, r3, #4
 8000b58:	440b      	add	r3, r1
 8000b5a:	331c      	adds	r3, #28
 8000b5c:	6818      	ldr	r0, [r3, #0]
 8000b5e:	88fa      	ldrh	r2, [r7, #6]
 8000b60:	492d      	ldr	r1, [pc, #180]	@ (8000c18 <KEYPAD_Scan+0x704>)
 8000b62:	4613      	mov	r3, r2
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	4413      	add	r3, r2
 8000b68:	011b      	lsls	r3, r3, #4
 8000b6a:	440b      	add	r3, r1
 8000b6c:	332a      	adds	r3, #42	@ 0x2a
 8000b6e:	881b      	ldrh	r3, [r3, #0]
 8000b70:	2201      	movs	r2, #1
 8000b72:	4619      	mov	r1, r3
 8000b74:	f002 faf6 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8000b78:	88fa      	ldrh	r2, [r7, #6]
 8000b7a:	4927      	ldr	r1, [pc, #156]	@ (8000c18 <KEYPAD_Scan+0x704>)
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	4413      	add	r3, r2
 8000b82:	011b      	lsls	r3, r3, #4
 8000b84:	440b      	add	r3, r1
 8000b86:	3320      	adds	r3, #32
 8000b88:	6818      	ldr	r0, [r3, #0]
 8000b8a:	88fa      	ldrh	r2, [r7, #6]
 8000b8c:	4922      	ldr	r1, [pc, #136]	@ (8000c18 <KEYPAD_Scan+0x704>)
 8000b8e:	4613      	mov	r3, r2
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	4413      	add	r3, r2
 8000b94:	011b      	lsls	r3, r3, #4
 8000b96:	440b      	add	r3, r1
 8000b98:	332c      	adds	r3, #44	@ 0x2c
 8000b9a:	881b      	ldrh	r3, [r3, #0]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	f002 fae0 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8000ba4:	88fa      	ldrh	r2, [r7, #6]
 8000ba6:	491c      	ldr	r1, [pc, #112]	@ (8000c18 <KEYPAD_Scan+0x704>)
 8000ba8:	4613      	mov	r3, r2
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	4413      	add	r3, r2
 8000bae:	011b      	lsls	r3, r3, #4
 8000bb0:	440b      	add	r3, r1
 8000bb2:	3324      	adds	r3, #36	@ 0x24
 8000bb4:	6818      	ldr	r0, [r3, #0]
 8000bb6:	88fa      	ldrh	r2, [r7, #6]
 8000bb8:	4917      	ldr	r1, [pc, #92]	@ (8000c18 <KEYPAD_Scan+0x704>)
 8000bba:	4613      	mov	r3, r2
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	4413      	add	r3, r2
 8000bc0:	011b      	lsls	r3, r3, #4
 8000bc2:	440b      	add	r3, r1
 8000bc4:	332e      	adds	r3, #46	@ 0x2e
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	4619      	mov	r1, r3
 8000bcc:	f002 faca 	bl	8003164 <HAL_GPIO_WritePin>
			/* Read ROW1-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[1], KEYPAD_CfgParam[au16_Instance].ROW_PIN[1]);
 8000bd0:	88fa      	ldrh	r2, [r7, #6]
 8000bd2:	4911      	ldr	r1, [pc, #68]	@ (8000c18 <KEYPAD_Scan+0x704>)
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	4413      	add	r3, r2
 8000bda:	011b      	lsls	r3, r3, #4
 8000bdc:	440b      	add	r3, r1
 8000bde:	3304      	adds	r3, #4
 8000be0:	6818      	ldr	r0, [r3, #0]
 8000be2:	88fa      	ldrh	r2, [r7, #6]
 8000be4:	490c      	ldr	r1, [pc, #48]	@ (8000c18 <KEYPAD_Scan+0x704>)
 8000be6:	4613      	mov	r3, r2
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	4413      	add	r3, r2
 8000bec:	011b      	lsls	r3, r3, #4
 8000bee:	440b      	add	r3, r1
 8000bf0:	3312      	adds	r3, #18
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	f002 fa9d 	bl	8003134 <HAL_GPIO_ReadPin>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8000bfe:	7bbb      	ldrb	r3, [r7, #14]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d00b      	beq.n	8000c1c <KEYPAD_Scan+0x708>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[5] = 1;
 8000c04:	88fb      	ldrh	r3, [r7, #6]
 8000c06:	4a03      	ldr	r2, [pc, #12]	@ (8000c14 <KEYPAD_Scan+0x700>)
 8000c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c0c:	3305      	adds	r3, #5
 8000c0e:	2201      	movs	r2, #1
 8000c10:	701a      	strb	r2, [r3, #0]
 8000c12:	e00a      	b.n	8000c2a <KEYPAD_Scan+0x716>
 8000c14:	20000068 	.word	0x20000068
 8000c18:	08005f10 	.word	0x08005f10
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[5] = 0;
 8000c1c:	88fb      	ldrh	r3, [r7, #6]
 8000c1e:	4a80      	ldr	r2, [pc, #512]	@ (8000e20 <KEYPAD_Scan+0x90c>)
 8000c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c24:	3305      	adds	r3, #5
 8000c26:	2200      	movs	r2, #0
 8000c28:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8000c2a:	88fa      	ldrh	r2, [r7, #6]
 8000c2c:	497d      	ldr	r1, [pc, #500]	@ (8000e24 <KEYPAD_Scan+0x910>)
 8000c2e:	4613      	mov	r3, r2
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	4413      	add	r3, r2
 8000c34:	011b      	lsls	r3, r3, #4
 8000c36:	440b      	add	r3, r1
 8000c38:	3318      	adds	r3, #24
 8000c3a:	6818      	ldr	r0, [r3, #0]
 8000c3c:	88fa      	ldrh	r2, [r7, #6]
 8000c3e:	4979      	ldr	r1, [pc, #484]	@ (8000e24 <KEYPAD_Scan+0x910>)
 8000c40:	4613      	mov	r3, r2
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	4413      	add	r3, r2
 8000c46:	011b      	lsls	r3, r3, #4
 8000c48:	440b      	add	r3, r1
 8000c4a:	3328      	adds	r3, #40	@ 0x28
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	4619      	mov	r1, r3
 8000c52:	f002 fa87 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8000c56:	88fa      	ldrh	r2, [r7, #6]
 8000c58:	4972      	ldr	r1, [pc, #456]	@ (8000e24 <KEYPAD_Scan+0x910>)
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	4413      	add	r3, r2
 8000c60:	011b      	lsls	r3, r3, #4
 8000c62:	440b      	add	r3, r1
 8000c64:	331c      	adds	r3, #28
 8000c66:	6818      	ldr	r0, [r3, #0]
 8000c68:	88fa      	ldrh	r2, [r7, #6]
 8000c6a:	496e      	ldr	r1, [pc, #440]	@ (8000e24 <KEYPAD_Scan+0x910>)
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	4413      	add	r3, r2
 8000c72:	011b      	lsls	r3, r3, #4
 8000c74:	440b      	add	r3, r1
 8000c76:	332a      	adds	r3, #42	@ 0x2a
 8000c78:	881b      	ldrh	r3, [r3, #0]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	f002 fa71 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 1);
 8000c82:	88fa      	ldrh	r2, [r7, #6]
 8000c84:	4967      	ldr	r1, [pc, #412]	@ (8000e24 <KEYPAD_Scan+0x910>)
 8000c86:	4613      	mov	r3, r2
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	4413      	add	r3, r2
 8000c8c:	011b      	lsls	r3, r3, #4
 8000c8e:	440b      	add	r3, r1
 8000c90:	3320      	adds	r3, #32
 8000c92:	6818      	ldr	r0, [r3, #0]
 8000c94:	88fa      	ldrh	r2, [r7, #6]
 8000c96:	4963      	ldr	r1, [pc, #396]	@ (8000e24 <KEYPAD_Scan+0x910>)
 8000c98:	4613      	mov	r3, r2
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	4413      	add	r3, r2
 8000c9e:	011b      	lsls	r3, r3, #4
 8000ca0:	440b      	add	r3, r1
 8000ca2:	332c      	adds	r3, #44	@ 0x2c
 8000ca4:	881b      	ldrh	r3, [r3, #0]
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f002 fa5b 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8000cae:	88fa      	ldrh	r2, [r7, #6]
 8000cb0:	495c      	ldr	r1, [pc, #368]	@ (8000e24 <KEYPAD_Scan+0x910>)
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	4413      	add	r3, r2
 8000cb8:	011b      	lsls	r3, r3, #4
 8000cba:	440b      	add	r3, r1
 8000cbc:	3324      	adds	r3, #36	@ 0x24
 8000cbe:	6818      	ldr	r0, [r3, #0]
 8000cc0:	88fa      	ldrh	r2, [r7, #6]
 8000cc2:	4958      	ldr	r1, [pc, #352]	@ (8000e24 <KEYPAD_Scan+0x910>)
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	4413      	add	r3, r2
 8000cca:	011b      	lsls	r3, r3, #4
 8000ccc:	440b      	add	r3, r1
 8000cce:	332e      	adds	r3, #46	@ 0x2e
 8000cd0:	881b      	ldrh	r3, [r3, #0]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	f002 fa45 	bl	8003164 <HAL_GPIO_WritePin>
			/* Read ROW1-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[1], KEYPAD_CfgParam[au16_Instance].ROW_PIN[1]);
 8000cda:	88fa      	ldrh	r2, [r7, #6]
 8000cdc:	4951      	ldr	r1, [pc, #324]	@ (8000e24 <KEYPAD_Scan+0x910>)
 8000cde:	4613      	mov	r3, r2
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	4413      	add	r3, r2
 8000ce4:	011b      	lsls	r3, r3, #4
 8000ce6:	440b      	add	r3, r1
 8000ce8:	3304      	adds	r3, #4
 8000cea:	6818      	ldr	r0, [r3, #0]
 8000cec:	88fa      	ldrh	r2, [r7, #6]
 8000cee:	494d      	ldr	r1, [pc, #308]	@ (8000e24 <KEYPAD_Scan+0x910>)
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	4413      	add	r3, r2
 8000cf6:	011b      	lsls	r3, r3, #4
 8000cf8:	440b      	add	r3, r1
 8000cfa:	3312      	adds	r3, #18
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	4619      	mov	r1, r3
 8000d00:	f002 fa18 	bl	8003134 <HAL_GPIO_ReadPin>
 8000d04:	4603      	mov	r3, r0
 8000d06:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8000d08:	7bbb      	ldrb	r3, [r7, #14]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d007      	beq.n	8000d1e <KEYPAD_Scan+0x80a>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[6] = 1;
 8000d0e:	88fb      	ldrh	r3, [r7, #6]
 8000d10:	4a43      	ldr	r2, [pc, #268]	@ (8000e20 <KEYPAD_Scan+0x90c>)
 8000d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d16:	3306      	adds	r3, #6
 8000d18:	2201      	movs	r2, #1
 8000d1a:	701a      	strb	r2, [r3, #0]
 8000d1c:	e006      	b.n	8000d2c <KEYPAD_Scan+0x818>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[6] = 0;
 8000d1e:	88fb      	ldrh	r3, [r7, #6]
 8000d20:	4a3f      	ldr	r2, [pc, #252]	@ (8000e20 <KEYPAD_Scan+0x90c>)
 8000d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d26:	3306      	adds	r3, #6
 8000d28:	2200      	movs	r2, #0
 8000d2a:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8000d2c:	88fa      	ldrh	r2, [r7, #6]
 8000d2e:	493d      	ldr	r1, [pc, #244]	@ (8000e24 <KEYPAD_Scan+0x910>)
 8000d30:	4613      	mov	r3, r2
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	4413      	add	r3, r2
 8000d36:	011b      	lsls	r3, r3, #4
 8000d38:	440b      	add	r3, r1
 8000d3a:	3318      	adds	r3, #24
 8000d3c:	6818      	ldr	r0, [r3, #0]
 8000d3e:	88fa      	ldrh	r2, [r7, #6]
 8000d40:	4938      	ldr	r1, [pc, #224]	@ (8000e24 <KEYPAD_Scan+0x910>)
 8000d42:	4613      	mov	r3, r2
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	4413      	add	r3, r2
 8000d48:	011b      	lsls	r3, r3, #4
 8000d4a:	440b      	add	r3, r1
 8000d4c:	3328      	adds	r3, #40	@ 0x28
 8000d4e:	881b      	ldrh	r3, [r3, #0]
 8000d50:	2200      	movs	r2, #0
 8000d52:	4619      	mov	r1, r3
 8000d54:	f002 fa06 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8000d58:	88fa      	ldrh	r2, [r7, #6]
 8000d5a:	4932      	ldr	r1, [pc, #200]	@ (8000e24 <KEYPAD_Scan+0x910>)
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	4413      	add	r3, r2
 8000d62:	011b      	lsls	r3, r3, #4
 8000d64:	440b      	add	r3, r1
 8000d66:	331c      	adds	r3, #28
 8000d68:	6818      	ldr	r0, [r3, #0]
 8000d6a:	88fa      	ldrh	r2, [r7, #6]
 8000d6c:	492d      	ldr	r1, [pc, #180]	@ (8000e24 <KEYPAD_Scan+0x910>)
 8000d6e:	4613      	mov	r3, r2
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	4413      	add	r3, r2
 8000d74:	011b      	lsls	r3, r3, #4
 8000d76:	440b      	add	r3, r1
 8000d78:	332a      	adds	r3, #42	@ 0x2a
 8000d7a:	881b      	ldrh	r3, [r3, #0]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	4619      	mov	r1, r3
 8000d80:	f002 f9f0 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8000d84:	88fa      	ldrh	r2, [r7, #6]
 8000d86:	4927      	ldr	r1, [pc, #156]	@ (8000e24 <KEYPAD_Scan+0x910>)
 8000d88:	4613      	mov	r3, r2
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	4413      	add	r3, r2
 8000d8e:	011b      	lsls	r3, r3, #4
 8000d90:	440b      	add	r3, r1
 8000d92:	3320      	adds	r3, #32
 8000d94:	6818      	ldr	r0, [r3, #0]
 8000d96:	88fa      	ldrh	r2, [r7, #6]
 8000d98:	4922      	ldr	r1, [pc, #136]	@ (8000e24 <KEYPAD_Scan+0x910>)
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	4413      	add	r3, r2
 8000da0:	011b      	lsls	r3, r3, #4
 8000da2:	440b      	add	r3, r1
 8000da4:	332c      	adds	r3, #44	@ 0x2c
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	2200      	movs	r2, #0
 8000daa:	4619      	mov	r1, r3
 8000dac:	f002 f9da 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 1);
 8000db0:	88fa      	ldrh	r2, [r7, #6]
 8000db2:	491c      	ldr	r1, [pc, #112]	@ (8000e24 <KEYPAD_Scan+0x910>)
 8000db4:	4613      	mov	r3, r2
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	4413      	add	r3, r2
 8000dba:	011b      	lsls	r3, r3, #4
 8000dbc:	440b      	add	r3, r1
 8000dbe:	3324      	adds	r3, #36	@ 0x24
 8000dc0:	6818      	ldr	r0, [r3, #0]
 8000dc2:	88fa      	ldrh	r2, [r7, #6]
 8000dc4:	4917      	ldr	r1, [pc, #92]	@ (8000e24 <KEYPAD_Scan+0x910>)
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	4413      	add	r3, r2
 8000dcc:	011b      	lsls	r3, r3, #4
 8000dce:	440b      	add	r3, r1
 8000dd0:	332e      	adds	r3, #46	@ 0x2e
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	f002 f9c4 	bl	8003164 <HAL_GPIO_WritePin>
			/* Read ROW1-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[1], KEYPAD_CfgParam[au16_Instance].ROW_PIN[1]);
 8000ddc:	88fa      	ldrh	r2, [r7, #6]
 8000dde:	4911      	ldr	r1, [pc, #68]	@ (8000e24 <KEYPAD_Scan+0x910>)
 8000de0:	4613      	mov	r3, r2
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	4413      	add	r3, r2
 8000de6:	011b      	lsls	r3, r3, #4
 8000de8:	440b      	add	r3, r1
 8000dea:	3304      	adds	r3, #4
 8000dec:	6818      	ldr	r0, [r3, #0]
 8000dee:	88fa      	ldrh	r2, [r7, #6]
 8000df0:	490c      	ldr	r1, [pc, #48]	@ (8000e24 <KEYPAD_Scan+0x910>)
 8000df2:	4613      	mov	r3, r2
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	4413      	add	r3, r2
 8000df8:	011b      	lsls	r3, r3, #4
 8000dfa:	440b      	add	r3, r1
 8000dfc:	3312      	adds	r3, #18
 8000dfe:	881b      	ldrh	r3, [r3, #0]
 8000e00:	4619      	mov	r1, r3
 8000e02:	f002 f997 	bl	8003134 <HAL_GPIO_ReadPin>
 8000e06:	4603      	mov	r3, r0
 8000e08:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8000e0a:	7bbb      	ldrb	r3, [r7, #14]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d027      	beq.n	8000e60 <KEYPAD_Scan+0x94c>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[7] = 1;
 8000e10:	88fb      	ldrh	r3, [r7, #6]
 8000e12:	4a03      	ldr	r2, [pc, #12]	@ (8000e20 <KEYPAD_Scan+0x90c>)
 8000e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e18:	3307      	adds	r3, #7
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	701a      	strb	r2, [r3, #0]
 8000e1e:	e01f      	b.n	8000e60 <KEYPAD_Scan+0x94c>
 8000e20:	20000068 	.word	0x20000068
 8000e24:	08005f10 	.word	0x08005f10
			}
		}
		else
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[4] = 0;
 8000e28:	88fb      	ldrh	r3, [r7, #6]
 8000e2a:	4a8d      	ldr	r2, [pc, #564]	@ (8001060 <KEYPAD_Scan+0xb4c>)
 8000e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e30:	3304      	adds	r3, #4
 8000e32:	2200      	movs	r2, #0
 8000e34:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[5] = 0;
 8000e36:	88fb      	ldrh	r3, [r7, #6]
 8000e38:	4a89      	ldr	r2, [pc, #548]	@ (8001060 <KEYPAD_Scan+0xb4c>)
 8000e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e3e:	3305      	adds	r3, #5
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[6] = 0;
 8000e44:	88fb      	ldrh	r3, [r7, #6]
 8000e46:	4a86      	ldr	r2, [pc, #536]	@ (8001060 <KEYPAD_Scan+0xb4c>)
 8000e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4c:	3306      	adds	r3, #6
 8000e4e:	2200      	movs	r2, #0
 8000e50:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[7] = 0;
 8000e52:	88fb      	ldrh	r3, [r7, #6]
 8000e54:	4a82      	ldr	r2, [pc, #520]	@ (8001060 <KEYPAD_Scan+0xb4c>)
 8000e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e5a:	3307      	adds	r3, #7
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
		}
		/*---------------------[END OF 2nd ROW Check ]--------------------*/
		/*--[ Third Row Check ]--*/
		if(au8_ReadState[2])
 8000e60:	7abb      	ldrb	r3, [r7, #10]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f000 8206 	beq.w	8001274 <KEYPAD_Scan+0xd60>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 1);
 8000e68:	88fa      	ldrh	r2, [r7, #6]
 8000e6a:	497e      	ldr	r1, [pc, #504]	@ (8001064 <KEYPAD_Scan+0xb50>)
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	4413      	add	r3, r2
 8000e72:	011b      	lsls	r3, r3, #4
 8000e74:	440b      	add	r3, r1
 8000e76:	3318      	adds	r3, #24
 8000e78:	6818      	ldr	r0, [r3, #0]
 8000e7a:	88fa      	ldrh	r2, [r7, #6]
 8000e7c:	4979      	ldr	r1, [pc, #484]	@ (8001064 <KEYPAD_Scan+0xb50>)
 8000e7e:	4613      	mov	r3, r2
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	4413      	add	r3, r2
 8000e84:	011b      	lsls	r3, r3, #4
 8000e86:	440b      	add	r3, r1
 8000e88:	3328      	adds	r3, #40	@ 0x28
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	4619      	mov	r1, r3
 8000e90:	f002 f968 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8000e94:	88fa      	ldrh	r2, [r7, #6]
 8000e96:	4973      	ldr	r1, [pc, #460]	@ (8001064 <KEYPAD_Scan+0xb50>)
 8000e98:	4613      	mov	r3, r2
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	4413      	add	r3, r2
 8000e9e:	011b      	lsls	r3, r3, #4
 8000ea0:	440b      	add	r3, r1
 8000ea2:	331c      	adds	r3, #28
 8000ea4:	6818      	ldr	r0, [r3, #0]
 8000ea6:	88fa      	ldrh	r2, [r7, #6]
 8000ea8:	496e      	ldr	r1, [pc, #440]	@ (8001064 <KEYPAD_Scan+0xb50>)
 8000eaa:	4613      	mov	r3, r2
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	4413      	add	r3, r2
 8000eb0:	011b      	lsls	r3, r3, #4
 8000eb2:	440b      	add	r3, r1
 8000eb4:	332a      	adds	r3, #42	@ 0x2a
 8000eb6:	881b      	ldrh	r3, [r3, #0]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	4619      	mov	r1, r3
 8000ebc:	f002 f952 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8000ec0:	88fa      	ldrh	r2, [r7, #6]
 8000ec2:	4968      	ldr	r1, [pc, #416]	@ (8001064 <KEYPAD_Scan+0xb50>)
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	4413      	add	r3, r2
 8000eca:	011b      	lsls	r3, r3, #4
 8000ecc:	440b      	add	r3, r1
 8000ece:	3320      	adds	r3, #32
 8000ed0:	6818      	ldr	r0, [r3, #0]
 8000ed2:	88fa      	ldrh	r2, [r7, #6]
 8000ed4:	4963      	ldr	r1, [pc, #396]	@ (8001064 <KEYPAD_Scan+0xb50>)
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	4413      	add	r3, r2
 8000edc:	011b      	lsls	r3, r3, #4
 8000ede:	440b      	add	r3, r1
 8000ee0:	332c      	adds	r3, #44	@ 0x2c
 8000ee2:	881b      	ldrh	r3, [r3, #0]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	f002 f93c 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8000eec:	88fa      	ldrh	r2, [r7, #6]
 8000eee:	495d      	ldr	r1, [pc, #372]	@ (8001064 <KEYPAD_Scan+0xb50>)
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	4413      	add	r3, r2
 8000ef6:	011b      	lsls	r3, r3, #4
 8000ef8:	440b      	add	r3, r1
 8000efa:	3324      	adds	r3, #36	@ 0x24
 8000efc:	6818      	ldr	r0, [r3, #0]
 8000efe:	88fa      	ldrh	r2, [r7, #6]
 8000f00:	4958      	ldr	r1, [pc, #352]	@ (8001064 <KEYPAD_Scan+0xb50>)
 8000f02:	4613      	mov	r3, r2
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	4413      	add	r3, r2
 8000f08:	011b      	lsls	r3, r3, #4
 8000f0a:	440b      	add	r3, r1
 8000f0c:	332e      	adds	r3, #46	@ 0x2e
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	2200      	movs	r2, #0
 8000f12:	4619      	mov	r1, r3
 8000f14:	f002 f926 	bl	8003164 <HAL_GPIO_WritePin>
			/* Read ROW2-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[2], KEYPAD_CfgParam[au16_Instance].ROW_PIN[2]);
 8000f18:	88fa      	ldrh	r2, [r7, #6]
 8000f1a:	4952      	ldr	r1, [pc, #328]	@ (8001064 <KEYPAD_Scan+0xb50>)
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	4413      	add	r3, r2
 8000f22:	011b      	lsls	r3, r3, #4
 8000f24:	440b      	add	r3, r1
 8000f26:	3308      	adds	r3, #8
 8000f28:	6818      	ldr	r0, [r3, #0]
 8000f2a:	88fa      	ldrh	r2, [r7, #6]
 8000f2c:	494d      	ldr	r1, [pc, #308]	@ (8001064 <KEYPAD_Scan+0xb50>)
 8000f2e:	4613      	mov	r3, r2
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	4413      	add	r3, r2
 8000f34:	011b      	lsls	r3, r3, #4
 8000f36:	440b      	add	r3, r1
 8000f38:	3314      	adds	r3, #20
 8000f3a:	881b      	ldrh	r3, [r3, #0]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f002 f8f9 	bl	8003134 <HAL_GPIO_ReadPin>
 8000f42:	4603      	mov	r3, r0
 8000f44:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8000f46:	7bbb      	ldrb	r3, [r7, #14]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d007      	beq.n	8000f5c <KEYPAD_Scan+0xa48>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[8] = 1;
 8000f4c:	88fb      	ldrh	r3, [r7, #6]
 8000f4e:	4a44      	ldr	r2, [pc, #272]	@ (8001060 <KEYPAD_Scan+0xb4c>)
 8000f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f54:	3308      	adds	r3, #8
 8000f56:	2201      	movs	r2, #1
 8000f58:	701a      	strb	r2, [r3, #0]
 8000f5a:	e006      	b.n	8000f6a <KEYPAD_Scan+0xa56>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[8] = 0;
 8000f5c:	88fb      	ldrh	r3, [r7, #6]
 8000f5e:	4a40      	ldr	r2, [pc, #256]	@ (8001060 <KEYPAD_Scan+0xb4c>)
 8000f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f64:	3308      	adds	r3, #8
 8000f66:	2200      	movs	r2, #0
 8000f68:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8000f6a:	88fa      	ldrh	r2, [r7, #6]
 8000f6c:	493d      	ldr	r1, [pc, #244]	@ (8001064 <KEYPAD_Scan+0xb50>)
 8000f6e:	4613      	mov	r3, r2
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	4413      	add	r3, r2
 8000f74:	011b      	lsls	r3, r3, #4
 8000f76:	440b      	add	r3, r1
 8000f78:	3318      	adds	r3, #24
 8000f7a:	6818      	ldr	r0, [r3, #0]
 8000f7c:	88fa      	ldrh	r2, [r7, #6]
 8000f7e:	4939      	ldr	r1, [pc, #228]	@ (8001064 <KEYPAD_Scan+0xb50>)
 8000f80:	4613      	mov	r3, r2
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	4413      	add	r3, r2
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	440b      	add	r3, r1
 8000f8a:	3328      	adds	r3, #40	@ 0x28
 8000f8c:	881b      	ldrh	r3, [r3, #0]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	4619      	mov	r1, r3
 8000f92:	f002 f8e7 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 1);
 8000f96:	88fa      	ldrh	r2, [r7, #6]
 8000f98:	4932      	ldr	r1, [pc, #200]	@ (8001064 <KEYPAD_Scan+0xb50>)
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	4413      	add	r3, r2
 8000fa0:	011b      	lsls	r3, r3, #4
 8000fa2:	440b      	add	r3, r1
 8000fa4:	331c      	adds	r3, #28
 8000fa6:	6818      	ldr	r0, [r3, #0]
 8000fa8:	88fa      	ldrh	r2, [r7, #6]
 8000faa:	492e      	ldr	r1, [pc, #184]	@ (8001064 <KEYPAD_Scan+0xb50>)
 8000fac:	4613      	mov	r3, r2
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	4413      	add	r3, r2
 8000fb2:	011b      	lsls	r3, r3, #4
 8000fb4:	440b      	add	r3, r1
 8000fb6:	332a      	adds	r3, #42	@ 0x2a
 8000fb8:	881b      	ldrh	r3, [r3, #0]
 8000fba:	2201      	movs	r2, #1
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f002 f8d1 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8000fc2:	88fa      	ldrh	r2, [r7, #6]
 8000fc4:	4927      	ldr	r1, [pc, #156]	@ (8001064 <KEYPAD_Scan+0xb50>)
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	4413      	add	r3, r2
 8000fcc:	011b      	lsls	r3, r3, #4
 8000fce:	440b      	add	r3, r1
 8000fd0:	3320      	adds	r3, #32
 8000fd2:	6818      	ldr	r0, [r3, #0]
 8000fd4:	88fa      	ldrh	r2, [r7, #6]
 8000fd6:	4923      	ldr	r1, [pc, #140]	@ (8001064 <KEYPAD_Scan+0xb50>)
 8000fd8:	4613      	mov	r3, r2
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	4413      	add	r3, r2
 8000fde:	011b      	lsls	r3, r3, #4
 8000fe0:	440b      	add	r3, r1
 8000fe2:	332c      	adds	r3, #44	@ 0x2c
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f002 f8bb 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8000fee:	88fa      	ldrh	r2, [r7, #6]
 8000ff0:	491c      	ldr	r1, [pc, #112]	@ (8001064 <KEYPAD_Scan+0xb50>)
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	4413      	add	r3, r2
 8000ff8:	011b      	lsls	r3, r3, #4
 8000ffa:	440b      	add	r3, r1
 8000ffc:	3324      	adds	r3, #36	@ 0x24
 8000ffe:	6818      	ldr	r0, [r3, #0]
 8001000:	88fa      	ldrh	r2, [r7, #6]
 8001002:	4918      	ldr	r1, [pc, #96]	@ (8001064 <KEYPAD_Scan+0xb50>)
 8001004:	4613      	mov	r3, r2
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	4413      	add	r3, r2
 800100a:	011b      	lsls	r3, r3, #4
 800100c:	440b      	add	r3, r1
 800100e:	332e      	adds	r3, #46	@ 0x2e
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	2200      	movs	r2, #0
 8001014:	4619      	mov	r1, r3
 8001016:	f002 f8a5 	bl	8003164 <HAL_GPIO_WritePin>
			/* Read ROW2-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[2], KEYPAD_CfgParam[au16_Instance].ROW_PIN[2]);
 800101a:	88fa      	ldrh	r2, [r7, #6]
 800101c:	4911      	ldr	r1, [pc, #68]	@ (8001064 <KEYPAD_Scan+0xb50>)
 800101e:	4613      	mov	r3, r2
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	011b      	lsls	r3, r3, #4
 8001026:	440b      	add	r3, r1
 8001028:	3308      	adds	r3, #8
 800102a:	6818      	ldr	r0, [r3, #0]
 800102c:	88fa      	ldrh	r2, [r7, #6]
 800102e:	490d      	ldr	r1, [pc, #52]	@ (8001064 <KEYPAD_Scan+0xb50>)
 8001030:	4613      	mov	r3, r2
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	4413      	add	r3, r2
 8001036:	011b      	lsls	r3, r3, #4
 8001038:	440b      	add	r3, r1
 800103a:	3314      	adds	r3, #20
 800103c:	881b      	ldrh	r3, [r3, #0]
 800103e:	4619      	mov	r1, r3
 8001040:	f002 f878 	bl	8003134 <HAL_GPIO_ReadPin>
 8001044:	4603      	mov	r3, r0
 8001046:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001048:	7bbb      	ldrb	r3, [r7, #14]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00c      	beq.n	8001068 <KEYPAD_Scan+0xb54>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[9] = 1;
 800104e:	88fb      	ldrh	r3, [r7, #6]
 8001050:	4a03      	ldr	r2, [pc, #12]	@ (8001060 <KEYPAD_Scan+0xb4c>)
 8001052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001056:	3309      	adds	r3, #9
 8001058:	2201      	movs	r2, #1
 800105a:	701a      	strb	r2, [r3, #0]
 800105c:	e00b      	b.n	8001076 <KEYPAD_Scan+0xb62>
 800105e:	bf00      	nop
 8001060:	20000068 	.word	0x20000068
 8001064:	08005f10 	.word	0x08005f10
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[9] = 0;
 8001068:	88fb      	ldrh	r3, [r7, #6]
 800106a:	4a80      	ldr	r2, [pc, #512]	@ (800126c <KEYPAD_Scan+0xd58>)
 800106c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001070:	3309      	adds	r3, #9
 8001072:	2200      	movs	r2, #0
 8001074:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8001076:	88fa      	ldrh	r2, [r7, #6]
 8001078:	497d      	ldr	r1, [pc, #500]	@ (8001270 <KEYPAD_Scan+0xd5c>)
 800107a:	4613      	mov	r3, r2
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	4413      	add	r3, r2
 8001080:	011b      	lsls	r3, r3, #4
 8001082:	440b      	add	r3, r1
 8001084:	3318      	adds	r3, #24
 8001086:	6818      	ldr	r0, [r3, #0]
 8001088:	88fa      	ldrh	r2, [r7, #6]
 800108a:	4979      	ldr	r1, [pc, #484]	@ (8001270 <KEYPAD_Scan+0xd5c>)
 800108c:	4613      	mov	r3, r2
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	4413      	add	r3, r2
 8001092:	011b      	lsls	r3, r3, #4
 8001094:	440b      	add	r3, r1
 8001096:	3328      	adds	r3, #40	@ 0x28
 8001098:	881b      	ldrh	r3, [r3, #0]
 800109a:	2200      	movs	r2, #0
 800109c:	4619      	mov	r1, r3
 800109e:	f002 f861 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 80010a2:	88fa      	ldrh	r2, [r7, #6]
 80010a4:	4972      	ldr	r1, [pc, #456]	@ (8001270 <KEYPAD_Scan+0xd5c>)
 80010a6:	4613      	mov	r3, r2
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	4413      	add	r3, r2
 80010ac:	011b      	lsls	r3, r3, #4
 80010ae:	440b      	add	r3, r1
 80010b0:	331c      	adds	r3, #28
 80010b2:	6818      	ldr	r0, [r3, #0]
 80010b4:	88fa      	ldrh	r2, [r7, #6]
 80010b6:	496e      	ldr	r1, [pc, #440]	@ (8001270 <KEYPAD_Scan+0xd5c>)
 80010b8:	4613      	mov	r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4413      	add	r3, r2
 80010be:	011b      	lsls	r3, r3, #4
 80010c0:	440b      	add	r3, r1
 80010c2:	332a      	adds	r3, #42	@ 0x2a
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	2200      	movs	r2, #0
 80010c8:	4619      	mov	r1, r3
 80010ca:	f002 f84b 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 1);
 80010ce:	88fa      	ldrh	r2, [r7, #6]
 80010d0:	4967      	ldr	r1, [pc, #412]	@ (8001270 <KEYPAD_Scan+0xd5c>)
 80010d2:	4613      	mov	r3, r2
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	4413      	add	r3, r2
 80010d8:	011b      	lsls	r3, r3, #4
 80010da:	440b      	add	r3, r1
 80010dc:	3320      	adds	r3, #32
 80010de:	6818      	ldr	r0, [r3, #0]
 80010e0:	88fa      	ldrh	r2, [r7, #6]
 80010e2:	4963      	ldr	r1, [pc, #396]	@ (8001270 <KEYPAD_Scan+0xd5c>)
 80010e4:	4613      	mov	r3, r2
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	4413      	add	r3, r2
 80010ea:	011b      	lsls	r3, r3, #4
 80010ec:	440b      	add	r3, r1
 80010ee:	332c      	adds	r3, #44	@ 0x2c
 80010f0:	881b      	ldrh	r3, [r3, #0]
 80010f2:	2201      	movs	r2, #1
 80010f4:	4619      	mov	r1, r3
 80010f6:	f002 f835 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 80010fa:	88fa      	ldrh	r2, [r7, #6]
 80010fc:	495c      	ldr	r1, [pc, #368]	@ (8001270 <KEYPAD_Scan+0xd5c>)
 80010fe:	4613      	mov	r3, r2
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	4413      	add	r3, r2
 8001104:	011b      	lsls	r3, r3, #4
 8001106:	440b      	add	r3, r1
 8001108:	3324      	adds	r3, #36	@ 0x24
 800110a:	6818      	ldr	r0, [r3, #0]
 800110c:	88fa      	ldrh	r2, [r7, #6]
 800110e:	4958      	ldr	r1, [pc, #352]	@ (8001270 <KEYPAD_Scan+0xd5c>)
 8001110:	4613      	mov	r3, r2
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	4413      	add	r3, r2
 8001116:	011b      	lsls	r3, r3, #4
 8001118:	440b      	add	r3, r1
 800111a:	332e      	adds	r3, #46	@ 0x2e
 800111c:	881b      	ldrh	r3, [r3, #0]
 800111e:	2200      	movs	r2, #0
 8001120:	4619      	mov	r1, r3
 8001122:	f002 f81f 	bl	8003164 <HAL_GPIO_WritePin>
			/* Read ROW2-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[2], KEYPAD_CfgParam[au16_Instance].ROW_PIN[2]);
 8001126:	88fa      	ldrh	r2, [r7, #6]
 8001128:	4951      	ldr	r1, [pc, #324]	@ (8001270 <KEYPAD_Scan+0xd5c>)
 800112a:	4613      	mov	r3, r2
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	4413      	add	r3, r2
 8001130:	011b      	lsls	r3, r3, #4
 8001132:	440b      	add	r3, r1
 8001134:	3308      	adds	r3, #8
 8001136:	6818      	ldr	r0, [r3, #0]
 8001138:	88fa      	ldrh	r2, [r7, #6]
 800113a:	494d      	ldr	r1, [pc, #308]	@ (8001270 <KEYPAD_Scan+0xd5c>)
 800113c:	4613      	mov	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	4413      	add	r3, r2
 8001142:	011b      	lsls	r3, r3, #4
 8001144:	440b      	add	r3, r1
 8001146:	3314      	adds	r3, #20
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	4619      	mov	r1, r3
 800114c:	f001 fff2 	bl	8003134 <HAL_GPIO_ReadPin>
 8001150:	4603      	mov	r3, r0
 8001152:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001154:	7bbb      	ldrb	r3, [r7, #14]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d007      	beq.n	800116a <KEYPAD_Scan+0xc56>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[10] = 1;
 800115a:	88fb      	ldrh	r3, [r7, #6]
 800115c:	4a43      	ldr	r2, [pc, #268]	@ (800126c <KEYPAD_Scan+0xd58>)
 800115e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001162:	330a      	adds	r3, #10
 8001164:	2201      	movs	r2, #1
 8001166:	701a      	strb	r2, [r3, #0]
 8001168:	e006      	b.n	8001178 <KEYPAD_Scan+0xc64>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[10] = 0;
 800116a:	88fb      	ldrh	r3, [r7, #6]
 800116c:	4a3f      	ldr	r2, [pc, #252]	@ (800126c <KEYPAD_Scan+0xd58>)
 800116e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001172:	330a      	adds	r3, #10
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8001178:	88fa      	ldrh	r2, [r7, #6]
 800117a:	493d      	ldr	r1, [pc, #244]	@ (8001270 <KEYPAD_Scan+0xd5c>)
 800117c:	4613      	mov	r3, r2
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	4413      	add	r3, r2
 8001182:	011b      	lsls	r3, r3, #4
 8001184:	440b      	add	r3, r1
 8001186:	3318      	adds	r3, #24
 8001188:	6818      	ldr	r0, [r3, #0]
 800118a:	88fa      	ldrh	r2, [r7, #6]
 800118c:	4938      	ldr	r1, [pc, #224]	@ (8001270 <KEYPAD_Scan+0xd5c>)
 800118e:	4613      	mov	r3, r2
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	4413      	add	r3, r2
 8001194:	011b      	lsls	r3, r3, #4
 8001196:	440b      	add	r3, r1
 8001198:	3328      	adds	r3, #40	@ 0x28
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	2200      	movs	r2, #0
 800119e:	4619      	mov	r1, r3
 80011a0:	f001 ffe0 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 80011a4:	88fa      	ldrh	r2, [r7, #6]
 80011a6:	4932      	ldr	r1, [pc, #200]	@ (8001270 <KEYPAD_Scan+0xd5c>)
 80011a8:	4613      	mov	r3, r2
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	4413      	add	r3, r2
 80011ae:	011b      	lsls	r3, r3, #4
 80011b0:	440b      	add	r3, r1
 80011b2:	331c      	adds	r3, #28
 80011b4:	6818      	ldr	r0, [r3, #0]
 80011b6:	88fa      	ldrh	r2, [r7, #6]
 80011b8:	492d      	ldr	r1, [pc, #180]	@ (8001270 <KEYPAD_Scan+0xd5c>)
 80011ba:	4613      	mov	r3, r2
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	4413      	add	r3, r2
 80011c0:	011b      	lsls	r3, r3, #4
 80011c2:	440b      	add	r3, r1
 80011c4:	332a      	adds	r3, #42	@ 0x2a
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	2200      	movs	r2, #0
 80011ca:	4619      	mov	r1, r3
 80011cc:	f001 ffca 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 80011d0:	88fa      	ldrh	r2, [r7, #6]
 80011d2:	4927      	ldr	r1, [pc, #156]	@ (8001270 <KEYPAD_Scan+0xd5c>)
 80011d4:	4613      	mov	r3, r2
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	4413      	add	r3, r2
 80011da:	011b      	lsls	r3, r3, #4
 80011dc:	440b      	add	r3, r1
 80011de:	3320      	adds	r3, #32
 80011e0:	6818      	ldr	r0, [r3, #0]
 80011e2:	88fa      	ldrh	r2, [r7, #6]
 80011e4:	4922      	ldr	r1, [pc, #136]	@ (8001270 <KEYPAD_Scan+0xd5c>)
 80011e6:	4613      	mov	r3, r2
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	4413      	add	r3, r2
 80011ec:	011b      	lsls	r3, r3, #4
 80011ee:	440b      	add	r3, r1
 80011f0:	332c      	adds	r3, #44	@ 0x2c
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	2200      	movs	r2, #0
 80011f6:	4619      	mov	r1, r3
 80011f8:	f001 ffb4 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 1);
 80011fc:	88fa      	ldrh	r2, [r7, #6]
 80011fe:	491c      	ldr	r1, [pc, #112]	@ (8001270 <KEYPAD_Scan+0xd5c>)
 8001200:	4613      	mov	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	011b      	lsls	r3, r3, #4
 8001208:	440b      	add	r3, r1
 800120a:	3324      	adds	r3, #36	@ 0x24
 800120c:	6818      	ldr	r0, [r3, #0]
 800120e:	88fa      	ldrh	r2, [r7, #6]
 8001210:	4917      	ldr	r1, [pc, #92]	@ (8001270 <KEYPAD_Scan+0xd5c>)
 8001212:	4613      	mov	r3, r2
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	4413      	add	r3, r2
 8001218:	011b      	lsls	r3, r3, #4
 800121a:	440b      	add	r3, r1
 800121c:	332e      	adds	r3, #46	@ 0x2e
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	2201      	movs	r2, #1
 8001222:	4619      	mov	r1, r3
 8001224:	f001 ff9e 	bl	8003164 <HAL_GPIO_WritePin>
			/* Read ROW2-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[2], KEYPAD_CfgParam[au16_Instance].ROW_PIN[2]);
 8001228:	88fa      	ldrh	r2, [r7, #6]
 800122a:	4911      	ldr	r1, [pc, #68]	@ (8001270 <KEYPAD_Scan+0xd5c>)
 800122c:	4613      	mov	r3, r2
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	4413      	add	r3, r2
 8001232:	011b      	lsls	r3, r3, #4
 8001234:	440b      	add	r3, r1
 8001236:	3308      	adds	r3, #8
 8001238:	6818      	ldr	r0, [r3, #0]
 800123a:	88fa      	ldrh	r2, [r7, #6]
 800123c:	490c      	ldr	r1, [pc, #48]	@ (8001270 <KEYPAD_Scan+0xd5c>)
 800123e:	4613      	mov	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	011b      	lsls	r3, r3, #4
 8001246:	440b      	add	r3, r1
 8001248:	3314      	adds	r3, #20
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	4619      	mov	r1, r3
 800124e:	f001 ff71 	bl	8003134 <HAL_GPIO_ReadPin>
 8001252:	4603      	mov	r3, r0
 8001254:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001256:	7bbb      	ldrb	r3, [r7, #14]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d027      	beq.n	80012ac <KEYPAD_Scan+0xd98>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[11] = 1;
 800125c:	88fb      	ldrh	r3, [r7, #6]
 800125e:	4a03      	ldr	r2, [pc, #12]	@ (800126c <KEYPAD_Scan+0xd58>)
 8001260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001264:	330b      	adds	r3, #11
 8001266:	2201      	movs	r2, #1
 8001268:	701a      	strb	r2, [r3, #0]
 800126a:	e01f      	b.n	80012ac <KEYPAD_Scan+0xd98>
 800126c:	20000068 	.word	0x20000068
 8001270:	08005f10 	.word	0x08005f10
			}
		}
		else
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[8] = 0;
 8001274:	88fb      	ldrh	r3, [r7, #6]
 8001276:	4a8d      	ldr	r2, [pc, #564]	@ (80014ac <KEYPAD_Scan+0xf98>)
 8001278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127c:	3308      	adds	r3, #8
 800127e:	2200      	movs	r2, #0
 8001280:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[9] = 0;
 8001282:	88fb      	ldrh	r3, [r7, #6]
 8001284:	4a89      	ldr	r2, [pc, #548]	@ (80014ac <KEYPAD_Scan+0xf98>)
 8001286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800128a:	3309      	adds	r3, #9
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[10] = 0;
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	4a86      	ldr	r2, [pc, #536]	@ (80014ac <KEYPAD_Scan+0xf98>)
 8001294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001298:	330a      	adds	r3, #10
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[11] = 0;
 800129e:	88fb      	ldrh	r3, [r7, #6]
 80012a0:	4a82      	ldr	r2, [pc, #520]	@ (80014ac <KEYPAD_Scan+0xf98>)
 80012a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a6:	330b      	adds	r3, #11
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]
		}
		/*---------------------[END OF 3rd ROW Check ]--------------------*/
		/*--[ Fourth Row Check ]--*/
		if(au8_ReadState[3])
 80012ac:	7afb      	ldrb	r3, [r7, #11]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 8202 	beq.w	80016b8 <KEYPAD_Scan+0x11a4>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 1);
 80012b4:	88fa      	ldrh	r2, [r7, #6]
 80012b6:	497e      	ldr	r1, [pc, #504]	@ (80014b0 <KEYPAD_Scan+0xf9c>)
 80012b8:	4613      	mov	r3, r2
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	4413      	add	r3, r2
 80012be:	011b      	lsls	r3, r3, #4
 80012c0:	440b      	add	r3, r1
 80012c2:	3318      	adds	r3, #24
 80012c4:	6818      	ldr	r0, [r3, #0]
 80012c6:	88fa      	ldrh	r2, [r7, #6]
 80012c8:	4979      	ldr	r1, [pc, #484]	@ (80014b0 <KEYPAD_Scan+0xf9c>)
 80012ca:	4613      	mov	r3, r2
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	4413      	add	r3, r2
 80012d0:	011b      	lsls	r3, r3, #4
 80012d2:	440b      	add	r3, r1
 80012d4:	3328      	adds	r3, #40	@ 0x28
 80012d6:	881b      	ldrh	r3, [r3, #0]
 80012d8:	2201      	movs	r2, #1
 80012da:	4619      	mov	r1, r3
 80012dc:	f001 ff42 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 80012e0:	88fa      	ldrh	r2, [r7, #6]
 80012e2:	4973      	ldr	r1, [pc, #460]	@ (80014b0 <KEYPAD_Scan+0xf9c>)
 80012e4:	4613      	mov	r3, r2
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	4413      	add	r3, r2
 80012ea:	011b      	lsls	r3, r3, #4
 80012ec:	440b      	add	r3, r1
 80012ee:	331c      	adds	r3, #28
 80012f0:	6818      	ldr	r0, [r3, #0]
 80012f2:	88fa      	ldrh	r2, [r7, #6]
 80012f4:	496e      	ldr	r1, [pc, #440]	@ (80014b0 <KEYPAD_Scan+0xf9c>)
 80012f6:	4613      	mov	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	4413      	add	r3, r2
 80012fc:	011b      	lsls	r3, r3, #4
 80012fe:	440b      	add	r3, r1
 8001300:	332a      	adds	r3, #42	@ 0x2a
 8001302:	881b      	ldrh	r3, [r3, #0]
 8001304:	2200      	movs	r2, #0
 8001306:	4619      	mov	r1, r3
 8001308:	f001 ff2c 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 800130c:	88fa      	ldrh	r2, [r7, #6]
 800130e:	4968      	ldr	r1, [pc, #416]	@ (80014b0 <KEYPAD_Scan+0xf9c>)
 8001310:	4613      	mov	r3, r2
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	4413      	add	r3, r2
 8001316:	011b      	lsls	r3, r3, #4
 8001318:	440b      	add	r3, r1
 800131a:	3320      	adds	r3, #32
 800131c:	6818      	ldr	r0, [r3, #0]
 800131e:	88fa      	ldrh	r2, [r7, #6]
 8001320:	4963      	ldr	r1, [pc, #396]	@ (80014b0 <KEYPAD_Scan+0xf9c>)
 8001322:	4613      	mov	r3, r2
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	4413      	add	r3, r2
 8001328:	011b      	lsls	r3, r3, #4
 800132a:	440b      	add	r3, r1
 800132c:	332c      	adds	r3, #44	@ 0x2c
 800132e:	881b      	ldrh	r3, [r3, #0]
 8001330:	2200      	movs	r2, #0
 8001332:	4619      	mov	r1, r3
 8001334:	f001 ff16 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8001338:	88fa      	ldrh	r2, [r7, #6]
 800133a:	495d      	ldr	r1, [pc, #372]	@ (80014b0 <KEYPAD_Scan+0xf9c>)
 800133c:	4613      	mov	r3, r2
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	4413      	add	r3, r2
 8001342:	011b      	lsls	r3, r3, #4
 8001344:	440b      	add	r3, r1
 8001346:	3324      	adds	r3, #36	@ 0x24
 8001348:	6818      	ldr	r0, [r3, #0]
 800134a:	88fa      	ldrh	r2, [r7, #6]
 800134c:	4958      	ldr	r1, [pc, #352]	@ (80014b0 <KEYPAD_Scan+0xf9c>)
 800134e:	4613      	mov	r3, r2
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	4413      	add	r3, r2
 8001354:	011b      	lsls	r3, r3, #4
 8001356:	440b      	add	r3, r1
 8001358:	332e      	adds	r3, #46	@ 0x2e
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	2200      	movs	r2, #0
 800135e:	4619      	mov	r1, r3
 8001360:	f001 ff00 	bl	8003164 <HAL_GPIO_WritePin>
			/* Read ROW3-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[3], KEYPAD_CfgParam[au16_Instance].ROW_PIN[3]);
 8001364:	88fa      	ldrh	r2, [r7, #6]
 8001366:	4952      	ldr	r1, [pc, #328]	@ (80014b0 <KEYPAD_Scan+0xf9c>)
 8001368:	4613      	mov	r3, r2
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	4413      	add	r3, r2
 800136e:	011b      	lsls	r3, r3, #4
 8001370:	440b      	add	r3, r1
 8001372:	330c      	adds	r3, #12
 8001374:	6818      	ldr	r0, [r3, #0]
 8001376:	88fa      	ldrh	r2, [r7, #6]
 8001378:	494d      	ldr	r1, [pc, #308]	@ (80014b0 <KEYPAD_Scan+0xf9c>)
 800137a:	4613      	mov	r3, r2
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	4413      	add	r3, r2
 8001380:	011b      	lsls	r3, r3, #4
 8001382:	440b      	add	r3, r1
 8001384:	3316      	adds	r3, #22
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	4619      	mov	r1, r3
 800138a:	f001 fed3 	bl	8003134 <HAL_GPIO_ReadPin>
 800138e:	4603      	mov	r3, r0
 8001390:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001392:	7bbb      	ldrb	r3, [r7, #14]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d007      	beq.n	80013a8 <KEYPAD_Scan+0xe94>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[12] = 1;
 8001398:	88fb      	ldrh	r3, [r7, #6]
 800139a:	4a44      	ldr	r2, [pc, #272]	@ (80014ac <KEYPAD_Scan+0xf98>)
 800139c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a0:	330c      	adds	r3, #12
 80013a2:	2201      	movs	r2, #1
 80013a4:	701a      	strb	r2, [r3, #0]
 80013a6:	e006      	b.n	80013b6 <KEYPAD_Scan+0xea2>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[12] = 0;
 80013a8:	88fb      	ldrh	r3, [r7, #6]
 80013aa:	4a40      	ldr	r2, [pc, #256]	@ (80014ac <KEYPAD_Scan+0xf98>)
 80013ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b0:	330c      	adds	r3, #12
 80013b2:	2200      	movs	r2, #0
 80013b4:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 80013b6:	88fa      	ldrh	r2, [r7, #6]
 80013b8:	493d      	ldr	r1, [pc, #244]	@ (80014b0 <KEYPAD_Scan+0xf9c>)
 80013ba:	4613      	mov	r3, r2
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	4413      	add	r3, r2
 80013c0:	011b      	lsls	r3, r3, #4
 80013c2:	440b      	add	r3, r1
 80013c4:	3318      	adds	r3, #24
 80013c6:	6818      	ldr	r0, [r3, #0]
 80013c8:	88fa      	ldrh	r2, [r7, #6]
 80013ca:	4939      	ldr	r1, [pc, #228]	@ (80014b0 <KEYPAD_Scan+0xf9c>)
 80013cc:	4613      	mov	r3, r2
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	4413      	add	r3, r2
 80013d2:	011b      	lsls	r3, r3, #4
 80013d4:	440b      	add	r3, r1
 80013d6:	3328      	adds	r3, #40	@ 0x28
 80013d8:	881b      	ldrh	r3, [r3, #0]
 80013da:	2200      	movs	r2, #0
 80013dc:	4619      	mov	r1, r3
 80013de:	f001 fec1 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 1);
 80013e2:	88fa      	ldrh	r2, [r7, #6]
 80013e4:	4932      	ldr	r1, [pc, #200]	@ (80014b0 <KEYPAD_Scan+0xf9c>)
 80013e6:	4613      	mov	r3, r2
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	4413      	add	r3, r2
 80013ec:	011b      	lsls	r3, r3, #4
 80013ee:	440b      	add	r3, r1
 80013f0:	331c      	adds	r3, #28
 80013f2:	6818      	ldr	r0, [r3, #0]
 80013f4:	88fa      	ldrh	r2, [r7, #6]
 80013f6:	492e      	ldr	r1, [pc, #184]	@ (80014b0 <KEYPAD_Scan+0xf9c>)
 80013f8:	4613      	mov	r3, r2
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	4413      	add	r3, r2
 80013fe:	011b      	lsls	r3, r3, #4
 8001400:	440b      	add	r3, r1
 8001402:	332a      	adds	r3, #42	@ 0x2a
 8001404:	881b      	ldrh	r3, [r3, #0]
 8001406:	2201      	movs	r2, #1
 8001408:	4619      	mov	r1, r3
 800140a:	f001 feab 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 800140e:	88fa      	ldrh	r2, [r7, #6]
 8001410:	4927      	ldr	r1, [pc, #156]	@ (80014b0 <KEYPAD_Scan+0xf9c>)
 8001412:	4613      	mov	r3, r2
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	4413      	add	r3, r2
 8001418:	011b      	lsls	r3, r3, #4
 800141a:	440b      	add	r3, r1
 800141c:	3320      	adds	r3, #32
 800141e:	6818      	ldr	r0, [r3, #0]
 8001420:	88fa      	ldrh	r2, [r7, #6]
 8001422:	4923      	ldr	r1, [pc, #140]	@ (80014b0 <KEYPAD_Scan+0xf9c>)
 8001424:	4613      	mov	r3, r2
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	4413      	add	r3, r2
 800142a:	011b      	lsls	r3, r3, #4
 800142c:	440b      	add	r3, r1
 800142e:	332c      	adds	r3, #44	@ 0x2c
 8001430:	881b      	ldrh	r3, [r3, #0]
 8001432:	2200      	movs	r2, #0
 8001434:	4619      	mov	r1, r3
 8001436:	f001 fe95 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 800143a:	88fa      	ldrh	r2, [r7, #6]
 800143c:	491c      	ldr	r1, [pc, #112]	@ (80014b0 <KEYPAD_Scan+0xf9c>)
 800143e:	4613      	mov	r3, r2
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	4413      	add	r3, r2
 8001444:	011b      	lsls	r3, r3, #4
 8001446:	440b      	add	r3, r1
 8001448:	3324      	adds	r3, #36	@ 0x24
 800144a:	6818      	ldr	r0, [r3, #0]
 800144c:	88fa      	ldrh	r2, [r7, #6]
 800144e:	4918      	ldr	r1, [pc, #96]	@ (80014b0 <KEYPAD_Scan+0xf9c>)
 8001450:	4613      	mov	r3, r2
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	4413      	add	r3, r2
 8001456:	011b      	lsls	r3, r3, #4
 8001458:	440b      	add	r3, r1
 800145a:	332e      	adds	r3, #46	@ 0x2e
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	2200      	movs	r2, #0
 8001460:	4619      	mov	r1, r3
 8001462:	f001 fe7f 	bl	8003164 <HAL_GPIO_WritePin>
			/* Read ROW3-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[3], KEYPAD_CfgParam[au16_Instance].ROW_PIN[3]);
 8001466:	88fa      	ldrh	r2, [r7, #6]
 8001468:	4911      	ldr	r1, [pc, #68]	@ (80014b0 <KEYPAD_Scan+0xf9c>)
 800146a:	4613      	mov	r3, r2
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	4413      	add	r3, r2
 8001470:	011b      	lsls	r3, r3, #4
 8001472:	440b      	add	r3, r1
 8001474:	330c      	adds	r3, #12
 8001476:	6818      	ldr	r0, [r3, #0]
 8001478:	88fa      	ldrh	r2, [r7, #6]
 800147a:	490d      	ldr	r1, [pc, #52]	@ (80014b0 <KEYPAD_Scan+0xf9c>)
 800147c:	4613      	mov	r3, r2
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	4413      	add	r3, r2
 8001482:	011b      	lsls	r3, r3, #4
 8001484:	440b      	add	r3, r1
 8001486:	3316      	adds	r3, #22
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	4619      	mov	r1, r3
 800148c:	f001 fe52 	bl	8003134 <HAL_GPIO_ReadPin>
 8001490:	4603      	mov	r3, r0
 8001492:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001494:	7bbb      	ldrb	r3, [r7, #14]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d00c      	beq.n	80014b4 <KEYPAD_Scan+0xfa0>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[13] = 1;
 800149a:	88fb      	ldrh	r3, [r7, #6]
 800149c:	4a03      	ldr	r2, [pc, #12]	@ (80014ac <KEYPAD_Scan+0xf98>)
 800149e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a2:	330d      	adds	r3, #13
 80014a4:	2201      	movs	r2, #1
 80014a6:	701a      	strb	r2, [r3, #0]
 80014a8:	e00b      	b.n	80014c2 <KEYPAD_Scan+0xfae>
 80014aa:	bf00      	nop
 80014ac:	20000068 	.word	0x20000068
 80014b0:	08005f10 	.word	0x08005f10
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[13] = 0;
 80014b4:	88fb      	ldrh	r3, [r7, #6]
 80014b6:	4aab      	ldr	r2, [pc, #684]	@ (8001764 <KEYPAD_Scan+0x1250>)
 80014b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014bc:	330d      	adds	r3, #13
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 80014c2:	88fa      	ldrh	r2, [r7, #6]
 80014c4:	49a8      	ldr	r1, [pc, #672]	@ (8001768 <KEYPAD_Scan+0x1254>)
 80014c6:	4613      	mov	r3, r2
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	4413      	add	r3, r2
 80014cc:	011b      	lsls	r3, r3, #4
 80014ce:	440b      	add	r3, r1
 80014d0:	3318      	adds	r3, #24
 80014d2:	6818      	ldr	r0, [r3, #0]
 80014d4:	88fa      	ldrh	r2, [r7, #6]
 80014d6:	49a4      	ldr	r1, [pc, #656]	@ (8001768 <KEYPAD_Scan+0x1254>)
 80014d8:	4613      	mov	r3, r2
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	4413      	add	r3, r2
 80014de:	011b      	lsls	r3, r3, #4
 80014e0:	440b      	add	r3, r1
 80014e2:	3328      	adds	r3, #40	@ 0x28
 80014e4:	881b      	ldrh	r3, [r3, #0]
 80014e6:	2200      	movs	r2, #0
 80014e8:	4619      	mov	r1, r3
 80014ea:	f001 fe3b 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 80014ee:	88fa      	ldrh	r2, [r7, #6]
 80014f0:	499d      	ldr	r1, [pc, #628]	@ (8001768 <KEYPAD_Scan+0x1254>)
 80014f2:	4613      	mov	r3, r2
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	4413      	add	r3, r2
 80014f8:	011b      	lsls	r3, r3, #4
 80014fa:	440b      	add	r3, r1
 80014fc:	331c      	adds	r3, #28
 80014fe:	6818      	ldr	r0, [r3, #0]
 8001500:	88fa      	ldrh	r2, [r7, #6]
 8001502:	4999      	ldr	r1, [pc, #612]	@ (8001768 <KEYPAD_Scan+0x1254>)
 8001504:	4613      	mov	r3, r2
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	4413      	add	r3, r2
 800150a:	011b      	lsls	r3, r3, #4
 800150c:	440b      	add	r3, r1
 800150e:	332a      	adds	r3, #42	@ 0x2a
 8001510:	881b      	ldrh	r3, [r3, #0]
 8001512:	2200      	movs	r2, #0
 8001514:	4619      	mov	r1, r3
 8001516:	f001 fe25 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 1);
 800151a:	88fa      	ldrh	r2, [r7, #6]
 800151c:	4992      	ldr	r1, [pc, #584]	@ (8001768 <KEYPAD_Scan+0x1254>)
 800151e:	4613      	mov	r3, r2
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	4413      	add	r3, r2
 8001524:	011b      	lsls	r3, r3, #4
 8001526:	440b      	add	r3, r1
 8001528:	3320      	adds	r3, #32
 800152a:	6818      	ldr	r0, [r3, #0]
 800152c:	88fa      	ldrh	r2, [r7, #6]
 800152e:	498e      	ldr	r1, [pc, #568]	@ (8001768 <KEYPAD_Scan+0x1254>)
 8001530:	4613      	mov	r3, r2
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	4413      	add	r3, r2
 8001536:	011b      	lsls	r3, r3, #4
 8001538:	440b      	add	r3, r1
 800153a:	332c      	adds	r3, #44	@ 0x2c
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	2201      	movs	r2, #1
 8001540:	4619      	mov	r1, r3
 8001542:	f001 fe0f 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8001546:	88fa      	ldrh	r2, [r7, #6]
 8001548:	4987      	ldr	r1, [pc, #540]	@ (8001768 <KEYPAD_Scan+0x1254>)
 800154a:	4613      	mov	r3, r2
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	4413      	add	r3, r2
 8001550:	011b      	lsls	r3, r3, #4
 8001552:	440b      	add	r3, r1
 8001554:	3324      	adds	r3, #36	@ 0x24
 8001556:	6818      	ldr	r0, [r3, #0]
 8001558:	88fa      	ldrh	r2, [r7, #6]
 800155a:	4983      	ldr	r1, [pc, #524]	@ (8001768 <KEYPAD_Scan+0x1254>)
 800155c:	4613      	mov	r3, r2
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	4413      	add	r3, r2
 8001562:	011b      	lsls	r3, r3, #4
 8001564:	440b      	add	r3, r1
 8001566:	332e      	adds	r3, #46	@ 0x2e
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	2200      	movs	r2, #0
 800156c:	4619      	mov	r1, r3
 800156e:	f001 fdf9 	bl	8003164 <HAL_GPIO_WritePin>
			/* Read ROW3-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[3], KEYPAD_CfgParam[au16_Instance].ROW_PIN[3]);
 8001572:	88fa      	ldrh	r2, [r7, #6]
 8001574:	497c      	ldr	r1, [pc, #496]	@ (8001768 <KEYPAD_Scan+0x1254>)
 8001576:	4613      	mov	r3, r2
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	4413      	add	r3, r2
 800157c:	011b      	lsls	r3, r3, #4
 800157e:	440b      	add	r3, r1
 8001580:	330c      	adds	r3, #12
 8001582:	6818      	ldr	r0, [r3, #0]
 8001584:	88fa      	ldrh	r2, [r7, #6]
 8001586:	4978      	ldr	r1, [pc, #480]	@ (8001768 <KEYPAD_Scan+0x1254>)
 8001588:	4613      	mov	r3, r2
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	4413      	add	r3, r2
 800158e:	011b      	lsls	r3, r3, #4
 8001590:	440b      	add	r3, r1
 8001592:	3316      	adds	r3, #22
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	4619      	mov	r1, r3
 8001598:	f001 fdcc 	bl	8003134 <HAL_GPIO_ReadPin>
 800159c:	4603      	mov	r3, r0
 800159e:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80015a0:	7bbb      	ldrb	r3, [r7, #14]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d007      	beq.n	80015b6 <KEYPAD_Scan+0x10a2>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[14] = 1;
 80015a6:	88fb      	ldrh	r3, [r7, #6]
 80015a8:	4a6e      	ldr	r2, [pc, #440]	@ (8001764 <KEYPAD_Scan+0x1250>)
 80015aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ae:	330e      	adds	r3, #14
 80015b0:	2201      	movs	r2, #1
 80015b2:	701a      	strb	r2, [r3, #0]
 80015b4:	e006      	b.n	80015c4 <KEYPAD_Scan+0x10b0>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[14] = 0;
 80015b6:	88fb      	ldrh	r3, [r7, #6]
 80015b8:	4a6a      	ldr	r2, [pc, #424]	@ (8001764 <KEYPAD_Scan+0x1250>)
 80015ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015be:	330e      	adds	r3, #14
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 80015c4:	88fa      	ldrh	r2, [r7, #6]
 80015c6:	4968      	ldr	r1, [pc, #416]	@ (8001768 <KEYPAD_Scan+0x1254>)
 80015c8:	4613      	mov	r3, r2
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	4413      	add	r3, r2
 80015ce:	011b      	lsls	r3, r3, #4
 80015d0:	440b      	add	r3, r1
 80015d2:	3318      	adds	r3, #24
 80015d4:	6818      	ldr	r0, [r3, #0]
 80015d6:	88fa      	ldrh	r2, [r7, #6]
 80015d8:	4963      	ldr	r1, [pc, #396]	@ (8001768 <KEYPAD_Scan+0x1254>)
 80015da:	4613      	mov	r3, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	4413      	add	r3, r2
 80015e0:	011b      	lsls	r3, r3, #4
 80015e2:	440b      	add	r3, r1
 80015e4:	3328      	adds	r3, #40	@ 0x28
 80015e6:	881b      	ldrh	r3, [r3, #0]
 80015e8:	2200      	movs	r2, #0
 80015ea:	4619      	mov	r1, r3
 80015ec:	f001 fdba 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 80015f0:	88fa      	ldrh	r2, [r7, #6]
 80015f2:	495d      	ldr	r1, [pc, #372]	@ (8001768 <KEYPAD_Scan+0x1254>)
 80015f4:	4613      	mov	r3, r2
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	4413      	add	r3, r2
 80015fa:	011b      	lsls	r3, r3, #4
 80015fc:	440b      	add	r3, r1
 80015fe:	331c      	adds	r3, #28
 8001600:	6818      	ldr	r0, [r3, #0]
 8001602:	88fa      	ldrh	r2, [r7, #6]
 8001604:	4958      	ldr	r1, [pc, #352]	@ (8001768 <KEYPAD_Scan+0x1254>)
 8001606:	4613      	mov	r3, r2
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	4413      	add	r3, r2
 800160c:	011b      	lsls	r3, r3, #4
 800160e:	440b      	add	r3, r1
 8001610:	332a      	adds	r3, #42	@ 0x2a
 8001612:	881b      	ldrh	r3, [r3, #0]
 8001614:	2200      	movs	r2, #0
 8001616:	4619      	mov	r1, r3
 8001618:	f001 fda4 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 800161c:	88fa      	ldrh	r2, [r7, #6]
 800161e:	4952      	ldr	r1, [pc, #328]	@ (8001768 <KEYPAD_Scan+0x1254>)
 8001620:	4613      	mov	r3, r2
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	4413      	add	r3, r2
 8001626:	011b      	lsls	r3, r3, #4
 8001628:	440b      	add	r3, r1
 800162a:	3320      	adds	r3, #32
 800162c:	6818      	ldr	r0, [r3, #0]
 800162e:	88fa      	ldrh	r2, [r7, #6]
 8001630:	494d      	ldr	r1, [pc, #308]	@ (8001768 <KEYPAD_Scan+0x1254>)
 8001632:	4613      	mov	r3, r2
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	4413      	add	r3, r2
 8001638:	011b      	lsls	r3, r3, #4
 800163a:	440b      	add	r3, r1
 800163c:	332c      	adds	r3, #44	@ 0x2c
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	2200      	movs	r2, #0
 8001642:	4619      	mov	r1, r3
 8001644:	f001 fd8e 	bl	8003164 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 1);
 8001648:	88fa      	ldrh	r2, [r7, #6]
 800164a:	4947      	ldr	r1, [pc, #284]	@ (8001768 <KEYPAD_Scan+0x1254>)
 800164c:	4613      	mov	r3, r2
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	4413      	add	r3, r2
 8001652:	011b      	lsls	r3, r3, #4
 8001654:	440b      	add	r3, r1
 8001656:	3324      	adds	r3, #36	@ 0x24
 8001658:	6818      	ldr	r0, [r3, #0]
 800165a:	88fa      	ldrh	r2, [r7, #6]
 800165c:	4942      	ldr	r1, [pc, #264]	@ (8001768 <KEYPAD_Scan+0x1254>)
 800165e:	4613      	mov	r3, r2
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	4413      	add	r3, r2
 8001664:	011b      	lsls	r3, r3, #4
 8001666:	440b      	add	r3, r1
 8001668:	332e      	adds	r3, #46	@ 0x2e
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	2201      	movs	r2, #1
 800166e:	4619      	mov	r1, r3
 8001670:	f001 fd78 	bl	8003164 <HAL_GPIO_WritePin>
			/* Read ROW3-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[3], KEYPAD_CfgParam[au16_Instance].ROW_PIN[3]);
 8001674:	88fa      	ldrh	r2, [r7, #6]
 8001676:	493c      	ldr	r1, [pc, #240]	@ (8001768 <KEYPAD_Scan+0x1254>)
 8001678:	4613      	mov	r3, r2
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	4413      	add	r3, r2
 800167e:	011b      	lsls	r3, r3, #4
 8001680:	440b      	add	r3, r1
 8001682:	330c      	adds	r3, #12
 8001684:	6818      	ldr	r0, [r3, #0]
 8001686:	88fa      	ldrh	r2, [r7, #6]
 8001688:	4937      	ldr	r1, [pc, #220]	@ (8001768 <KEYPAD_Scan+0x1254>)
 800168a:	4613      	mov	r3, r2
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	4413      	add	r3, r2
 8001690:	011b      	lsls	r3, r3, #4
 8001692:	440b      	add	r3, r1
 8001694:	3316      	adds	r3, #22
 8001696:	881b      	ldrh	r3, [r3, #0]
 8001698:	4619      	mov	r1, r3
 800169a:	f001 fd4b 	bl	8003134 <HAL_GPIO_ReadPin>
 800169e:	4603      	mov	r3, r0
 80016a0:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80016a2:	7bbb      	ldrb	r3, [r7, #14]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d035      	beq.n	8001714 <KEYPAD_Scan+0x1200>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[15] = 1;
 80016a8:	88fb      	ldrh	r3, [r7, #6]
 80016aa:	4a2e      	ldr	r2, [pc, #184]	@ (8001764 <KEYPAD_Scan+0x1250>)
 80016ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b0:	330f      	adds	r3, #15
 80016b2:	2201      	movs	r2, #1
 80016b4:	701a      	strb	r2, [r3, #0]
 80016b6:	e02d      	b.n	8001714 <KEYPAD_Scan+0x1200>
			}
		}
		else
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[12] = 0;
 80016b8:	88fb      	ldrh	r3, [r7, #6]
 80016ba:	4a2a      	ldr	r2, [pc, #168]	@ (8001764 <KEYPAD_Scan+0x1250>)
 80016bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c0:	330c      	adds	r3, #12
 80016c2:	2200      	movs	r2, #0
 80016c4:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[13] = 0;
 80016c6:	88fb      	ldrh	r3, [r7, #6]
 80016c8:	4a26      	ldr	r2, [pc, #152]	@ (8001764 <KEYPAD_Scan+0x1250>)
 80016ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ce:	330d      	adds	r3, #13
 80016d0:	2200      	movs	r2, #0
 80016d2:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[14] = 0;
 80016d4:	88fb      	ldrh	r3, [r7, #6]
 80016d6:	4a23      	ldr	r2, [pc, #140]	@ (8001764 <KEYPAD_Scan+0x1250>)
 80016d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016dc:	330e      	adds	r3, #14
 80016de:	2200      	movs	r2, #0
 80016e0:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[15] = 0;
 80016e2:	88fb      	ldrh	r3, [r7, #6]
 80016e4:	4a1f      	ldr	r2, [pc, #124]	@ (8001764 <KEYPAD_Scan+0x1250>)
 80016e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ea:	330f      	adds	r3, #15
 80016ec:	2200      	movs	r2, #0
 80016ee:	701a      	strb	r2, [r3, #0]
 80016f0:	e010      	b.n	8001714 <KEYPAD_Scan+0x1200>
	}
	/* Else If No Key Is Pressed */
	else
	{
		/* Fill The Keys States With 0s */
		for(i=0; i<KEYS; i++)
 80016f2:	2300      	movs	r3, #0
 80016f4:	73fb      	strb	r3, [r7, #15]
 80016f6:	e00a      	b.n	800170e <KEYPAD_Scan+0x11fa>
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[i] = 0;
 80016f8:	88fb      	ldrh	r3, [r7, #6]
 80016fa:	4a1a      	ldr	r2, [pc, #104]	@ (8001764 <KEYPAD_Scan+0x1250>)
 80016fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001700:	7bfb      	ldrb	r3, [r7, #15]
 8001702:	4413      	add	r3, r2
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]
		for(i=0; i<KEYS; i++)
 8001708:	7bfb      	ldrb	r3, [r7, #15]
 800170a:	3301      	adds	r3, #1
 800170c:	73fb      	strb	r3, [r7, #15]
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	2b0f      	cmp	r3, #15
 8001712:	d9f1      	bls.n	80016f8 <KEYPAD_Scan+0x11e4>
		}
	}
	/* Back To Steady State: Output The Pattern [1 1 1 1] To The COL Pins */
	for(i=0; i<COLS; i++)
 8001714:	2300      	movs	r3, #0
 8001716:	73fb      	strb	r3, [r7, #15]
 8001718:	e01c      	b.n	8001754 <KEYPAD_Scan+0x1240>
	{
		HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i], KEYPAD_CfgParam[au16_Instance].COL_PIN[i], 1);
 800171a:	88fa      	ldrh	r2, [r7, #6]
 800171c:	7bf9      	ldrb	r1, [r7, #15]
 800171e:	4812      	ldr	r0, [pc, #72]	@ (8001768 <KEYPAD_Scan+0x1254>)
 8001720:	4613      	mov	r3, r2
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	4413      	add	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	3306      	adds	r3, #6
 800172c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8001730:	88fa      	ldrh	r2, [r7, #6]
 8001732:	7bf9      	ldrb	r1, [r7, #15]
 8001734:	4c0c      	ldr	r4, [pc, #48]	@ (8001768 <KEYPAD_Scan+0x1254>)
 8001736:	4613      	mov	r3, r2
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	4413      	add	r3, r2
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	440b      	add	r3, r1
 8001740:	3314      	adds	r3, #20
 8001742:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8001746:	2201      	movs	r2, #1
 8001748:	4619      	mov	r1, r3
 800174a:	f001 fd0b 	bl	8003164 <HAL_GPIO_WritePin>
	for(i=0; i<COLS; i++)
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	3301      	adds	r3, #1
 8001752:	73fb      	strb	r3, [r7, #15]
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	2b03      	cmp	r3, #3
 8001758:	d9df      	bls.n	800171a <KEYPAD_Scan+0x1206>
	}
}
 800175a:	bf00      	nop
 800175c:	bf00      	nop
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	bd90      	pop	{r4, r7, pc}
 8001764:	20000068 	.word	0x20000068
 8001768:	08005f10 	.word	0x08005f10

0800176c <SendFPHeader>:

extern uint8_t IDFromFinger;
extern uint8_t CurrentNumberFinger;

void SendFPHeader()
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart5,FPHeader,6,1000);
 8001770:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001774:	2206      	movs	r2, #6
 8001776:	4903      	ldr	r1, [pc, #12]	@ (8001784 <SendFPHeader+0x18>)
 8001778:	4803      	ldr	r0, [pc, #12]	@ (8001788 <SendFPHeader+0x1c>)
 800177a:	f003 fe4f 	bl	800541c <HAL_UART_Transmit>
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000000 	.word	0x20000000
 8001788:	200000c0 	.word	0x200000c0

0800178c <SendFPGetImage>:

void SendFPGetImage()
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
	 HAL_UART_Transmit(&huart5,FPGetImage,6,1000);
 8001790:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001794:	2206      	movs	r2, #6
 8001796:	4903      	ldr	r1, [pc, #12]	@ (80017a4 <SendFPGetImage+0x18>)
 8001798:	4803      	ldr	r0, [pc, #12]	@ (80017a8 <SendFPGetImage+0x1c>)
 800179a:	f003 fe3f 	bl	800541c <HAL_UART_Transmit>
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000008 	.word	0x20000008
 80017a8:	200000c0 	.word	0x200000c0

080017ac <SendFPCreateCharFile1>:

void SendFPCreateCharFile1()
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart5,FPCreateCharFile1,7,1000);
 80017b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017b4:	2207      	movs	r2, #7
 80017b6:	4903      	ldr	r1, [pc, #12]	@ (80017c4 <SendFPCreateCharFile1+0x18>)
 80017b8:	4803      	ldr	r0, [pc, #12]	@ (80017c8 <SendFPCreateCharFile1+0x1c>)
 80017ba:	f003 fe2f 	bl	800541c <HAL_UART_Transmit>
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000010 	.word	0x20000010
 80017c8:	200000c0 	.word	0x200000c0

080017cc <SendFPDSearchFinger>:
{
	HAL_UART_Transmit(&huart5,FPDeleteAllFinger,6,1000);
}

void SendFPDSearchFinger()
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart5,FPSearchFinger,11,1000);
 80017d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017d4:	220b      	movs	r2, #11
 80017d6:	4903      	ldr	r1, [pc, #12]	@ (80017e4 <SendFPDSearchFinger+0x18>)
 80017d8:	4803      	ldr	r0, [pc, #12]	@ (80017e8 <SendFPDSearchFinger+0x1c>)
 80017da:	f003 fe1f 	bl	800541c <HAL_UART_Transmit>
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000018 	.word	0x20000018
 80017e8:	200000c0 	.word	0x200000c0

080017ec <SendFGetNumberOfFinger>:

void SendFGetNumberOfFinger()
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart5,FPGetNumberOfFinger,6,1000);
 80017f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017f4:	2206      	movs	r2, #6
 80017f6:	4903      	ldr	r1, [pc, #12]	@ (8001804 <SendFGetNumberOfFinger+0x18>)
 80017f8:	4803      	ldr	r0, [pc, #12]	@ (8001808 <SendFGetNumberOfFinger+0x1c>)
 80017fa:	f003 fe0f 	bl	800541c <HAL_UART_Transmit>
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000024 	.word	0x20000024
 8001808:	200000c0 	.word	0x200000c0

0800180c <CheckFPRespsone>:



//Legge la risposta dalla UART e la analizza
uint8_t CheckFPRespsone(uint8_t MaxRead)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08c      	sub	sp, #48	@ 0x30
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]
	uint8_t ByteCount=0;
 8001816:	2300      	movs	r3, #0
 8001818:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t FPRXData[20]={0xFF};
 800181c:	23ff      	movs	r3, #255	@ 0xff
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
	uint8_t UARTData[1]={0};
 800182e:	2300      	movs	r3, #0
 8001830:	733b      	strb	r3, [r7, #12]
	uint32_t TimeOut = HAL_GetTick();
 8001832:	f001 f9c3 	bl	8002bbc <HAL_GetTick>
 8001836:	62b8      	str	r0, [r7, #40]	@ 0x28
	uint8_t Result;
	IDFromFinger=0xFF;
 8001838:	4b24      	ldr	r3, [pc, #144]	@ (80018cc <CheckFPRespsone+0xc0>)
 800183a:	22ff      	movs	r2, #255	@ 0xff
 800183c:	701a      	strb	r2, [r3, #0]
	while((HAL_GetTick() - TimeOut < 1000) && ByteCount<MaxRead) // time out is 1000 ms
 800183e:	e016      	b.n	800186e <CheckFPRespsone+0x62>
	{
	    if(HAL_UART_Receive(&huart5, (uint8_t *)UARTData, 1, 1000) == HAL_OK)
 8001840:	f107 010c 	add.w	r1, r7, #12
 8001844:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001848:	2201      	movs	r2, #1
 800184a:	4821      	ldr	r0, [pc, #132]	@ (80018d0 <CheckFPRespsone+0xc4>)
 800184c:	f003 fe6f 	bl	800552e <HAL_UART_Receive>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10b      	bne.n	800186e <CheckFPRespsone+0x62>
			{
				FPRXData[ByteCount] = UARTData[0];
 8001856:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800185a:	7b3a      	ldrb	r2, [r7, #12]
 800185c:	3330      	adds	r3, #48	@ 0x30
 800185e:	443b      	add	r3, r7
 8001860:	f803 2c20 	strb.w	r2, [r3, #-32]
				ByteCount++;
 8001864:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001868:	3301      	adds	r3, #1
 800186a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	while((HAL_GetTick() - TimeOut < 1000) && ByteCount<MaxRead) // time out is 1000 ms
 800186e:	f001 f9a5 	bl	8002bbc <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800187c:	d204      	bcs.n	8001888 <CheckFPRespsone+0x7c>
 800187e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	429a      	cmp	r2, r3
 8001886:	d3db      	bcc.n	8001840 <CheckFPRespsone+0x34>
			}
	}

	if(ByteCount==0)
 8001888:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800188c:	2b00      	cmp	r3, #0
 800188e:	d105      	bne.n	800189c <CheckFPRespsone+0x90>
	{
		//FPRXData[0]=0xEE;
		//FPRXData[1]=0xEE;
		//HAL_UART_Transmit(&huart2,FPRXData,2,1000);
		Result=FP_ERROR;
 8001890:	23fe      	movs	r3, #254	@ 0xfe
 8001892:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		return Result;
 8001896:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800189a:	e012      	b.n	80018c2 <CheckFPRespsone+0xb6>
	}
	else if(ByteCount<MaxRead)
 800189c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d205      	bcs.n	80018b2 <CheckFPRespsone+0xa6>
	{
		Result=FP_ERROR;
 80018a6:	23fe      	movs	r3, #254	@ 0xfe
 80018a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		return Result;
 80018ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80018b0:	e007      	b.n	80018c2 <CheckFPRespsone+0xb6>
	}
	  else // vail data return
	{

		 Result=FPRXData[9];
 80018b2:	7e7b      	ldrb	r3, [r7, #25]
 80018b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		 IDFromFinger=FPRXData[11];
 80018b8:	7efa      	ldrb	r2, [r7, #27]
 80018ba:	4b04      	ldr	r3, [pc, #16]	@ (80018cc <CheckFPRespsone+0xc0>)
 80018bc:	701a      	strb	r2, [r3, #0]
	   //HAL_UART_Transmit(&huart2,FPRXData,MaxRead,1000);
		 return Result;
 80018be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27

	}
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3730      	adds	r7, #48	@ 0x30
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	2000015e 	.word	0x2000015e
 80018d0:	200000c0 	.word	0x200000c0

080018d4 <GetNumberOfFinger>:
//ritorna il numero di impronte memorizzate
uint8_t GetNumberOfFinger()
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
	uint8_t Result;
	SendFPHeader();
 80018da:	f7ff ff47 	bl	800176c <SendFPHeader>
	SendFGetNumberOfFinger();
 80018de:	f7ff ff85 	bl	80017ec <SendFGetNumberOfFinger>
	Result=CheckFPRespsone(14);
 80018e2:	200e      	movs	r0, #14
 80018e4:	f7ff ff92 	bl	800180c <CheckFPRespsone>
 80018e8:	4603      	mov	r3, r0
 80018ea:	71fb      	strb	r3, [r7, #7]
	if(Result!=FP_OK) return 0xFF;
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <GetNumberOfFinger+0x22>
 80018f2:	23ff      	movs	r3, #255	@ 0xff
 80018f4:	e001      	b.n	80018fa <GetNumberOfFinger+0x26>

	return IDFromFinger;
 80018f6:	4b03      	ldr	r3, [pc, #12]	@ (8001904 <GetNumberOfFinger+0x30>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	2000015e 	.word	0x2000015e

08001908 <CheckFinger>:

}

//verifica se un'impronta è presente o meno nel database
uint8_t CheckFinger()
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
	uint8_t Result=FP_NOFINGER;
 800190e:	2302      	movs	r3, #2
 8001910:	71fb      	strb	r3, [r7, #7]
	uint32_t TimeOut = HAL_GetTick();
 8001912:	f001 f953 	bl	8002bbc <HAL_GetTick>
 8001916:	6038      	str	r0, [r7, #0]

	while(Result==FP_NOFINGER&&(HAL_GetTick() - TimeOut <500)) // time out is 500 ms and no button press
 8001918:	e008      	b.n	800192c <CheckFinger+0x24>
	{

		SendFPHeader();
 800191a:	f7ff ff27 	bl	800176c <SendFPHeader>
		SendFPGetImage();
 800191e:	f7ff ff35 	bl	800178c <SendFPGetImage>
		Result=CheckFPRespsone(12);
 8001922:	200c      	movs	r0, #12
 8001924:	f7ff ff72 	bl	800180c <CheckFPRespsone>
 8001928:	4603      	mov	r3, r0
 800192a:	71fb      	strb	r3, [r7, #7]
	while(Result==FP_NOFINGER&&(HAL_GetTick() - TimeOut <500)) // time out is 500 ms and no button press
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	2b02      	cmp	r3, #2
 8001930:	d107      	bne.n	8001942 <CheckFinger+0x3a>
 8001932:	f001 f943 	bl	8002bbc <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001940:	d3eb      	bcc.n	800191a <CheckFinger+0x12>
	}
	if(Result==FP_NOFINGER)
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	2b02      	cmp	r3, #2
 8001946:	d101      	bne.n	800194c <CheckFinger+0x44>
	{

		return FP_NOFINGER;
 8001948:	2302      	movs	r3, #2
 800194a:	e01c      	b.n	8001986 <CheckFinger+0x7e>
	}
	if(Result!=FP_OK) return FP_ERROR;
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <CheckFinger+0x4e>
 8001952:	23fe      	movs	r3, #254	@ 0xfe
 8001954:	e017      	b.n	8001986 <CheckFinger+0x7e>
	// continue if detect finger;
	SendFPHeader();
 8001956:	f7ff ff09 	bl	800176c <SendFPHeader>
	SendFPCreateCharFile1();
 800195a:	f7ff ff27 	bl	80017ac <SendFPCreateCharFile1>
	Result=CheckFPRespsone(12);
 800195e:	200c      	movs	r0, #12
 8001960:	f7ff ff54 	bl	800180c <CheckFPRespsone>
 8001964:	4603      	mov	r3, r0
 8001966:	71fb      	strb	r3, [r7, #7]
	if(Result!=FP_OK) return FP_ERROR;
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <CheckFinger+0x6a>
 800196e:	23fe      	movs	r3, #254	@ 0xfe
 8001970:	e009      	b.n	8001986 <CheckFinger+0x7e>

	// Search Finger
	SendFPHeader();
 8001972:	f7ff fefb 	bl	800176c <SendFPHeader>
	SendFPDSearchFinger();
 8001976:	f7ff ff29 	bl	80017cc <SendFPDSearchFinger>
	Result=CheckFPRespsone(16);
 800197a:	2010      	movs	r0, #16
 800197c:	f7ff ff46 	bl	800180c <CheckFPRespsone>
 8001980:	4603      	mov	r3, r0
 8001982:	71fb      	strb	r3, [r7, #7]
	return Result;
 8001984:	79fb      	ldrb	r3, [r7, #7]


}
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8001996:	f001 f8b7 	bl	8002b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800199a:	f000 f9f5 	bl	8001d88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800199e:	f000 fab9 	bl	8001f14 <MX_GPIO_Init>
  MX_I2C2_Init();
 80019a2:	f000 fa49 	bl	8001e38 <MX_I2C2_Init>
  MX_UART5_Init();
 80019a6:	f000 fa85 	bl	8001eb4 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */


  // inizializzazione KEYPAD
  KEYPAD_Init(0, gu8_KeyStatesArr);
 80019aa:	49c7      	ldr	r1, [pc, #796]	@ (8001cc8 <main+0x338>)
 80019ac:	2000      	movs	r0, #0
 80019ae:	f7fe fc0b 	bl	80001c8 <KEYPAD_Init>

  // inizializzazione buzzer e relay
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, 0);
 80019b2:	2200      	movs	r2, #0
 80019b4:	2140      	movs	r1, #64	@ 0x40
 80019b6:	48c5      	ldr	r0, [pc, #788]	@ (8001ccc <main+0x33c>)
 80019b8:	f001 fbd4 	bl	8003164 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 0);
 80019bc:	2200      	movs	r2, #0
 80019be:	2108      	movs	r1, #8
 80019c0:	48c3      	ldr	r0, [pc, #780]	@ (8001cd0 <main+0x340>)
 80019c2:	f001 fbcf 	bl	8003164 <HAL_GPIO_WritePin>


  // -- DISPLAY CONFIG --
  ssd1306_init();
 80019c6:	f000 fdbe 	bl	8002546 <ssd1306_init>
  //scritta
  ssd1306_write_string(font11x18, "PASSWORD:");
 80019ca:	4bc2      	ldr	r3, [pc, #776]	@ (8001cd4 <main+0x344>)
 80019cc:	4ac2      	ldr	r2, [pc, #776]	@ (8001cd8 <main+0x348>)
 80019ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80019d2:	f000 fef5 	bl	80027c0 <ssd1306_write_string>
  ssd1306_enter();
 80019d6:	f000 ff3b 	bl	8002850 <ssd1306_enter>
  ssd1306_enter();
 80019da:	f000 ff39 	bl	8002850 <ssd1306_enter>
  // show
  ssd1306_update_screen();
 80019de:	f000 fddf 	bl	80025a0 <ssd1306_update_screen>


  CurrentNumberFinger=GetNumberOfFinger();
 80019e2:	f7ff ff77 	bl	80018d4 <GetNumberOfFinger>
 80019e6:	4603      	mov	r3, r0
 80019e8:	461a      	mov	r2, r3
 80019ea:	4bbc      	ldr	r3, [pc, #752]	@ (8001cdc <main+0x34c>)
 80019ec:	701a      	strb	r2, [r3, #0]

    if(CurrentNumberFinger>100)
 80019ee:	4bbb      	ldr	r3, [pc, #748]	@ (8001cdc <main+0x34c>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b64      	cmp	r3, #100	@ 0x64
 80019f4:	d902      	bls.n	80019fc <main+0x6c>
  	{
  		CurrentNumberFinger=1;
 80019f6:	4bb9      	ldr	r3, [pc, #740]	@ (8001cdc <main+0x34c>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */

  while (1)
  {

	  FingerResult=CheckFinger();
 80019fc:	f7ff ff84 	bl	8001908 <CheckFinger>
 8001a00:	4603      	mov	r3, r0
 8001a02:	70fb      	strb	r3, [r7, #3]

	  	if(FingerResult==FP_OK)
 8001a04:	78fb      	ldrb	r3, [r7, #3]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d129      	bne.n	8001a5e <main+0xce>
	  	{
	  		//IMPRONTA TROVATA APRO LA SERRATURA
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, 1);  	// relay su PE6
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	2140      	movs	r1, #64	@ 0x40
 8001a0e:	48af      	ldr	r0, [pc, #700]	@ (8001ccc <main+0x33c>)
 8001a10:	f001 fba8 	bl	8003164 <HAL_GPIO_WritePin>


			  // -- DISPLAY --
			  ssd1306_init();
 8001a14:	f000 fd97 	bl	8002546 <ssd1306_init>
			  //scritta
			  ssd1306_write_string(font11x18, " ");
 8001a18:	4bae      	ldr	r3, [pc, #696]	@ (8001cd4 <main+0x344>)
 8001a1a:	4ab1      	ldr	r2, [pc, #708]	@ (8001ce0 <main+0x350>)
 8001a1c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a20:	f000 fece 	bl	80027c0 <ssd1306_write_string>
			  ssd1306_enter();
 8001a24:	f000 ff14 	bl	8002850 <ssd1306_enter>
			  ssd1306_write_string(font16x26, "CORRECT");
 8001a28:	4bae      	ldr	r3, [pc, #696]	@ (8001ce4 <main+0x354>)
 8001a2a:	4aaf      	ldr	r2, [pc, #700]	@ (8001ce8 <main+0x358>)
 8001a2c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a30:	f000 fec6 	bl	80027c0 <ssd1306_write_string>
			  // show
			  ssd1306_update_screen();
 8001a34:	f000 fdb4 	bl	80025a0 <ssd1306_update_screen>


			  HAL_Delay(1000);
 8001a38:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a3c:	f001 f8ca 	bl	8002bd4 <HAL_Delay>

			  // -- DISPLAY CONFIG --
			  ssd1306_init();
 8001a40:	f000 fd81 	bl	8002546 <ssd1306_init>
			  //scritta
			  ssd1306_write_string(font11x18, "PASSWORD:");
 8001a44:	4ba3      	ldr	r3, [pc, #652]	@ (8001cd4 <main+0x344>)
 8001a46:	4aa4      	ldr	r2, [pc, #656]	@ (8001cd8 <main+0x348>)
 8001a48:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a4c:	f000 feb8 	bl	80027c0 <ssd1306_write_string>
			  ssd1306_enter();
 8001a50:	f000 fefe 	bl	8002850 <ssd1306_enter>
			  ssd1306_enter();
 8001a54:	f000 fefc 	bl	8002850 <ssd1306_enter>
			  // show
			  ssd1306_update_screen();
 8001a58:	f000 fda2 	bl	80025a0 <ssd1306_update_screen>
 8001a5c:	e053      	b.n	8001b06 <main+0x176>

	  	}
	  	else if(FingerResult==FP_FINGER_NOTFOUND)
 8001a5e:	78fb      	ldrb	r3, [r7, #3]
 8001a60:	2b09      	cmp	r3, #9
 8001a62:	d150      	bne.n	8001b06 <main+0x176>
	  	{
	  		//IMPRONTA NON TROVATA SUONA ALLARME

	  		// -- INIT DISPLAY --
			  ssd1306_init();
 8001a64:	f000 fd6f 	bl	8002546 <ssd1306_init>
			  //scritta
			  ssd1306_write_string(font11x18, " ");
 8001a68:	4b9a      	ldr	r3, [pc, #616]	@ (8001cd4 <main+0x344>)
 8001a6a:	4a9d      	ldr	r2, [pc, #628]	@ (8001ce0 <main+0x350>)
 8001a6c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a70:	f000 fea6 	bl	80027c0 <ssd1306_write_string>
			  ssd1306_enter();
 8001a74:	f000 feec 	bl	8002850 <ssd1306_enter>
			  ssd1306_write_string(font16x26, " ERROR");
 8001a78:	4b9a      	ldr	r3, [pc, #616]	@ (8001ce4 <main+0x354>)
 8001a7a:	4a9c      	ldr	r2, [pc, #624]	@ (8001cec <main+0x35c>)
 8001a7c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a80:	f000 fe9e 	bl	80027c0 <ssd1306_write_string>
			  // show
			  ssd1306_update_screen();
 8001a84:	f000 fd8c 	bl	80025a0 <ssd1306_update_screen>

			  // PASSWORD SBAGLIATA
			  HAL_GPIO_WritePin (GPIOD, GPIO_PIN_3, GPIO_PIN_SET); // buzzer su PD3
 8001a88:	2201      	movs	r2, #1
 8001a8a:	2108      	movs	r1, #8
 8001a8c:	4890      	ldr	r0, [pc, #576]	@ (8001cd0 <main+0x340>)
 8001a8e:	f001 fb69 	bl	8003164 <HAL_GPIO_WritePin>
			  HAL_Delay(100); // suona per 1 second0
 8001a92:	2064      	movs	r0, #100	@ 0x64
 8001a94:	f001 f89e 	bl	8002bd4 <HAL_Delay>
			  HAL_GPIO_WritePin (GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2108      	movs	r1, #8
 8001a9c:	488c      	ldr	r0, [pc, #560]	@ (8001cd0 <main+0x340>)
 8001a9e:	f001 fb61 	bl	8003164 <HAL_GPIO_WritePin>
			  HAL_Delay(100);
 8001aa2:	2064      	movs	r0, #100	@ 0x64
 8001aa4:	f001 f896 	bl	8002bd4 <HAL_Delay>

			  HAL_GPIO_WritePin (GPIOD, GPIO_PIN_3, GPIO_PIN_SET); // buzzer su PD3
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	2108      	movs	r1, #8
 8001aac:	4888      	ldr	r0, [pc, #544]	@ (8001cd0 <main+0x340>)
 8001aae:	f001 fb59 	bl	8003164 <HAL_GPIO_WritePin>
			  HAL_Delay(100); // suona per 1 second0
 8001ab2:	2064      	movs	r0, #100	@ 0x64
 8001ab4:	f001 f88e 	bl	8002bd4 <HAL_Delay>
			  HAL_GPIO_WritePin (GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2108      	movs	r1, #8
 8001abc:	4884      	ldr	r0, [pc, #528]	@ (8001cd0 <main+0x340>)
 8001abe:	f001 fb51 	bl	8003164 <HAL_GPIO_WritePin>
			  HAL_Delay(100);
 8001ac2:	2064      	movs	r0, #100	@ 0x64
 8001ac4:	f001 f886 	bl	8002bd4 <HAL_Delay>

			  HAL_GPIO_WritePin (GPIOD, GPIO_PIN_3, GPIO_PIN_SET); // buzzer su PD3
 8001ac8:	2201      	movs	r2, #1
 8001aca:	2108      	movs	r1, #8
 8001acc:	4880      	ldr	r0, [pc, #512]	@ (8001cd0 <main+0x340>)
 8001ace:	f001 fb49 	bl	8003164 <HAL_GPIO_WritePin>
			  HAL_Delay(100); // suona per 1 second0
 8001ad2:	2064      	movs	r0, #100	@ 0x64
 8001ad4:	f001 f87e 	bl	8002bd4 <HAL_Delay>
			  HAL_GPIO_WritePin (GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2108      	movs	r1, #8
 8001adc:	487c      	ldr	r0, [pc, #496]	@ (8001cd0 <main+0x340>)
 8001ade:	f001 fb41 	bl	8003164 <HAL_GPIO_WritePin>

			  HAL_Delay(1000);
 8001ae2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ae6:	f001 f875 	bl	8002bd4 <HAL_Delay>

			  // -- DISPLAY CONFIG --
			  ssd1306_init();
 8001aea:	f000 fd2c 	bl	8002546 <ssd1306_init>
			  //scritta
			  ssd1306_write_string(font11x18, "PASSWORD:");
 8001aee:	4b79      	ldr	r3, [pc, #484]	@ (8001cd4 <main+0x344>)
 8001af0:	4a79      	ldr	r2, [pc, #484]	@ (8001cd8 <main+0x348>)
 8001af2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001af6:	f000 fe63 	bl	80027c0 <ssd1306_write_string>
			  ssd1306_enter();
 8001afa:	f000 fea9 	bl	8002850 <ssd1306_enter>
			  ssd1306_enter();
 8001afe:	f000 fea7 	bl	8002850 <ssd1306_enter>
			  // show
			  ssd1306_update_screen();
 8001b02:	f000 fd4d 	bl	80025a0 <ssd1306_update_screen>
	  	}

///CODICE KEYPAD

	  // -- ABILITO LINEE DI INTERRUZIONE --
	  if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5)==1){
 8001b06:	2120      	movs	r1, #32
 8001b08:	4879      	ldr	r0, [pc, #484]	@ (8001cf0 <main+0x360>)
 8001b0a:	f001 fb13 	bl	8003134 <HAL_GPIO_ReadPin>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d115      	bne.n	8001b40 <main+0x1b0>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8001b14:	2200      	movs	r2, #0
 8001b16:	2120      	movs	r1, #32
 8001b18:	4875      	ldr	r0, [pc, #468]	@ (8001cf0 <main+0x360>)
 8001b1a:	f001 fb23 	bl	8003164 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8001b1e:	2201      	movs	r2, #1
 8001b20:	2140      	movs	r1, #64	@ 0x40
 8001b22:	4873      	ldr	r0, [pc, #460]	@ (8001cf0 <main+0x360>)
 8001b24:	f001 fb1e 	bl	8003164 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8001b28:	2201      	movs	r2, #1
 8001b2a:	2180      	movs	r1, #128	@ 0x80
 8001b2c:	4870      	ldr	r0, [pc, #448]	@ (8001cf0 <main+0x360>)
 8001b2e:	f001 fb19 	bl	8003164 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 8001b32:	2201      	movs	r2, #1
 8001b34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b38:	486d      	ldr	r0, [pc, #436]	@ (8001cf0 <main+0x360>)
 8001b3a:	f001 fb13 	bl	8003164 <HAL_GPIO_WritePin>
 8001b3e:	e056      	b.n	8001bee <main+0x25e>
	  }
	  else if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_6)==1){
 8001b40:	2140      	movs	r1, #64	@ 0x40
 8001b42:	486b      	ldr	r0, [pc, #428]	@ (8001cf0 <main+0x360>)
 8001b44:	f001 faf6 	bl	8003134 <HAL_GPIO_ReadPin>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d115      	bne.n	8001b7a <main+0x1ea>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8001b4e:	2201      	movs	r2, #1
 8001b50:	2120      	movs	r1, #32
 8001b52:	4867      	ldr	r0, [pc, #412]	@ (8001cf0 <main+0x360>)
 8001b54:	f001 fb06 	bl	8003164 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2140      	movs	r1, #64	@ 0x40
 8001b5c:	4864      	ldr	r0, [pc, #400]	@ (8001cf0 <main+0x360>)
 8001b5e:	f001 fb01 	bl	8003164 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8001b62:	2201      	movs	r2, #1
 8001b64:	2180      	movs	r1, #128	@ 0x80
 8001b66:	4862      	ldr	r0, [pc, #392]	@ (8001cf0 <main+0x360>)
 8001b68:	f001 fafc 	bl	8003164 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b72:	485f      	ldr	r0, [pc, #380]	@ (8001cf0 <main+0x360>)
 8001b74:	f001 faf6 	bl	8003164 <HAL_GPIO_WritePin>
 8001b78:	e039      	b.n	8001bee <main+0x25e>
	  }
	  else if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_7)==1){
 8001b7a:	2180      	movs	r1, #128	@ 0x80
 8001b7c:	485c      	ldr	r0, [pc, #368]	@ (8001cf0 <main+0x360>)
 8001b7e:	f001 fad9 	bl	8003134 <HAL_GPIO_ReadPin>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d115      	bne.n	8001bb4 <main+0x224>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8001b88:	2201      	movs	r2, #1
 8001b8a:	2120      	movs	r1, #32
 8001b8c:	4858      	ldr	r0, [pc, #352]	@ (8001cf0 <main+0x360>)
 8001b8e:	f001 fae9 	bl	8003164 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8001b92:	2201      	movs	r2, #1
 8001b94:	2140      	movs	r1, #64	@ 0x40
 8001b96:	4856      	ldr	r0, [pc, #344]	@ (8001cf0 <main+0x360>)
 8001b98:	f001 fae4 	bl	8003164 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	2180      	movs	r1, #128	@ 0x80
 8001ba0:	4853      	ldr	r0, [pc, #332]	@ (8001cf0 <main+0x360>)
 8001ba2:	f001 fadf 	bl	8003164 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bac:	4850      	ldr	r0, [pc, #320]	@ (8001cf0 <main+0x360>)
 8001bae:	f001 fad9 	bl	8003164 <HAL_GPIO_WritePin>
 8001bb2:	e01c      	b.n	8001bee <main+0x25e>
	  	  }
	  else if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_8)==1){
 8001bb4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bb8:	484d      	ldr	r0, [pc, #308]	@ (8001cf0 <main+0x360>)
 8001bba:	f001 fabb 	bl	8003134 <HAL_GPIO_ReadPin>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d114      	bne.n	8001bee <main+0x25e>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	2120      	movs	r1, #32
 8001bc8:	4849      	ldr	r0, [pc, #292]	@ (8001cf0 <main+0x360>)
 8001bca:	f001 facb 	bl	8003164 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8001bce:	2201      	movs	r2, #1
 8001bd0:	2140      	movs	r1, #64	@ 0x40
 8001bd2:	4847      	ldr	r0, [pc, #284]	@ (8001cf0 <main+0x360>)
 8001bd4:	f001 fac6 	bl	8003164 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8001bd8:	2201      	movs	r2, #1
 8001bda:	2180      	movs	r1, #128	@ 0x80
 8001bdc:	4844      	ldr	r0, [pc, #272]	@ (8001cf0 <main+0x360>)
 8001bde:	f001 fac1 	bl	8003164 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 8001be2:	2200      	movs	r2, #0
 8001be4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001be8:	4841      	ldr	r0, [pc, #260]	@ (8001cf0 <main+0x360>)
 8001bea:	f001 fabb 	bl	8003164 <HAL_GPIO_WritePin>
	  	  }


	  // incremento contatore ogni bottone premuto e azzero il flag
	  if(keypress == 1){
 8001bee:	4b41      	ldr	r3, [pc, #260]	@ (8001cf4 <main+0x364>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d111      	bne.n	8001c1a <main+0x28a>
		  counter++;
 8001bf6:	4b40      	ldr	r3, [pc, #256]	@ (8001cf8 <main+0x368>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	4b3d      	ldr	r3, [pc, #244]	@ (8001cf8 <main+0x368>)
 8001c02:	701a      	strb	r2, [r3, #0]

		  // -- DISPLAY CONFIG --
		  ssd1306_write_string(font16x26, "* ");
 8001c04:	4b37      	ldr	r3, [pc, #220]	@ (8001ce4 <main+0x354>)
 8001c06:	4a3d      	ldr	r2, [pc, #244]	@ (8001cfc <main+0x36c>)
 8001c08:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c0c:	f000 fdd8 	bl	80027c0 <ssd1306_write_string>
		  // show
		  ssd1306_update_screen();
 8001c10:	f000 fcc6 	bl	80025a0 <ssd1306_update_screen>

		  keypress = 0;
 8001c14:	4b37      	ldr	r3, [pc, #220]	@ (8001cf4 <main+0x364>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]
	  }


	  // -- CHECK PASSWORD --
	  // entro dopo aver inserito 4 caratteri
	  if(4 == counter){
 8001c1a:	4b37      	ldr	r3, [pc, #220]	@ (8001cf8 <main+0x368>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b04      	cmp	r3, #4
 8001c22:	f47f aeeb 	bne.w	80019fc <main+0x6c>

		  int i = 0; //contatore caratteri confrontati
 8001c26:	2300      	movs	r3, #0
 8001c28:	607b      	str	r3, [r7, #4]

		  while(i<4){
 8001c2a:	e06d      	b.n	8001d08 <main+0x378>
			  if(password[i] == correct_psw[i]){
 8001c2c:	4a34      	ldr	r2, [pc, #208]	@ (8001d00 <main+0x370>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	781a      	ldrb	r2, [r3, #0]
 8001c34:	4933      	ldr	r1, [pc, #204]	@ (8001d04 <main+0x374>)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	440b      	add	r3, r1
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d103      	bne.n	8001c48 <main+0x2b8>
				  i++;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3301      	adds	r3, #1
 8001c44:	607b      	str	r3, [r7, #4]
 8001c46:	e05f      	b.n	8001d08 <main+0x378>
			  }
			  else {

				  // -- INIT DISPLAY --
				  ssd1306_init();
 8001c48:	f000 fc7d 	bl	8002546 <ssd1306_init>
				  //scritta
				  ssd1306_write_string(font11x18, " ");
 8001c4c:	4b21      	ldr	r3, [pc, #132]	@ (8001cd4 <main+0x344>)
 8001c4e:	4a24      	ldr	r2, [pc, #144]	@ (8001ce0 <main+0x350>)
 8001c50:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c54:	f000 fdb4 	bl	80027c0 <ssd1306_write_string>
				  ssd1306_enter();
 8001c58:	f000 fdfa 	bl	8002850 <ssd1306_enter>
				  ssd1306_write_string(font16x26, " ERROR");
 8001c5c:	4b21      	ldr	r3, [pc, #132]	@ (8001ce4 <main+0x354>)
 8001c5e:	4a23      	ldr	r2, [pc, #140]	@ (8001cec <main+0x35c>)
 8001c60:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c64:	f000 fdac 	bl	80027c0 <ssd1306_write_string>
				  // show
				  ssd1306_update_screen();
 8001c68:	f000 fc9a 	bl	80025a0 <ssd1306_update_screen>


				  // PASSWORD SBAGLIATA
				  HAL_GPIO_WritePin (GPIOD, GPIO_PIN_3, GPIO_PIN_SET); // buzzer su PD3
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	2108      	movs	r1, #8
 8001c70:	4817      	ldr	r0, [pc, #92]	@ (8001cd0 <main+0x340>)
 8001c72:	f001 fa77 	bl	8003164 <HAL_GPIO_WritePin>
				  HAL_Delay(100); // suona per 1 second0
 8001c76:	2064      	movs	r0, #100	@ 0x64
 8001c78:	f000 ffac 	bl	8002bd4 <HAL_Delay>
				  HAL_GPIO_WritePin (GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	2108      	movs	r1, #8
 8001c80:	4813      	ldr	r0, [pc, #76]	@ (8001cd0 <main+0x340>)
 8001c82:	f001 fa6f 	bl	8003164 <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001c86:	2064      	movs	r0, #100	@ 0x64
 8001c88:	f000 ffa4 	bl	8002bd4 <HAL_Delay>

				  HAL_GPIO_WritePin (GPIOD, GPIO_PIN_3, GPIO_PIN_SET); // buzzer su PD3
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	2108      	movs	r1, #8
 8001c90:	480f      	ldr	r0, [pc, #60]	@ (8001cd0 <main+0x340>)
 8001c92:	f001 fa67 	bl	8003164 <HAL_GPIO_WritePin>
				  HAL_Delay(100); // suona per 1 second0
 8001c96:	2064      	movs	r0, #100	@ 0x64
 8001c98:	f000 ff9c 	bl	8002bd4 <HAL_Delay>
				  HAL_GPIO_WritePin (GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	2108      	movs	r1, #8
 8001ca0:	480b      	ldr	r0, [pc, #44]	@ (8001cd0 <main+0x340>)
 8001ca2:	f001 fa5f 	bl	8003164 <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001ca6:	2064      	movs	r0, #100	@ 0x64
 8001ca8:	f000 ff94 	bl	8002bd4 <HAL_Delay>

				  HAL_GPIO_WritePin (GPIOD, GPIO_PIN_3, GPIO_PIN_SET); // buzzer su PD3
 8001cac:	2201      	movs	r2, #1
 8001cae:	2108      	movs	r1, #8
 8001cb0:	4807      	ldr	r0, [pc, #28]	@ (8001cd0 <main+0x340>)
 8001cb2:	f001 fa57 	bl	8003164 <HAL_GPIO_WritePin>
				  HAL_Delay(100); // suona per 1 second0
 8001cb6:	2064      	movs	r0, #100	@ 0x64
 8001cb8:	f000 ff8c 	bl	8002bd4 <HAL_Delay>
				  HAL_GPIO_WritePin (GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	2108      	movs	r1, #8
 8001cc0:	4803      	ldr	r0, [pc, #12]	@ (8001cd0 <main+0x340>)
 8001cc2:	f001 fa4f 	bl	8003164 <HAL_GPIO_WritePin>
				  break;
 8001cc6:	e022      	b.n	8001d0e <main+0x37e>
 8001cc8:	20000148 	.word	0x20000148
 8001ccc:	48001000 	.word	0x48001000
 8001cd0:	48000c00 	.word	0x48000c00
 8001cd4:	20000030 	.word	0x20000030
 8001cd8:	08005eec 	.word	0x08005eec
 8001cdc:	2000015f 	.word	0x2000015f
 8001ce0:	08005ef8 	.word	0x08005ef8
 8001ce4:	20000038 	.word	0x20000038
 8001ce8:	08005efc 	.word	0x08005efc
 8001cec:	08005f04 	.word	0x08005f04
 8001cf0:	48000400 	.word	0x48000400
 8001cf4:	2000015d 	.word	0x2000015d
 8001cf8:	2000015c 	.word	0x2000015c
 8001cfc:	08005f0c 	.word	0x08005f0c
 8001d00:	20000158 	.word	0x20000158
 8001d04:	2000002c 	.word	0x2000002c
		  while(i<4){
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b03      	cmp	r3, #3
 8001d0c:	dd8e      	ble.n	8001c2c <main+0x29c>
			  }
		  }

		  // SBLOCCO - BLOCCO SERRATURA
		  if(i == 4){
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d115      	bne.n	8001d40 <main+0x3b0>

			  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_6);  	// relay su PE6
 8001d14:	2140      	movs	r1, #64	@ 0x40
 8001d16:	4815      	ldr	r0, [pc, #84]	@ (8001d6c <main+0x3dc>)
 8001d18:	f001 fa3c 	bl	8003194 <HAL_GPIO_TogglePin>

			  // -- DISPLAY --
			  ssd1306_init();
 8001d1c:	f000 fc13 	bl	8002546 <ssd1306_init>
			  //scritta
			  ssd1306_write_string(font11x18, " ");
 8001d20:	4b13      	ldr	r3, [pc, #76]	@ (8001d70 <main+0x3e0>)
 8001d22:	4a14      	ldr	r2, [pc, #80]	@ (8001d74 <main+0x3e4>)
 8001d24:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001d28:	f000 fd4a 	bl	80027c0 <ssd1306_write_string>
			  ssd1306_enter();
 8001d2c:	f000 fd90 	bl	8002850 <ssd1306_enter>
			  ssd1306_write_string(font16x26, "CORRECT");
 8001d30:	4b11      	ldr	r3, [pc, #68]	@ (8001d78 <main+0x3e8>)
 8001d32:	4a12      	ldr	r2, [pc, #72]	@ (8001d7c <main+0x3ec>)
 8001d34:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001d38:	f000 fd42 	bl	80027c0 <ssd1306_write_string>
			  // show
			  ssd1306_update_screen();
 8001d3c:	f000 fc30 	bl	80025a0 <ssd1306_update_screen>
		  }


		  counter = 0;
 8001d40:	4b0f      	ldr	r3, [pc, #60]	@ (8001d80 <main+0x3f0>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	701a      	strb	r2, [r3, #0]

		  // -- INIT DISPLAY --
		  HAL_Delay(1700);
 8001d46:	f240 60a4 	movw	r0, #1700	@ 0x6a4
 8001d4a:	f000 ff43 	bl	8002bd4 <HAL_Delay>
		  ssd1306_init();
 8001d4e:	f000 fbfa 	bl	8002546 <ssd1306_init>
		  //scritta
		  ssd1306_write_string(font11x18, "PASSWORD:");
 8001d52:	4b07      	ldr	r3, [pc, #28]	@ (8001d70 <main+0x3e0>)
 8001d54:	4a0b      	ldr	r2, [pc, #44]	@ (8001d84 <main+0x3f4>)
 8001d56:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001d5a:	f000 fd31 	bl	80027c0 <ssd1306_write_string>
		  ssd1306_enter();
 8001d5e:	f000 fd77 	bl	8002850 <ssd1306_enter>
		  ssd1306_enter();
 8001d62:	f000 fd75 	bl	8002850 <ssd1306_enter>
		  // show
		  ssd1306_update_screen();
 8001d66:	f000 fc1b 	bl	80025a0 <ssd1306_update_screen>
	  FingerResult=CheckFinger();
 8001d6a:	e647      	b.n	80019fc <main+0x6c>
 8001d6c:	48001000 	.word	0x48001000
 8001d70:	20000030 	.word	0x20000030
 8001d74:	08005ef8 	.word	0x08005ef8
 8001d78:	20000038 	.word	0x20000038
 8001d7c:	08005efc 	.word	0x08005efc
 8001d80:	2000015c 	.word	0x2000015c
 8001d84:	08005eec 	.word	0x08005eec

08001d88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b09e      	sub	sp, #120	@ 0x78
 8001d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d8e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001d92:	2228      	movs	r2, #40	@ 0x28
 8001d94:	2100      	movs	r1, #0
 8001d96:	4618      	mov	r0, r3
 8001d98:	f004 f86f 	bl	8005e7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d9c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dac:	463b      	mov	r3, r7
 8001dae:	223c      	movs	r2, #60	@ 0x3c
 8001db0:	2100      	movs	r1, #0
 8001db2:	4618      	mov	r0, r3
 8001db4:	f004 f861 	bl	8005e7a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001db8:	2302      	movs	r3, #2
 8001dba:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dc0:	2310      	movs	r3, #16
 8001dc2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001dcc:	f44f 1320 	mov.w	r3, #2621440	@ 0x280000
 8001dd0:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dd2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f001 fec4 	bl	8003b64 <HAL_RCC_OscConfig>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001de2:	f000 fa9b 	bl	800231c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001de6:	230f      	movs	r3, #15
 8001de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dea:	2302      	movs	r3, #2
 8001dec:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dee:	2300      	movs	r3, #0
 8001df0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001df2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001df6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001dfc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001e00:	2101      	movs	r1, #1
 8001e02:	4618      	mov	r0, r3
 8001e04:	f002 feec 	bl	8004be0 <HAL_RCC_ClockConfig>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001e0e:	f000 fa85 	bl	800231c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_I2C2;
 8001e12:	2350      	movs	r3, #80	@ 0x50
 8001e14:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e1e:	463b      	mov	r3, r7
 8001e20:	4618      	mov	r0, r3
 8001e22:	f003 f8fd 	bl	8005020 <HAL_RCCEx_PeriphCLKConfig>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001e2c:	f000 fa76 	bl	800231c <Error_Handler>
  }
}
 8001e30:	bf00      	nop
 8001e32:	3778      	adds	r7, #120	@ 0x78
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001eac <MX_I2C2_Init+0x74>)
 8001e3e:	4a1c      	ldr	r2, [pc, #112]	@ (8001eb0 <MX_I2C2_Init+0x78>)
 8001e40:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0000020B;
 8001e42:	4b1a      	ldr	r3, [pc, #104]	@ (8001eac <MX_I2C2_Init+0x74>)
 8001e44:	f240 220b 	movw	r2, #523	@ 0x20b
 8001e48:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001e4a:	4b18      	ldr	r3, [pc, #96]	@ (8001eac <MX_I2C2_Init+0x74>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e50:	4b16      	ldr	r3, [pc, #88]	@ (8001eac <MX_I2C2_Init+0x74>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e56:	4b15      	ldr	r3, [pc, #84]	@ (8001eac <MX_I2C2_Init+0x74>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001e5c:	4b13      	ldr	r3, [pc, #76]	@ (8001eac <MX_I2C2_Init+0x74>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e62:	4b12      	ldr	r3, [pc, #72]	@ (8001eac <MX_I2C2_Init+0x74>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e68:	4b10      	ldr	r3, [pc, #64]	@ (8001eac <MX_I2C2_Init+0x74>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001eac <MX_I2C2_Init+0x74>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001e74:	480d      	ldr	r0, [pc, #52]	@ (8001eac <MX_I2C2_Init+0x74>)
 8001e76:	f001 f9bf 	bl	80031f8 <HAL_I2C_Init>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001e80:	f000 fa4c 	bl	800231c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e84:	2100      	movs	r1, #0
 8001e86:	4809      	ldr	r0, [pc, #36]	@ (8001eac <MX_I2C2_Init+0x74>)
 8001e88:	f001 fdd4 	bl	8003a34 <HAL_I2CEx_ConfigAnalogFilter>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001e92:	f000 fa43 	bl	800231c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001e96:	2100      	movs	r1, #0
 8001e98:	4804      	ldr	r0, [pc, #16]	@ (8001eac <MX_I2C2_Init+0x74>)
 8001e9a:	f001 fe16 	bl	8003aca <HAL_I2CEx_ConfigDigitalFilter>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001ea4:	f000 fa3a 	bl	800231c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	2000006c 	.word	0x2000006c
 8001eb0:	40005800 	.word	0x40005800

08001eb4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001eb8:	4b14      	ldr	r3, [pc, #80]	@ (8001f0c <MX_UART5_Init+0x58>)
 8001eba:	4a15      	ldr	r2, [pc, #84]	@ (8001f10 <MX_UART5_Init+0x5c>)
 8001ebc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 57600;
 8001ebe:	4b13      	ldr	r3, [pc, #76]	@ (8001f0c <MX_UART5_Init+0x58>)
 8001ec0:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8001ec4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001ec6:	4b11      	ldr	r3, [pc, #68]	@ (8001f0c <MX_UART5_Init+0x58>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8001f0c <MX_UART5_Init+0x58>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8001f0c <MX_UART5_Init+0x58>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f0c <MX_UART5_Init+0x58>)
 8001eda:	220c      	movs	r2, #12
 8001edc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ede:	4b0b      	ldr	r3, [pc, #44]	@ (8001f0c <MX_UART5_Init+0x58>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ee4:	4b09      	ldr	r3, [pc, #36]	@ (8001f0c <MX_UART5_Init+0x58>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001eea:	4b08      	ldr	r3, [pc, #32]	@ (8001f0c <MX_UART5_Init+0x58>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ef0:	4b06      	ldr	r3, [pc, #24]	@ (8001f0c <MX_UART5_Init+0x58>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001ef6:	4805      	ldr	r0, [pc, #20]	@ (8001f0c <MX_UART5_Init+0x58>)
 8001ef8:	f003 fa42 	bl	8005380 <HAL_UART_Init>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001f02:	f000 fa0b 	bl	800231c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	200000c0 	.word	0x200000c0
 8001f10:	40005000 	.word	0x40005000

08001f14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08c      	sub	sp, #48	@ 0x30
 8001f18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1a:	f107 031c 	add.w	r3, r7, #28
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	605a      	str	r2, [r3, #4]
 8001f24:	609a      	str	r2, [r3, #8]
 8001f26:	60da      	str	r2, [r3, #12]
 8001f28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f2a:	4b6d      	ldr	r3, [pc, #436]	@ (80020e0 <MX_GPIO_Init+0x1cc>)
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	4a6c      	ldr	r2, [pc, #432]	@ (80020e0 <MX_GPIO_Init+0x1cc>)
 8001f30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f34:	6153      	str	r3, [r2, #20]
 8001f36:	4b6a      	ldr	r3, [pc, #424]	@ (80020e0 <MX_GPIO_Init+0x1cc>)
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f3e:	61bb      	str	r3, [r7, #24]
 8001f40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f42:	4b67      	ldr	r3, [pc, #412]	@ (80020e0 <MX_GPIO_Init+0x1cc>)
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	4a66      	ldr	r2, [pc, #408]	@ (80020e0 <MX_GPIO_Init+0x1cc>)
 8001f48:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001f4c:	6153      	str	r3, [r2, #20]
 8001f4e:	4b64      	ldr	r3, [pc, #400]	@ (80020e0 <MX_GPIO_Init+0x1cc>)
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f5a:	4b61      	ldr	r3, [pc, #388]	@ (80020e0 <MX_GPIO_Init+0x1cc>)
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	4a60      	ldr	r2, [pc, #384]	@ (80020e0 <MX_GPIO_Init+0x1cc>)
 8001f60:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f64:	6153      	str	r3, [r2, #20]
 8001f66:	4b5e      	ldr	r3, [pc, #376]	@ (80020e0 <MX_GPIO_Init+0x1cc>)
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f72:	4b5b      	ldr	r3, [pc, #364]	@ (80020e0 <MX_GPIO_Init+0x1cc>)
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	4a5a      	ldr	r2, [pc, #360]	@ (80020e0 <MX_GPIO_Init+0x1cc>)
 8001f78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f7c:	6153      	str	r3, [r2, #20]
 8001f7e:	4b58      	ldr	r3, [pc, #352]	@ (80020e0 <MX_GPIO_Init+0x1cc>)
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f8a:	4b55      	ldr	r3, [pc, #340]	@ (80020e0 <MX_GPIO_Init+0x1cc>)
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	4a54      	ldr	r2, [pc, #336]	@ (80020e0 <MX_GPIO_Init+0x1cc>)
 8001f90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f94:	6153      	str	r3, [r2, #20]
 8001f96:	4b52      	ldr	r3, [pc, #328]	@ (80020e0 <MX_GPIO_Init+0x1cc>)
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fa2:	4b4f      	ldr	r3, [pc, #316]	@ (80020e0 <MX_GPIO_Init+0x1cc>)
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	4a4e      	ldr	r2, [pc, #312]	@ (80020e0 <MX_GPIO_Init+0x1cc>)
 8001fa8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001fac:	6153      	str	r3, [r2, #20]
 8001fae:	4b4c      	ldr	r3, [pc, #304]	@ (80020e0 <MX_GPIO_Init+0x1cc>)
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fb6:	607b      	str	r3, [r7, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_6|LD4_Pin|LD3_Pin
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f64f 7148 	movw	r1, #65352	@ 0xff48
 8001fc0:	4848      	ldr	r0, [pc, #288]	@ (80020e4 <MX_GPIO_Init+0x1d0>)
 8001fc2:	f001 f8cf 	bl	8003164 <HAL_GPIO_WritePin>
                          |LD5_Pin|LD7_Pin|LD9_Pin|LD10_Pin
                          |LD8_Pin|LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2108      	movs	r1, #8
 8001fca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fce:	f001 f8c9 	bl	8003164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2108      	movs	r1, #8
 8001fd6:	4844      	ldr	r0, [pc, #272]	@ (80020e8 <MX_GPIO_Init+0x1d4>)
 8001fd8:	f001 f8c4 	bl	8003164 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin PE6 LD4_Pin LD3_Pin
                           LD5_Pin LD7_Pin LD9_Pin LD10_Pin
                           LD8_Pin LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_6|LD4_Pin|LD3_Pin
 8001fdc:	f64f 7348 	movw	r3, #65352	@ 0xff48
 8001fe0:	61fb      	str	r3, [r7, #28]
                          |LD5_Pin|LD7_Pin|LD9_Pin|LD10_Pin
                          |LD8_Pin|LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fea:	2300      	movs	r3, #0
 8001fec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fee:	f107 031c 	add.w	r3, r7, #28
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	483b      	ldr	r0, [pc, #236]	@ (80020e4 <MX_GPIO_Init+0x1d0>)
 8001ff6:	f000 ff23 	bl	8002e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ffe:	2300      	movs	r3, #0
 8002000:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002006:	f107 031c 	add.w	r3, r7, #28
 800200a:	4619      	mov	r1, r3
 800200c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002010:	f000 ff16 	bl	8002e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002014:	2308      	movs	r3, #8
 8002016:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002018:	2301      	movs	r3, #1
 800201a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201c:	2300      	movs	r3, #0
 800201e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002020:	2300      	movs	r3, #0
 8002022:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002024:	f107 031c 	add.w	r3, r7, #28
 8002028:	4619      	mov	r1, r3
 800202a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800202e:	f000 ff07 	bl	8002e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8002032:	23e0      	movs	r3, #224	@ 0xe0
 8002034:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002036:	2302      	movs	r3, #2
 8002038:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203e:	2300      	movs	r3, #0
 8002040:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002042:	2305      	movs	r3, #5
 8002044:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002046:	f107 031c 	add.w	r3, r7, #28
 800204a:	4619      	mov	r1, r3
 800204c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002050:	f000 fef6 	bl	8002e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 8002054:	2317      	movs	r3, #23
 8002056:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002058:	2300      	movs	r3, #0
 800205a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002060:	f107 031c 	add.w	r3, r7, #28
 8002064:	4619      	mov	r1, r3
 8002066:	4821      	ldr	r0, [pc, #132]	@ (80020ec <MX_GPIO_Init+0x1d8>)
 8002068:	f000 feea 	bl	8002e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800206c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002070:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002072:	2302      	movs	r3, #2
 8002074:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800207a:	2303      	movs	r3, #3
 800207c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800207e:	230e      	movs	r3, #14
 8002080:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002082:	f107 031c 	add.w	r3, r7, #28
 8002086:	4619      	mov	r1, r3
 8002088:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800208c:	f000 fed8 	bl	8002e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002090:	2308      	movs	r3, #8
 8002092:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002094:	2301      	movs	r3, #1
 8002096:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209c:	2300      	movs	r3, #0
 800209e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020a0:	f107 031c 	add.w	r3, r7, #28
 80020a4:	4619      	mov	r1, r3
 80020a6:	4810      	ldr	r0, [pc, #64]	@ (80020e8 <MX_GPIO_Init+0x1d4>)
 80020a8:	f000 feca 	bl	8002e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80020ac:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80020b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020b2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80020b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020bc:	f107 031c 	add.w	r3, r7, #28
 80020c0:	4619      	mov	r1, r3
 80020c2:	480a      	ldr	r0, [pc, #40]	@ (80020ec <MX_GPIO_Init+0x1d8>)
 80020c4:	f000 febc 	bl	8002e40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80020c8:	2200      	movs	r2, #0
 80020ca:	2100      	movs	r1, #0
 80020cc:	2017      	movs	r0, #23
 80020ce:	f000 fe80 	bl	8002dd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80020d2:	2017      	movs	r0, #23
 80020d4:	f000 fe99 	bl	8002e0a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020d8:	bf00      	nop
 80020da:	3730      	adds	r7, #48	@ 0x30
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40021000 	.word	0x40021000
 80020e4:	48001000 	.word	0x48001000
 80020e8:	48000c00 	.word	0x48000c00
 80020ec:	48000400 	.word	0x48000400

080020f0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	80fb      	strh	r3, [r7, #6]


		// controllo LETTURA PIN colonne
		if(GPIO_Pin == (GPIO_PIN_5) || GPIO_Pin == (GPIO_PIN_6) ||  GPIO_Pin == (GPIO_PIN_7) || GPIO_Pin == (GPIO_PIN_8)){
 80020fa:	88fb      	ldrh	r3, [r7, #6]
 80020fc:	2b20      	cmp	r3, #32
 80020fe:	d00a      	beq.n	8002116 <HAL_GPIO_EXTI_Callback+0x26>
 8002100:	88fb      	ldrh	r3, [r7, #6]
 8002102:	2b40      	cmp	r3, #64	@ 0x40
 8002104:	d007      	beq.n	8002116 <HAL_GPIO_EXTI_Callback+0x26>
 8002106:	88fb      	ldrh	r3, [r7, #6]
 8002108:	2b80      	cmp	r3, #128	@ 0x80
 800210a:	d004      	beq.n	8002116 <HAL_GPIO_EXTI_Callback+0x26>
 800210c:	88fb      	ldrh	r3, [r7, #6]
 800210e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002112:	f040 80f6 	bne.w	8002302 <HAL_GPIO_EXTI_Callback+0x212>

			// inizializzazione keypad
			KEYPAD_Init(0, gu8_KeyStatesArr);
 8002116:	497d      	ldr	r1, [pc, #500]	@ (800230c <HAL_GPIO_EXTI_Callback+0x21c>)
 8002118:	2000      	movs	r0, #0
 800211a:	f7fe f855 	bl	80001c8 <KEYPAD_Init>

			// leggo il bottone premuto
			KEYPAD_Scan(0);
 800211e:	2000      	movs	r0, #0
 8002120:	f7fe f9f8 	bl	8000514 <KEYPAD_Scan>

			// button 1 
			if(gu8_KeyStatesArr[KEY_1] == KEY_PRESSED){
 8002124:	4b79      	ldr	r3, [pc, #484]	@ (800230c <HAL_GPIO_EXTI_Callback+0x21c>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d10a      	bne.n	8002142 <HAL_GPIO_EXTI_Callback+0x52>
				password[counter]='1';
 800212c:	4b78      	ldr	r3, [pc, #480]	@ (8002310 <HAL_GPIO_EXTI_Callback+0x220>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	b2db      	uxtb	r3, r3
 8002132:	461a      	mov	r2, r3
 8002134:	4b77      	ldr	r3, [pc, #476]	@ (8002314 <HAL_GPIO_EXTI_Callback+0x224>)
 8002136:	2131      	movs	r1, #49	@ 0x31
 8002138:	5499      	strb	r1, [r3, r2]
				keypress = 1;
 800213a:	4b77      	ldr	r3, [pc, #476]	@ (8002318 <HAL_GPIO_EXTI_Callback+0x228>)
 800213c:	2201      	movs	r2, #1
 800213e:	701a      	strb	r2, [r3, #0]
				password[counter]='D';
				keypress = 1;
			}

		}
}
 8002140:	e0df      	b.n	8002302 <HAL_GPIO_EXTI_Callback+0x212>
			else if(gu8_KeyStatesArr[KEY_2] == KEY_PRESSED){
 8002142:	4b72      	ldr	r3, [pc, #456]	@ (800230c <HAL_GPIO_EXTI_Callback+0x21c>)
 8002144:	785b      	ldrb	r3, [r3, #1]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d10a      	bne.n	8002160 <HAL_GPIO_EXTI_Callback+0x70>
				password[counter]='2';
 800214a:	4b71      	ldr	r3, [pc, #452]	@ (8002310 <HAL_GPIO_EXTI_Callback+0x220>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	b2db      	uxtb	r3, r3
 8002150:	461a      	mov	r2, r3
 8002152:	4b70      	ldr	r3, [pc, #448]	@ (8002314 <HAL_GPIO_EXTI_Callback+0x224>)
 8002154:	2132      	movs	r1, #50	@ 0x32
 8002156:	5499      	strb	r1, [r3, r2]
				keypress = 1;
 8002158:	4b6f      	ldr	r3, [pc, #444]	@ (8002318 <HAL_GPIO_EXTI_Callback+0x228>)
 800215a:	2201      	movs	r2, #1
 800215c:	701a      	strb	r2, [r3, #0]
}
 800215e:	e0d0      	b.n	8002302 <HAL_GPIO_EXTI_Callback+0x212>
			else if(gu8_KeyStatesArr[KEY_3] == KEY_PRESSED){
 8002160:	4b6a      	ldr	r3, [pc, #424]	@ (800230c <HAL_GPIO_EXTI_Callback+0x21c>)
 8002162:	789b      	ldrb	r3, [r3, #2]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d10a      	bne.n	800217e <HAL_GPIO_EXTI_Callback+0x8e>
				password[counter]='3';
 8002168:	4b69      	ldr	r3, [pc, #420]	@ (8002310 <HAL_GPIO_EXTI_Callback+0x220>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	b2db      	uxtb	r3, r3
 800216e:	461a      	mov	r2, r3
 8002170:	4b68      	ldr	r3, [pc, #416]	@ (8002314 <HAL_GPIO_EXTI_Callback+0x224>)
 8002172:	2133      	movs	r1, #51	@ 0x33
 8002174:	5499      	strb	r1, [r3, r2]
				keypress = 1;
 8002176:	4b68      	ldr	r3, [pc, #416]	@ (8002318 <HAL_GPIO_EXTI_Callback+0x228>)
 8002178:	2201      	movs	r2, #1
 800217a:	701a      	strb	r2, [r3, #0]
}
 800217c:	e0c1      	b.n	8002302 <HAL_GPIO_EXTI_Callback+0x212>
			else if(gu8_KeyStatesArr[KEY_A] == KEY_PRESSED){
 800217e:	4b63      	ldr	r3, [pc, #396]	@ (800230c <HAL_GPIO_EXTI_Callback+0x21c>)
 8002180:	78db      	ldrb	r3, [r3, #3]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d10a      	bne.n	800219c <HAL_GPIO_EXTI_Callback+0xac>
				password[counter]='A';
 8002186:	4b62      	ldr	r3, [pc, #392]	@ (8002310 <HAL_GPIO_EXTI_Callback+0x220>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	b2db      	uxtb	r3, r3
 800218c:	461a      	mov	r2, r3
 800218e:	4b61      	ldr	r3, [pc, #388]	@ (8002314 <HAL_GPIO_EXTI_Callback+0x224>)
 8002190:	2141      	movs	r1, #65	@ 0x41
 8002192:	5499      	strb	r1, [r3, r2]
				keypress = 1;
 8002194:	4b60      	ldr	r3, [pc, #384]	@ (8002318 <HAL_GPIO_EXTI_Callback+0x228>)
 8002196:	2201      	movs	r2, #1
 8002198:	701a      	strb	r2, [r3, #0]
}
 800219a:	e0b2      	b.n	8002302 <HAL_GPIO_EXTI_Callback+0x212>
			else if(gu8_KeyStatesArr[KEY_4] == KEY_PRESSED){
 800219c:	4b5b      	ldr	r3, [pc, #364]	@ (800230c <HAL_GPIO_EXTI_Callback+0x21c>)
 800219e:	791b      	ldrb	r3, [r3, #4]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d10a      	bne.n	80021ba <HAL_GPIO_EXTI_Callback+0xca>
				password[counter]='4';
 80021a4:	4b5a      	ldr	r3, [pc, #360]	@ (8002310 <HAL_GPIO_EXTI_Callback+0x220>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	461a      	mov	r2, r3
 80021ac:	4b59      	ldr	r3, [pc, #356]	@ (8002314 <HAL_GPIO_EXTI_Callback+0x224>)
 80021ae:	2134      	movs	r1, #52	@ 0x34
 80021b0:	5499      	strb	r1, [r3, r2]
				keypress = 1;
 80021b2:	4b59      	ldr	r3, [pc, #356]	@ (8002318 <HAL_GPIO_EXTI_Callback+0x228>)
 80021b4:	2201      	movs	r2, #1
 80021b6:	701a      	strb	r2, [r3, #0]
}
 80021b8:	e0a3      	b.n	8002302 <HAL_GPIO_EXTI_Callback+0x212>
			else if(gu8_KeyStatesArr[KEY_5] == KEY_PRESSED){
 80021ba:	4b54      	ldr	r3, [pc, #336]	@ (800230c <HAL_GPIO_EXTI_Callback+0x21c>)
 80021bc:	795b      	ldrb	r3, [r3, #5]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d10a      	bne.n	80021d8 <HAL_GPIO_EXTI_Callback+0xe8>
				password[counter]='5';
 80021c2:	4b53      	ldr	r3, [pc, #332]	@ (8002310 <HAL_GPIO_EXTI_Callback+0x220>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	461a      	mov	r2, r3
 80021ca:	4b52      	ldr	r3, [pc, #328]	@ (8002314 <HAL_GPIO_EXTI_Callback+0x224>)
 80021cc:	2135      	movs	r1, #53	@ 0x35
 80021ce:	5499      	strb	r1, [r3, r2]
				keypress = 1;
 80021d0:	4b51      	ldr	r3, [pc, #324]	@ (8002318 <HAL_GPIO_EXTI_Callback+0x228>)
 80021d2:	2201      	movs	r2, #1
 80021d4:	701a      	strb	r2, [r3, #0]
}
 80021d6:	e094      	b.n	8002302 <HAL_GPIO_EXTI_Callback+0x212>
			else if(gu8_KeyStatesArr[KEY_6] == KEY_PRESSED){
 80021d8:	4b4c      	ldr	r3, [pc, #304]	@ (800230c <HAL_GPIO_EXTI_Callback+0x21c>)
 80021da:	799b      	ldrb	r3, [r3, #6]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d10a      	bne.n	80021f6 <HAL_GPIO_EXTI_Callback+0x106>
				password[counter]='6';
 80021e0:	4b4b      	ldr	r3, [pc, #300]	@ (8002310 <HAL_GPIO_EXTI_Callback+0x220>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	461a      	mov	r2, r3
 80021e8:	4b4a      	ldr	r3, [pc, #296]	@ (8002314 <HAL_GPIO_EXTI_Callback+0x224>)
 80021ea:	2136      	movs	r1, #54	@ 0x36
 80021ec:	5499      	strb	r1, [r3, r2]
				keypress = 1;
 80021ee:	4b4a      	ldr	r3, [pc, #296]	@ (8002318 <HAL_GPIO_EXTI_Callback+0x228>)
 80021f0:	2201      	movs	r2, #1
 80021f2:	701a      	strb	r2, [r3, #0]
}
 80021f4:	e085      	b.n	8002302 <HAL_GPIO_EXTI_Callback+0x212>
			else if(gu8_KeyStatesArr[KEY_B] == KEY_PRESSED){
 80021f6:	4b45      	ldr	r3, [pc, #276]	@ (800230c <HAL_GPIO_EXTI_Callback+0x21c>)
 80021f8:	79db      	ldrb	r3, [r3, #7]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d10a      	bne.n	8002214 <HAL_GPIO_EXTI_Callback+0x124>
				password[counter]='B';
 80021fe:	4b44      	ldr	r3, [pc, #272]	@ (8002310 <HAL_GPIO_EXTI_Callback+0x220>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	b2db      	uxtb	r3, r3
 8002204:	461a      	mov	r2, r3
 8002206:	4b43      	ldr	r3, [pc, #268]	@ (8002314 <HAL_GPIO_EXTI_Callback+0x224>)
 8002208:	2142      	movs	r1, #66	@ 0x42
 800220a:	5499      	strb	r1, [r3, r2]
				keypress = 1;
 800220c:	4b42      	ldr	r3, [pc, #264]	@ (8002318 <HAL_GPIO_EXTI_Callback+0x228>)
 800220e:	2201      	movs	r2, #1
 8002210:	701a      	strb	r2, [r3, #0]
}
 8002212:	e076      	b.n	8002302 <HAL_GPIO_EXTI_Callback+0x212>
			else if(gu8_KeyStatesArr[KEY_7] == KEY_PRESSED){
 8002214:	4b3d      	ldr	r3, [pc, #244]	@ (800230c <HAL_GPIO_EXTI_Callback+0x21c>)
 8002216:	7a1b      	ldrb	r3, [r3, #8]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d10a      	bne.n	8002232 <HAL_GPIO_EXTI_Callback+0x142>
				password[counter]='7';
 800221c:	4b3c      	ldr	r3, [pc, #240]	@ (8002310 <HAL_GPIO_EXTI_Callback+0x220>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	b2db      	uxtb	r3, r3
 8002222:	461a      	mov	r2, r3
 8002224:	4b3b      	ldr	r3, [pc, #236]	@ (8002314 <HAL_GPIO_EXTI_Callback+0x224>)
 8002226:	2137      	movs	r1, #55	@ 0x37
 8002228:	5499      	strb	r1, [r3, r2]
				keypress = 1;
 800222a:	4b3b      	ldr	r3, [pc, #236]	@ (8002318 <HAL_GPIO_EXTI_Callback+0x228>)
 800222c:	2201      	movs	r2, #1
 800222e:	701a      	strb	r2, [r3, #0]
}
 8002230:	e067      	b.n	8002302 <HAL_GPIO_EXTI_Callback+0x212>
			else if(gu8_KeyStatesArr[KEY_8] == KEY_PRESSED){
 8002232:	4b36      	ldr	r3, [pc, #216]	@ (800230c <HAL_GPIO_EXTI_Callback+0x21c>)
 8002234:	7a5b      	ldrb	r3, [r3, #9]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d10a      	bne.n	8002250 <HAL_GPIO_EXTI_Callback+0x160>
				password[counter]='8';
 800223a:	4b35      	ldr	r3, [pc, #212]	@ (8002310 <HAL_GPIO_EXTI_Callback+0x220>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	b2db      	uxtb	r3, r3
 8002240:	461a      	mov	r2, r3
 8002242:	4b34      	ldr	r3, [pc, #208]	@ (8002314 <HAL_GPIO_EXTI_Callback+0x224>)
 8002244:	2138      	movs	r1, #56	@ 0x38
 8002246:	5499      	strb	r1, [r3, r2]
				keypress = 1;
 8002248:	4b33      	ldr	r3, [pc, #204]	@ (8002318 <HAL_GPIO_EXTI_Callback+0x228>)
 800224a:	2201      	movs	r2, #1
 800224c:	701a      	strb	r2, [r3, #0]
}
 800224e:	e058      	b.n	8002302 <HAL_GPIO_EXTI_Callback+0x212>
			else if(gu8_KeyStatesArr[KEY_9] == KEY_PRESSED){
 8002250:	4b2e      	ldr	r3, [pc, #184]	@ (800230c <HAL_GPIO_EXTI_Callback+0x21c>)
 8002252:	7a9b      	ldrb	r3, [r3, #10]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d10a      	bne.n	800226e <HAL_GPIO_EXTI_Callback+0x17e>
				password[counter]='9';
 8002258:	4b2d      	ldr	r3, [pc, #180]	@ (8002310 <HAL_GPIO_EXTI_Callback+0x220>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	b2db      	uxtb	r3, r3
 800225e:	461a      	mov	r2, r3
 8002260:	4b2c      	ldr	r3, [pc, #176]	@ (8002314 <HAL_GPIO_EXTI_Callback+0x224>)
 8002262:	2139      	movs	r1, #57	@ 0x39
 8002264:	5499      	strb	r1, [r3, r2]
				keypress = 1;
 8002266:	4b2c      	ldr	r3, [pc, #176]	@ (8002318 <HAL_GPIO_EXTI_Callback+0x228>)
 8002268:	2201      	movs	r2, #1
 800226a:	701a      	strb	r2, [r3, #0]
}
 800226c:	e049      	b.n	8002302 <HAL_GPIO_EXTI_Callback+0x212>
			else if(gu8_KeyStatesArr[KEY_C] == KEY_PRESSED){
 800226e:	4b27      	ldr	r3, [pc, #156]	@ (800230c <HAL_GPIO_EXTI_Callback+0x21c>)
 8002270:	7adb      	ldrb	r3, [r3, #11]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d10a      	bne.n	800228c <HAL_GPIO_EXTI_Callback+0x19c>
				password[counter]='C';
 8002276:	4b26      	ldr	r3, [pc, #152]	@ (8002310 <HAL_GPIO_EXTI_Callback+0x220>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	b2db      	uxtb	r3, r3
 800227c:	461a      	mov	r2, r3
 800227e:	4b25      	ldr	r3, [pc, #148]	@ (8002314 <HAL_GPIO_EXTI_Callback+0x224>)
 8002280:	2143      	movs	r1, #67	@ 0x43
 8002282:	5499      	strb	r1, [r3, r2]
				keypress = 1;
 8002284:	4b24      	ldr	r3, [pc, #144]	@ (8002318 <HAL_GPIO_EXTI_Callback+0x228>)
 8002286:	2201      	movs	r2, #1
 8002288:	701a      	strb	r2, [r3, #0]
}
 800228a:	e03a      	b.n	8002302 <HAL_GPIO_EXTI_Callback+0x212>
			else if(gu8_KeyStatesArr[KEY_S] == KEY_PRESSED){
 800228c:	4b1f      	ldr	r3, [pc, #124]	@ (800230c <HAL_GPIO_EXTI_Callback+0x21c>)
 800228e:	7b1b      	ldrb	r3, [r3, #12]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d10a      	bne.n	80022aa <HAL_GPIO_EXTI_Callback+0x1ba>
				password[counter]='S';
 8002294:	4b1e      	ldr	r3, [pc, #120]	@ (8002310 <HAL_GPIO_EXTI_Callback+0x220>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	b2db      	uxtb	r3, r3
 800229a:	461a      	mov	r2, r3
 800229c:	4b1d      	ldr	r3, [pc, #116]	@ (8002314 <HAL_GPIO_EXTI_Callback+0x224>)
 800229e:	2153      	movs	r1, #83	@ 0x53
 80022a0:	5499      	strb	r1, [r3, r2]
				keypress = 1;
 80022a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002318 <HAL_GPIO_EXTI_Callback+0x228>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	701a      	strb	r2, [r3, #0]
}
 80022a8:	e02b      	b.n	8002302 <HAL_GPIO_EXTI_Callback+0x212>
			else if(gu8_KeyStatesArr[KEY_0] == KEY_PRESSED){
 80022aa:	4b18      	ldr	r3, [pc, #96]	@ (800230c <HAL_GPIO_EXTI_Callback+0x21c>)
 80022ac:	7b5b      	ldrb	r3, [r3, #13]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d10a      	bne.n	80022c8 <HAL_GPIO_EXTI_Callback+0x1d8>
				password[counter]='0';
 80022b2:	4b17      	ldr	r3, [pc, #92]	@ (8002310 <HAL_GPIO_EXTI_Callback+0x220>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	461a      	mov	r2, r3
 80022ba:	4b16      	ldr	r3, [pc, #88]	@ (8002314 <HAL_GPIO_EXTI_Callback+0x224>)
 80022bc:	2130      	movs	r1, #48	@ 0x30
 80022be:	5499      	strb	r1, [r3, r2]
				keypress = 1;
 80022c0:	4b15      	ldr	r3, [pc, #84]	@ (8002318 <HAL_GPIO_EXTI_Callback+0x228>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	701a      	strb	r2, [r3, #0]
}
 80022c6:	e01c      	b.n	8002302 <HAL_GPIO_EXTI_Callback+0x212>
			else if(gu8_KeyStatesArr[KEY_H] == KEY_PRESSED){
 80022c8:	4b10      	ldr	r3, [pc, #64]	@ (800230c <HAL_GPIO_EXTI_Callback+0x21c>)
 80022ca:	7b9b      	ldrb	r3, [r3, #14]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d10a      	bne.n	80022e6 <HAL_GPIO_EXTI_Callback+0x1f6>
				password[counter]='H';
 80022d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002310 <HAL_GPIO_EXTI_Callback+0x220>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	461a      	mov	r2, r3
 80022d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002314 <HAL_GPIO_EXTI_Callback+0x224>)
 80022da:	2148      	movs	r1, #72	@ 0x48
 80022dc:	5499      	strb	r1, [r3, r2]
				keypress = 1;
 80022de:	4b0e      	ldr	r3, [pc, #56]	@ (8002318 <HAL_GPIO_EXTI_Callback+0x228>)
 80022e0:	2201      	movs	r2, #1
 80022e2:	701a      	strb	r2, [r3, #0]
}
 80022e4:	e00d      	b.n	8002302 <HAL_GPIO_EXTI_Callback+0x212>
			else if(gu8_KeyStatesArr[KEY_D] == KEY_PRESSED){
 80022e6:	4b09      	ldr	r3, [pc, #36]	@ (800230c <HAL_GPIO_EXTI_Callback+0x21c>)
 80022e8:	7bdb      	ldrb	r3, [r3, #15]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d109      	bne.n	8002302 <HAL_GPIO_EXTI_Callback+0x212>
				password[counter]='D';
 80022ee:	4b08      	ldr	r3, [pc, #32]	@ (8002310 <HAL_GPIO_EXTI_Callback+0x220>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	461a      	mov	r2, r3
 80022f6:	4b07      	ldr	r3, [pc, #28]	@ (8002314 <HAL_GPIO_EXTI_Callback+0x224>)
 80022f8:	2144      	movs	r1, #68	@ 0x44
 80022fa:	5499      	strb	r1, [r3, r2]
				keypress = 1;
 80022fc:	4b06      	ldr	r3, [pc, #24]	@ (8002318 <HAL_GPIO_EXTI_Callback+0x228>)
 80022fe:	2201      	movs	r2, #1
 8002300:	701a      	strb	r2, [r3, #0]
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	20000148 	.word	0x20000148
 8002310:	2000015c 	.word	0x2000015c
 8002314:	20000158 	.word	0x20000158
 8002318:	2000015d 	.word	0x2000015d

0800231c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002320:	b672      	cpsid	i
}
 8002322:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002324:	bf00      	nop
 8002326:	e7fd      	b.n	8002324 <Error_Handler+0x8>

08002328 <ssd1306_write_command>:
SSD1306_FONT current_font;


/* I2C Write Function */
void ssd1306_write_command(uint8_t command)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af04      	add	r7, sp, #16
 800232e:	4603      	mov	r3, r0
 8002330:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(SSD1306_I2C, SSD1306_I2C_SA_WRITE, SSD1306_CONTROL_BYTE_COMMAND, 1, &command, 1, 1000);
 8002332:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002336:	9302      	str	r3, [sp, #8]
 8002338:	2301      	movs	r3, #1
 800233a:	9301      	str	r3, [sp, #4]
 800233c:	1dfb      	adds	r3, r7, #7
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	2301      	movs	r3, #1
 8002342:	2200      	movs	r2, #0
 8002344:	2178      	movs	r1, #120	@ 0x78
 8002346:	4803      	ldr	r0, [pc, #12]	@ (8002354 <ssd1306_write_command+0x2c>)
 8002348:	f000 fff2 	bl	8003330 <HAL_I2C_Mem_Write>
}
 800234c:	bf00      	nop
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	2000006c 	.word	0x2000006c

08002358 <ssd1306_write_data>:

void ssd1306_write_data(uint8_t* buffer, uint16_t size)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af04      	add	r7, sp, #16
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	807b      	strh	r3, [r7, #2]
    HAL_I2C_Mem_Write(SSD1306_I2C, SSD1306_I2C_SA_WRITE, SSD1306_CONTROL_BYTE_DATA, 1, buffer, size, 1000);
 8002364:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002368:	9302      	str	r3, [sp, #8]
 800236a:	887b      	ldrh	r3, [r7, #2]
 800236c:	9301      	str	r3, [sp, #4]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	2301      	movs	r3, #1
 8002374:	2240      	movs	r2, #64	@ 0x40
 8002376:	2178      	movs	r1, #120	@ 0x78
 8002378:	4803      	ldr	r0, [pc, #12]	@ (8002388 <ssd1306_write_data+0x30>)
 800237a:	f000 ffd9 	bl	8003330 <HAL_I2C_Mem_Write>
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	2000006c 	.word	0x2000006c

0800238c <charge_bump_setting>:


/* Charge Bump Setting */
void charge_bump_setting(uint8_t charge_bump)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(CHARGE_BUMP_SETTING);
 8002396:	208d      	movs	r0, #141	@ 0x8d
 8002398:	f7ff ffc6 	bl	8002328 <ssd1306_write_command>
    ssd1306_write_command(charge_bump);
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff ffc2 	bl	8002328 <ssd1306_write_command>
}
 80023a4:	bf00      	nop
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <set_contrast_control>:

/* Fundamental */
void set_contrast_control(uint8_t value)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(SET_CONTRAST_CONTROL);
 80023b6:	2081      	movs	r0, #129	@ 0x81
 80023b8:	f7ff ffb6 	bl	8002328 <ssd1306_write_command>
    ssd1306_write_command(value);
 80023bc:	79fb      	ldrb	r3, [r7, #7]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff ffb2 	bl	8002328 <ssd1306_write_command>
}
 80023c4:	bf00      	nop
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <entire_display_off>:

void entire_display_off()
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
    ssd1306_write_command(ENTIRE_DISPLAY_OFF);
 80023d0:	20a4      	movs	r0, #164	@ 0xa4
 80023d2:	f7ff ffa9 	bl	8002328 <ssd1306_write_command>
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}

080023da <set_normal_display>:
{
    ssd1306_write_command(ENTIRE_DISPLAY_ON);
}

void set_normal_display()
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	af00      	add	r7, sp, #0
    ssd1306_write_command(SET_NORMAL_DISPLAY);
 80023de:	20a6      	movs	r0, #166	@ 0xa6
 80023e0:	f7ff ffa2 	bl	8002328 <ssd1306_write_command>
}
 80023e4:	bf00      	nop
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <set_display_on>:
{
    ssd1306_write_command(SET_INVERSE_DISPLAY);
}

void set_display_on()
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
    ssd1306_write_command(SET_DISPLAY_ON);
 80023ec:	20af      	movs	r0, #175	@ 0xaf
 80023ee:	f7ff ff9b 	bl	8002328 <ssd1306_write_command>
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <set_lower_column_start_address_for_page_addressing_mode>:
// 안써용~


/* Addressing Setting */
void set_lower_column_start_address_for_page_addressing_mode(uint8_t addr)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	4603      	mov	r3, r0
 80023fe:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(addr);
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff ff90 	bl	8002328 <ssd1306_write_command>
}
 8002408:	bf00      	nop
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <set_higher_column_start_address_for_page_addressing_mode>:

void set_higher_column_start_address_for_page_addressing_mode(uint8_t addr)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(addr);
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff ff83 	bl	8002328 <ssd1306_write_command>
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <set_page_start_address_for_page_addressing_mode>:
    ssd1306_write_command(start);
    ssd1306_write_command(end);
}

void set_page_start_address_for_page_addressing_mode(uint8_t page)  // 0xB0(page0) ~ 0xB7(page7)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	4603      	mov	r3, r0
 8002432:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(page);
 8002434:	79fb      	ldrb	r3, [r7, #7]
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff ff76 	bl	8002328 <ssd1306_write_command>
}
 800243c:	bf00      	nop
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <set_display_start_line>:


/* Hardware Configuration */
void set_display_start_line(uint8_t start_line)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(start_line);
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff ff69 	bl	8002328 <ssd1306_write_command>
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <set_segment_remap>:

void set_segment_remap(uint8_t mapping)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b082      	sub	sp, #8
 8002462:	af00      	add	r7, sp, #0
 8002464:	4603      	mov	r3, r0
 8002466:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(mapping);
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff ff5c 	bl	8002328 <ssd1306_write_command>
}
 8002470:	bf00      	nop
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <set_multiplex_ratio>:

void set_multiplex_ratio(uint8_t mux)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(SET_MULTIPLEX_RATIO);
 8002482:	20a8      	movs	r0, #168	@ 0xa8
 8002484:	f7ff ff50 	bl	8002328 <ssd1306_write_command>
    ssd1306_write_command(mux);
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff ff4c 	bl	8002328 <ssd1306_write_command>
}
 8002490:	bf00      	nop
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <set_com_output_scan_direction>:

void set_com_output_scan_direction(uint8_t mode)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(mode);
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff ff3f 	bl	8002328 <ssd1306_write_command>
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <set_display_offset>:

void set_display_offset(uint8_t vertical_shift)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	4603      	mov	r3, r0
 80024ba:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(SET_DISPLAY_OFFSET);
 80024bc:	20d3      	movs	r0, #211	@ 0xd3
 80024be:	f7ff ff33 	bl	8002328 <ssd1306_write_command>
    ssd1306_write_command(vertical_shift);
 80024c2:	79fb      	ldrb	r3, [r7, #7]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff ff2f 	bl	8002328 <ssd1306_write_command>
}
 80024ca:	bf00      	nop
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <set_com_pins_hardware_config>:

void set_com_pins_hardware_config(uint8_t com_pin_config, uint8_t com_left_right_remap)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b084      	sub	sp, #16
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	4603      	mov	r3, r0
 80024da:	460a      	mov	r2, r1
 80024dc:	71fb      	strb	r3, [r7, #7]
 80024de:	4613      	mov	r3, r2
 80024e0:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer = 0x02 | (com_pin_config << 4) | (com_left_right_remap << 5);
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	011b      	lsls	r3, r3, #4
 80024e6:	b25b      	sxtb	r3, r3
 80024e8:	f043 0302 	orr.w	r3, r3, #2
 80024ec:	b25a      	sxtb	r2, r3
 80024ee:	79bb      	ldrb	r3, [r7, #6]
 80024f0:	015b      	lsls	r3, r3, #5
 80024f2:	b25b      	sxtb	r3, r3
 80024f4:	4313      	orrs	r3, r2
 80024f6:	b25b      	sxtb	r3, r3
 80024f8:	73fb      	strb	r3, [r7, #15]

    ssd1306_write_command(SET_COM_PINS_HARDWARE_CONFIG);
 80024fa:	20da      	movs	r0, #218	@ 0xda
 80024fc:	f7ff ff14 	bl	8002328 <ssd1306_write_command>
    ssd1306_write_command(buffer);
 8002500:	7bfb      	ldrb	r3, [r7, #15]
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff ff10 	bl	8002328 <ssd1306_write_command>
}
 8002508:	bf00      	nop
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <set_display_clock_divide_ratio_and_osc_freq>:


/* Timing & Driving Scheme Setting */
void set_display_clock_divide_ratio_and_osc_freq(uint8_t divide_ratio, uint8_t osc_freq)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	460a      	mov	r2, r1
 800251a:	71fb      	strb	r3, [r7, #7]
 800251c:	4613      	mov	r3, r2
 800251e:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer = (osc_freq << 4) | divide_ratio;
 8002520:	79bb      	ldrb	r3, [r7, #6]
 8002522:	011b      	lsls	r3, r3, #4
 8002524:	b25a      	sxtb	r2, r3
 8002526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252a:	4313      	orrs	r3, r2
 800252c:	b25b      	sxtb	r3, r3
 800252e:	73fb      	strb	r3, [r7, #15]

    ssd1306_write_command(SET_DISPLAY_CLOCK_DIVIDE_RATIO_AND_OSC_FREQ);
 8002530:	20d5      	movs	r0, #213	@ 0xd5
 8002532:	f7ff fef9 	bl	8002328 <ssd1306_write_command>
    ssd1306_write_command(buffer);
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff fef5 	bl	8002328 <ssd1306_write_command>
}
 800253e:	bf00      	nop
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <ssd1306_init>:
}


/* SSD1306 Function */
void ssd1306_init()
{
 8002546:	b580      	push	{r7, lr}
 8002548:	af00      	add	r7, sp, #0
    // SSD1306 App Note 5p
    set_multiplex_ratio(63);
 800254a:	203f      	movs	r0, #63	@ 0x3f
 800254c:	f7ff ff94 	bl	8002478 <set_multiplex_ratio>

    set_display_offset(0);
 8002550:	2000      	movs	r0, #0
 8002552:	f7ff ffae 	bl	80024b2 <set_display_offset>

    set_display_start_line(0x40);
 8002556:	2040      	movs	r0, #64	@ 0x40
 8002558:	f7ff ff74 	bl	8002444 <set_display_start_line>

    set_segment_remap(0xA1);
 800255c:	20a1      	movs	r0, #161	@ 0xa1
 800255e:	f7ff ff7e 	bl	800245e <set_segment_remap>

    set_com_output_scan_direction(0xC8);
 8002562:	20c8      	movs	r0, #200	@ 0xc8
 8002564:	f7ff ff98 	bl	8002498 <set_com_output_scan_direction>

    set_com_pins_hardware_config(1, 0);
 8002568:	2100      	movs	r1, #0
 800256a:	2001      	movs	r0, #1
 800256c:	f7ff ffb1 	bl	80024d2 <set_com_pins_hardware_config>

    set_contrast_control(0x7F);
 8002570:	207f      	movs	r0, #127	@ 0x7f
 8002572:	f7ff ff1b 	bl	80023ac <set_contrast_control>

    entire_display_off();
 8002576:	f7ff ff29 	bl	80023cc <entire_display_off>

    set_normal_display();
 800257a:	f7ff ff2e 	bl	80023da <set_normal_display>

    set_display_clock_divide_ratio_and_osc_freq(0, 8);
 800257e:	2108      	movs	r1, #8
 8002580:	2000      	movs	r0, #0
 8002582:	f7ff ffc5 	bl	8002510 <set_display_clock_divide_ratio_and_osc_freq>

    charge_bump_setting(0x14);
 8002586:	2014      	movs	r0, #20
 8002588:	f7ff ff00 	bl	800238c <charge_bump_setting>

    set_display_on();
 800258c:	f7ff ff2c 	bl	80023e8 <set_display_on>

    // Clear Ram Data
    ssd1306_black_screen();
 8002590:	f000 f82e 	bl	80025f0 <ssd1306_black_screen>

    // Set cursor 0, 0
    ssd1306_set_cursor(0, 0);
 8002594:	2100      	movs	r1, #0
 8002596:	2000      	movs	r0, #0
 8002598:	f000 f944 	bl	8002824 <ssd1306_set_cursor>
}
 800259c:	bf00      	nop
 800259e:	bd80      	pop	{r7, pc}

080025a0 <ssd1306_update_screen>:

void ssd1306_update_screen()
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
    for(int i = 0; i < SSD1306_PAGE; i ++)
 80025a6:	2300      	movs	r3, #0
 80025a8:	607b      	str	r3, [r7, #4]
 80025aa:	e017      	b.n	80025dc <ssd1306_update_screen+0x3c>
    {
        set_page_start_address_for_page_addressing_mode(0xB0 + i);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	3b50      	subs	r3, #80	@ 0x50
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff ff38 	bl	800242a <set_page_start_address_for_page_addressing_mode>
        set_lower_column_start_address_for_page_addressing_mode(0x00);
 80025ba:	2000      	movs	r0, #0
 80025bc:	f7ff ff1b 	bl	80023f6 <set_lower_column_start_address_for_page_addressing_mode>
        set_higher_column_start_address_for_page_addressing_mode(0x10);
 80025c0:	2010      	movs	r0, #16
 80025c2:	f7ff ff25 	bl	8002410 <set_higher_column_start_address_for_page_addressing_mode>

        ssd1306_write_data(&ssd1306_buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	01db      	lsls	r3, r3, #7
 80025ca:	4a08      	ldr	r2, [pc, #32]	@ (80025ec <ssd1306_update_screen+0x4c>)
 80025cc:	4413      	add	r3, r2
 80025ce:	2180      	movs	r1, #128	@ 0x80
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff fec1 	bl	8002358 <ssd1306_write_data>
    for(int i = 0; i < SSD1306_PAGE; i ++)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3301      	adds	r3, #1
 80025da:	607b      	str	r3, [r7, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b07      	cmp	r3, #7
 80025e0:	dde4      	ble.n	80025ac <ssd1306_update_screen+0xc>
    }
}
 80025e2:	bf00      	nop
 80025e4:	bf00      	nop
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	20000160 	.word	0x20000160

080025f0 <ssd1306_black_screen>:

void ssd1306_black_screen()
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
    for(int i = 0; i < SSD1306_BUFFER_SIZE; i++)
 80025f6:	2300      	movs	r3, #0
 80025f8:	607b      	str	r3, [r7, #4]
 80025fa:	e007      	b.n	800260c <ssd1306_black_screen+0x1c>
    {
        ssd1306_buffer[i] = 0x00;
 80025fc:	4a08      	ldr	r2, [pc, #32]	@ (8002620 <ssd1306_black_screen+0x30>)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4413      	add	r3, r2
 8002602:	2200      	movs	r2, #0
 8002604:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < SSD1306_BUFFER_SIZE; i++)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3301      	adds	r3, #1
 800260a:	607b      	str	r3, [r7, #4]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002612:	dbf3      	blt.n	80025fc <ssd1306_black_screen+0xc>
    }

    ssd1306_update_screen();
 8002614:	f7ff ffc4 	bl	80025a0 <ssd1306_update_screen>
}
 8002618:	bf00      	nop
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20000160 	.word	0x20000160

08002624 <ssd1306_black_pixel>:

    ssd1306_update_screen();
}

void ssd1306_black_pixel(uint8_t x, uint8_t y)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	460a      	mov	r2, r1
 800262e:	71fb      	strb	r3, [r7, #7]
 8002630:	4613      	mov	r3, r2
 8002632:	71bb      	strb	r3, [r7, #6]
    // (y / 8) * SSD1306_WIDTH : page
    // y % 8 : data bit D0 - D7
    ssd1306_buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002634:	79fa      	ldrb	r2, [r7, #7]
 8002636:	79bb      	ldrb	r3, [r7, #6]
 8002638:	08db      	lsrs	r3, r3, #3
 800263a:	b2d8      	uxtb	r0, r3
 800263c:	4603      	mov	r3, r0
 800263e:	01db      	lsls	r3, r3, #7
 8002640:	4413      	add	r3, r2
 8002642:	4a0d      	ldr	r2, [pc, #52]	@ (8002678 <ssd1306_black_pixel+0x54>)
 8002644:	5cd3      	ldrb	r3, [r2, r3]
 8002646:	b25a      	sxtb	r2, r3
 8002648:	79bb      	ldrb	r3, [r7, #6]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	2101      	movs	r1, #1
 8002650:	fa01 f303 	lsl.w	r3, r1, r3
 8002654:	b25b      	sxtb	r3, r3
 8002656:	43db      	mvns	r3, r3
 8002658:	b25b      	sxtb	r3, r3
 800265a:	4013      	ands	r3, r2
 800265c:	b259      	sxtb	r1, r3
 800265e:	79fa      	ldrb	r2, [r7, #7]
 8002660:	4603      	mov	r3, r0
 8002662:	01db      	lsls	r3, r3, #7
 8002664:	4413      	add	r3, r2
 8002666:	b2c9      	uxtb	r1, r1
 8002668:	4a03      	ldr	r2, [pc, #12]	@ (8002678 <ssd1306_black_pixel+0x54>)
 800266a:	54d1      	strb	r1, [r2, r3]
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	20000160 	.word	0x20000160

0800267c <ssd1306_white_pixel>:

void ssd1306_white_pixel(uint8_t x, uint8_t y)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	460a      	mov	r2, r1
 8002686:	71fb      	strb	r3, [r7, #7]
 8002688:	4613      	mov	r3, r2
 800268a:	71bb      	strb	r3, [r7, #6]
    // (y / 8) * SSD1306_WIDTH : page
    // y % 8 : data bit D0 - D7
    ssd1306_buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800268c:	79fa      	ldrb	r2, [r7, #7]
 800268e:	79bb      	ldrb	r3, [r7, #6]
 8002690:	08db      	lsrs	r3, r3, #3
 8002692:	b2d8      	uxtb	r0, r3
 8002694:	4603      	mov	r3, r0
 8002696:	01db      	lsls	r3, r3, #7
 8002698:	4413      	add	r3, r2
 800269a:	4a0c      	ldr	r2, [pc, #48]	@ (80026cc <ssd1306_white_pixel+0x50>)
 800269c:	5cd3      	ldrb	r3, [r2, r3]
 800269e:	b25a      	sxtb	r2, r3
 80026a0:	79bb      	ldrb	r3, [r7, #6]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	2101      	movs	r1, #1
 80026a8:	fa01 f303 	lsl.w	r3, r1, r3
 80026ac:	b25b      	sxtb	r3, r3
 80026ae:	4313      	orrs	r3, r2
 80026b0:	b259      	sxtb	r1, r3
 80026b2:	79fa      	ldrb	r2, [r7, #7]
 80026b4:	4603      	mov	r3, r0
 80026b6:	01db      	lsls	r3, r3, #7
 80026b8:	4413      	add	r3, r2
 80026ba:	b2c9      	uxtb	r1, r1
 80026bc:	4a03      	ldr	r2, [pc, #12]	@ (80026cc <ssd1306_white_pixel+0x50>)
 80026be:	54d1      	strb	r1, [r2, r3]
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	20000160 	.word	0x20000160

080026d0 <ssd1306_write_char>:

char ssd1306_write_char(SSD1306_FONT font, char ch)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b088      	sub	sp, #32
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	f107 0308 	add.w	r3, r7, #8
 80026da:	e883 0003 	stmia.w	r3, {r0, r1}
 80026de:	4613      	mov	r3, r2
 80026e0:	71fb      	strb	r3, [r7, #7]
    uint32_t b;

    // Printable Characters : 32 - 126
    if(ch < 32 || ch > 126)
 80026e2:	79fb      	ldrb	r3, [r7, #7]
 80026e4:	2b1f      	cmp	r3, #31
 80026e6:	d902      	bls.n	80026ee <ssd1306_write_char+0x1e>
 80026e8:	79fb      	ldrb	r3, [r7, #7]
 80026ea:	2b7e      	cmp	r3, #126	@ 0x7e
 80026ec:	d901      	bls.n	80026f2 <ssd1306_write_char+0x22>
        return 0;
 80026ee:	2300      	movs	r3, #0
 80026f0:	e060      	b.n	80027b4 <ssd1306_write_char+0xe4>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (cursor.x + font.width) ||  SSD1306_HEIGHT < (cursor.y + font.height))
 80026f2:	4b32      	ldr	r3, [pc, #200]	@ (80027bc <ssd1306_write_char+0xec>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	461a      	mov	r2, r3
 80026f8:	7a3b      	ldrb	r3, [r7, #8]
 80026fa:	4413      	add	r3, r2
 80026fc:	2b80      	cmp	r3, #128	@ 0x80
 80026fe:	dc06      	bgt.n	800270e <ssd1306_write_char+0x3e>
 8002700:	4b2e      	ldr	r3, [pc, #184]	@ (80027bc <ssd1306_write_char+0xec>)
 8002702:	785b      	ldrb	r3, [r3, #1]
 8002704:	461a      	mov	r2, r3
 8002706:	7a7b      	ldrb	r3, [r7, #9]
 8002708:	4413      	add	r3, r2
 800270a:	2b40      	cmp	r3, #64	@ 0x40
 800270c:	dd01      	ble.n	8002712 <ssd1306_write_char+0x42>
    {
        // Not enough space on current line
        return 0;
 800270e:	2300      	movs	r3, #0
 8002710:	e050      	b.n	80027b4 <ssd1306_write_char+0xe4>
    }

    // Use the font to write
    for(int i = 0; i < font.height; i++)
 8002712:	2300      	movs	r3, #0
 8002714:	61fb      	str	r3, [r7, #28]
 8002716:	e040      	b.n	800279a <ssd1306_write_char+0xca>
    {
        b = font.data[(ch - 32) * font.height + i];
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	79fb      	ldrb	r3, [r7, #7]
 800271c:	3b20      	subs	r3, #32
 800271e:	7a79      	ldrb	r1, [r7, #9]
 8002720:	fb03 f101 	mul.w	r1, r3, r1
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	440b      	add	r3, r1
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	4413      	add	r3, r2
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	617b      	str	r3, [r7, #20]
        
        for(int j = 0; j < font.width; j++)
 8002730:	2300      	movs	r3, #0
 8002732:	61bb      	str	r3, [r7, #24]
 8002734:	e029      	b.n	800278a <ssd1306_write_char+0xba>
        {
            if((b << j) & 0x8000)
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00f      	beq.n	8002766 <ssd1306_write_char+0x96>
            {
                ssd1306_white_pixel(cursor.x + j, cursor.y + i);
 8002746:	4b1d      	ldr	r3, [pc, #116]	@ (80027bc <ssd1306_write_char+0xec>)
 8002748:	781a      	ldrb	r2, [r3, #0]
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	b2db      	uxtb	r3, r3
 800274e:	4413      	add	r3, r2
 8002750:	b2d8      	uxtb	r0, r3
 8002752:	4b1a      	ldr	r3, [pc, #104]	@ (80027bc <ssd1306_write_char+0xec>)
 8002754:	785a      	ldrb	r2, [r3, #1]
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	b2db      	uxtb	r3, r3
 800275a:	4413      	add	r3, r2
 800275c:	b2db      	uxtb	r3, r3
 800275e:	4619      	mov	r1, r3
 8002760:	f7ff ff8c 	bl	800267c <ssd1306_white_pixel>
 8002764:	e00e      	b.n	8002784 <ssd1306_write_char+0xb4>
            }
            else
            {
                ssd1306_black_pixel(cursor.x + j, cursor.y + i);
 8002766:	4b15      	ldr	r3, [pc, #84]	@ (80027bc <ssd1306_write_char+0xec>)
 8002768:	781a      	ldrb	r2, [r3, #0]
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	b2db      	uxtb	r3, r3
 800276e:	4413      	add	r3, r2
 8002770:	b2d8      	uxtb	r0, r3
 8002772:	4b12      	ldr	r3, [pc, #72]	@ (80027bc <ssd1306_write_char+0xec>)
 8002774:	785a      	ldrb	r2, [r3, #1]
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	b2db      	uxtb	r3, r3
 800277a:	4413      	add	r3, r2
 800277c:	b2db      	uxtb	r3, r3
 800277e:	4619      	mov	r1, r3
 8002780:	f7ff ff50 	bl	8002624 <ssd1306_black_pixel>
        for(int j = 0; j < font.width; j++)
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	3301      	adds	r3, #1
 8002788:	61bb      	str	r3, [r7, #24]
 800278a:	7a3b      	ldrb	r3, [r7, #8]
 800278c:	461a      	mov	r2, r3
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	4293      	cmp	r3, r2
 8002792:	dbd0      	blt.n	8002736 <ssd1306_write_char+0x66>
    for(int i = 0; i < font.height; i++)
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	3301      	adds	r3, #1
 8002798:	61fb      	str	r3, [r7, #28]
 800279a:	7a7b      	ldrb	r3, [r7, #9]
 800279c:	461a      	mov	r2, r3
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	4293      	cmp	r3, r2
 80027a2:	dbb9      	blt.n	8002718 <ssd1306_write_char+0x48>
            }
        }
    }

    // The current space is now taken
    cursor.x += font.width;
 80027a4:	4b05      	ldr	r3, [pc, #20]	@ (80027bc <ssd1306_write_char+0xec>)
 80027a6:	781a      	ldrb	r2, [r3, #0]
 80027a8:	7a3b      	ldrb	r3, [r7, #8]
 80027aa:	4413      	add	r3, r2
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	4b03      	ldr	r3, [pc, #12]	@ (80027bc <ssd1306_write_char+0xec>)
 80027b0:	701a      	strb	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80027b2:	79fb      	ldrb	r3, [r7, #7]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3720      	adds	r7, #32
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	20000560 	.word	0x20000560

080027c0 <ssd1306_write_string>:


// Write full string to screen buffer
char ssd1306_write_string(SSD1306_FONT font, char *str)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	f107 0308 	add.w	r3, r7, #8
 80027ca:	e883 0003 	stmia.w	r3, {r0, r1}
 80027ce:	607a      	str	r2, [r7, #4]
    current_font = font;
 80027d0:	4b13      	ldr	r3, [pc, #76]	@ (8002820 <ssd1306_write_string+0x60>)
 80027d2:	461a      	mov	r2, r3
 80027d4:	f107 0308 	add.w	r3, r7, #8
 80027d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80027dc:	e882 0003 	stmia.w	r2, {r0, r1}

    // Write until null-byte
    while(*str)
 80027e0:	e014      	b.n	800280c <ssd1306_write_string+0x4c>
    {
        if(ssd1306_write_char(font, *str) != *str)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	461a      	mov	r2, r3
 80027e8:	f107 0308 	add.w	r3, r7, #8
 80027ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80027f0:	f7ff ff6e 	bl	80026d0 <ssd1306_write_char>
 80027f4:	4603      	mov	r3, r0
 80027f6:	461a      	mov	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d002      	beq.n	8002806 <ssd1306_write_string+0x46>
        {
            // Char could not be written
            return *str;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	e008      	b.n	8002818 <ssd1306_write_string+0x58>
        }

        // Next char
        str++;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	3301      	adds	r3, #1
 800280a:	607b      	str	r3, [r7, #4]
    while(*str)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1e6      	bne.n	80027e2 <ssd1306_write_string+0x22>
    }

    // Everything ok
    return *str;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	781b      	ldrb	r3, [r3, #0]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	20000564 	.word	0x20000564

08002824 <ssd1306_set_cursor>:

void ssd1306_set_cursor(uint8_t x, uint8_t y)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	460a      	mov	r2, r1
 800282e:	71fb      	strb	r3, [r7, #7]
 8002830:	4613      	mov	r3, r2
 8002832:	71bb      	strb	r3, [r7, #6]
    cursor.x = x;
 8002834:	4a05      	ldr	r2, [pc, #20]	@ (800284c <ssd1306_set_cursor+0x28>)
 8002836:	79fb      	ldrb	r3, [r7, #7]
 8002838:	7013      	strb	r3, [r2, #0]
    cursor.y = y;
 800283a:	4a04      	ldr	r2, [pc, #16]	@ (800284c <ssd1306_set_cursor+0x28>)
 800283c:	79bb      	ldrb	r3, [r7, #6]
 800283e:	7053      	strb	r3, [r2, #1]
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	20000560 	.word	0x20000560

08002850 <ssd1306_enter>:

void ssd1306_enter()
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
    cursor.x = 0;
 8002854:	4b07      	ldr	r3, [pc, #28]	@ (8002874 <ssd1306_enter+0x24>)
 8002856:	2200      	movs	r2, #0
 8002858:	701a      	strb	r2, [r3, #0]
    cursor.y += current_font.height;
 800285a:	4b06      	ldr	r3, [pc, #24]	@ (8002874 <ssd1306_enter+0x24>)
 800285c:	785a      	ldrb	r2, [r3, #1]
 800285e:	4b06      	ldr	r3, [pc, #24]	@ (8002878 <ssd1306_enter+0x28>)
 8002860:	785b      	ldrb	r3, [r3, #1]
 8002862:	4413      	add	r3, r2
 8002864:	b2da      	uxtb	r2, r3
 8002866:	4b03      	ldr	r3, [pc, #12]	@ (8002874 <ssd1306_enter+0x24>)
 8002868:	705a      	strb	r2, [r3, #1]
}
 800286a:	bf00      	nop
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	20000560 	.word	0x20000560
 8002878:	20000564 	.word	0x20000564

0800287c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002882:	4b0f      	ldr	r3, [pc, #60]	@ (80028c0 <HAL_MspInit+0x44>)
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	4a0e      	ldr	r2, [pc, #56]	@ (80028c0 <HAL_MspInit+0x44>)
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	6193      	str	r3, [r2, #24]
 800288e:	4b0c      	ldr	r3, [pc, #48]	@ (80028c0 <HAL_MspInit+0x44>)
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	607b      	str	r3, [r7, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800289a:	4b09      	ldr	r3, [pc, #36]	@ (80028c0 <HAL_MspInit+0x44>)
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	4a08      	ldr	r2, [pc, #32]	@ (80028c0 <HAL_MspInit+0x44>)
 80028a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028a4:	61d3      	str	r3, [r2, #28]
 80028a6:	4b06      	ldr	r3, [pc, #24]	@ (80028c0 <HAL_MspInit+0x44>)
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ae:	603b      	str	r3, [r7, #0]
 80028b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40021000 	.word	0x40021000

080028c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08a      	sub	sp, #40	@ 0x28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028cc:	f107 0314 	add.w	r3, r7, #20
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	605a      	str	r2, [r3, #4]
 80028d6:	609a      	str	r2, [r3, #8]
 80028d8:	60da      	str	r2, [r3, #12]
 80028da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a18      	ldr	r2, [pc, #96]	@ (8002944 <HAL_I2C_MspInit+0x80>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d129      	bne.n	800293a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e6:	4b18      	ldr	r3, [pc, #96]	@ (8002948 <HAL_I2C_MspInit+0x84>)
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	4a17      	ldr	r2, [pc, #92]	@ (8002948 <HAL_I2C_MspInit+0x84>)
 80028ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028f0:	6153      	str	r3, [r2, #20]
 80028f2:	4b15      	ldr	r3, [pc, #84]	@ (8002948 <HAL_I2C_MspInit+0x84>)
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028fa:	613b      	str	r3, [r7, #16]
 80028fc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA9     ------> I2C2_SCL
    PA10     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80028fe:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002904:	2312      	movs	r3, #18
 8002906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002908:	2300      	movs	r3, #0
 800290a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800290c:	2303      	movs	r3, #3
 800290e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002910:	2304      	movs	r3, #4
 8002912:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002914:	f107 0314 	add.w	r3, r7, #20
 8002918:	4619      	mov	r1, r3
 800291a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800291e:	f000 fa8f 	bl	8002e40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002922:	4b09      	ldr	r3, [pc, #36]	@ (8002948 <HAL_I2C_MspInit+0x84>)
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	4a08      	ldr	r2, [pc, #32]	@ (8002948 <HAL_I2C_MspInit+0x84>)
 8002928:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800292c:	61d3      	str	r3, [r2, #28]
 800292e:	4b06      	ldr	r3, [pc, #24]	@ (8002948 <HAL_I2C_MspInit+0x84>)
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800293a:	bf00      	nop
 800293c:	3728      	adds	r7, #40	@ 0x28
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40005800 	.word	0x40005800
 8002948:	40021000 	.word	0x40021000

0800294c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b08a      	sub	sp, #40	@ 0x28
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002954:	f107 0314 	add.w	r3, r7, #20
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	605a      	str	r2, [r3, #4]
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	60da      	str	r2, [r3, #12]
 8002962:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a25      	ldr	r2, [pc, #148]	@ (8002a00 <HAL_UART_MspInit+0xb4>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d144      	bne.n	80029f8 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800296e:	4b25      	ldr	r3, [pc, #148]	@ (8002a04 <HAL_UART_MspInit+0xb8>)
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	4a24      	ldr	r2, [pc, #144]	@ (8002a04 <HAL_UART_MspInit+0xb8>)
 8002974:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002978:	61d3      	str	r3, [r2, #28]
 800297a:	4b22      	ldr	r3, [pc, #136]	@ (8002a04 <HAL_UART_MspInit+0xb8>)
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002982:	613b      	str	r3, [r7, #16]
 8002984:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002986:	4b1f      	ldr	r3, [pc, #124]	@ (8002a04 <HAL_UART_MspInit+0xb8>)
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	4a1e      	ldr	r2, [pc, #120]	@ (8002a04 <HAL_UART_MspInit+0xb8>)
 800298c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002990:	6153      	str	r3, [r2, #20]
 8002992:	4b1c      	ldr	r3, [pc, #112]	@ (8002a04 <HAL_UART_MspInit+0xb8>)
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800299e:	4b19      	ldr	r3, [pc, #100]	@ (8002a04 <HAL_UART_MspInit+0xb8>)
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	4a18      	ldr	r2, [pc, #96]	@ (8002a04 <HAL_UART_MspInit+0xb8>)
 80029a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029a8:	6153      	str	r3, [r2, #20]
 80029aa:	4b16      	ldr	r3, [pc, #88]	@ (8002a04 <HAL_UART_MspInit+0xb8>)
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029b2:	60bb      	str	r3, [r7, #8]
 80029b4:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80029b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029bc:	2302      	movs	r3, #2
 80029be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029c4:	2303      	movs	r3, #3
 80029c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80029c8:	2305      	movs	r3, #5
 80029ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029cc:	f107 0314 	add.w	r3, r7, #20
 80029d0:	4619      	mov	r1, r3
 80029d2:	480d      	ldr	r0, [pc, #52]	@ (8002a08 <HAL_UART_MspInit+0xbc>)
 80029d4:	f000 fa34 	bl	8002e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80029d8:	2304      	movs	r3, #4
 80029da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029dc:	2302      	movs	r3, #2
 80029de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e0:	2300      	movs	r3, #0
 80029e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029e4:	2303      	movs	r3, #3
 80029e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80029e8:	2305      	movs	r3, #5
 80029ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029ec:	f107 0314 	add.w	r3, r7, #20
 80029f0:	4619      	mov	r1, r3
 80029f2:	4806      	ldr	r0, [pc, #24]	@ (8002a0c <HAL_UART_MspInit+0xc0>)
 80029f4:	f000 fa24 	bl	8002e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80029f8:	bf00      	nop
 80029fa:	3728      	adds	r7, #40	@ 0x28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40005000 	.word	0x40005000
 8002a04:	40021000 	.word	0x40021000
 8002a08:	48000800 	.word	0x48000800
 8002a0c:	48000c00 	.word	0x48000c00

08002a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a14:	bf00      	nop
 8002a16:	e7fd      	b.n	8002a14 <NMI_Handler+0x4>

08002a18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a1c:	bf00      	nop
 8002a1e:	e7fd      	b.n	8002a1c <HardFault_Handler+0x4>

08002a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a24:	bf00      	nop
 8002a26:	e7fd      	b.n	8002a24 <MemManage_Handler+0x4>

08002a28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a2c:	bf00      	nop
 8002a2e:	e7fd      	b.n	8002a2c <BusFault_Handler+0x4>

08002a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a34:	bf00      	nop
 8002a36:	e7fd      	b.n	8002a34 <UsageFault_Handler+0x4>

08002a38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a3c:	bf00      	nop
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a46:	b480      	push	{r7}
 8002a48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a4a:	bf00      	nop
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a58:	bf00      	nop
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a66:	f000 f895 	bl	8002b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a6a:	bf00      	nop
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002a72:	2020      	movs	r0, #32
 8002a74:	f000 fba8 	bl	80031c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002a78:	2040      	movs	r0, #64	@ 0x40
 8002a7a:	f000 fba5 	bl	80031c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002a7e:	2080      	movs	r0, #128	@ 0x80
 8002a80:	f000 fba2 	bl	80031c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002a84:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002a88:	f000 fb9e 	bl	80031c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002a8c:	bf00      	nop
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a94:	4b06      	ldr	r3, [pc, #24]	@ (8002ab0 <SystemInit+0x20>)
 8002a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a9a:	4a05      	ldr	r2, [pc, #20]	@ (8002ab0 <SystemInit+0x20>)
 8002a9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002aa0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002aa4:	bf00      	nop
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	e000ed00 	.word	0xe000ed00

08002ab4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002ab4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002aec <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ab8:	f7ff ffea 	bl	8002a90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002abc:	480c      	ldr	r0, [pc, #48]	@ (8002af0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002abe:	490d      	ldr	r1, [pc, #52]	@ (8002af4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ac0:	4a0d      	ldr	r2, [pc, #52]	@ (8002af8 <LoopForever+0xe>)
  movs r3, #0
 8002ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ac4:	e002      	b.n	8002acc <LoopCopyDataInit>

08002ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aca:	3304      	adds	r3, #4

08002acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ad0:	d3f9      	bcc.n	8002ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8002afc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ad4:	4c0a      	ldr	r4, [pc, #40]	@ (8002b00 <LoopForever+0x16>)
  movs r3, #0
 8002ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ad8:	e001      	b.n	8002ade <LoopFillZerobss>

08002ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002adc:	3204      	adds	r2, #4

08002ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ae0:	d3fb      	bcc.n	8002ada <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ae2:	f003 f9d3 	bl	8005e8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ae6:	f7fe ff53 	bl	8001990 <main>

08002aea <LoopForever>:

LoopForever:
    b LoopForever
 8002aea:	e7fe      	b.n	8002aea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002aec:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002af4:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8002af8:	08008028 	.word	0x08008028
  ldr r2, =_sbss
 8002afc:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 8002b00:	20000570 	.word	0x20000570

08002b04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b04:	e7fe      	b.n	8002b04 <ADC1_2_IRQHandler>
	...

08002b08 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b0c:	4b08      	ldr	r3, [pc, #32]	@ (8002b30 <HAL_Init+0x28>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a07      	ldr	r2, [pc, #28]	@ (8002b30 <HAL_Init+0x28>)
 8002b12:	f043 0310 	orr.w	r3, r3, #16
 8002b16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b18:	2003      	movs	r0, #3
 8002b1a:	f000 f94f 	bl	8002dbc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b1e:	200f      	movs	r0, #15
 8002b20:	f000 f808 	bl	8002b34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b24:	f7ff feaa 	bl	800287c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40022000 	.word	0x40022000

08002b34 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b3c:	4b12      	ldr	r3, [pc, #72]	@ (8002b88 <HAL_InitTick+0x54>)
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	4b12      	ldr	r3, [pc, #72]	@ (8002b8c <HAL_InitTick+0x58>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	4619      	mov	r1, r3
 8002b46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 f967 	bl	8002e26 <HAL_SYSTICK_Config>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e00e      	b.n	8002b80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b0f      	cmp	r3, #15
 8002b66:	d80a      	bhi.n	8002b7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b68:	2200      	movs	r2, #0
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b70:	f000 f92f 	bl	8002dd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b74:	4a06      	ldr	r2, [pc, #24]	@ (8002b90 <HAL_InitTick+0x5c>)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	e000      	b.n	8002b80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	20000040 	.word	0x20000040
 8002b8c:	20000048 	.word	0x20000048
 8002b90:	20000044 	.word	0x20000044

08002b94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b98:	4b06      	ldr	r3, [pc, #24]	@ (8002bb4 <HAL_IncTick+0x20>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4b06      	ldr	r3, [pc, #24]	@ (8002bb8 <HAL_IncTick+0x24>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	4a04      	ldr	r2, [pc, #16]	@ (8002bb8 <HAL_IncTick+0x24>)
 8002ba6:	6013      	str	r3, [r2, #0]
}
 8002ba8:	bf00      	nop
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	20000048 	.word	0x20000048
 8002bb8:	2000056c 	.word	0x2000056c

08002bbc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  return uwTick;  
 8002bc0:	4b03      	ldr	r3, [pc, #12]	@ (8002bd0 <HAL_GetTick+0x14>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	2000056c 	.word	0x2000056c

08002bd4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bdc:	f7ff ffee 	bl	8002bbc <HAL_GetTick>
 8002be0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002bec:	d005      	beq.n	8002bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bee:	4b0a      	ldr	r3, [pc, #40]	@ (8002c18 <HAL_Delay+0x44>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002bfa:	bf00      	nop
 8002bfc:	f7ff ffde 	bl	8002bbc <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d8f7      	bhi.n	8002bfc <HAL_Delay+0x28>
  {
  }
}
 8002c0c:	bf00      	nop
 8002c0e:	bf00      	nop
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	20000048 	.word	0x20000048

08002c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c60 <__NVIC_SetPriorityGrouping+0x44>)
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c38:	4013      	ands	r3, r2
 8002c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c4e:	4a04      	ldr	r2, [pc, #16]	@ (8002c60 <__NVIC_SetPriorityGrouping+0x44>)
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	60d3      	str	r3, [r2, #12]
}
 8002c54:	bf00      	nop
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	e000ed00 	.word	0xe000ed00

08002c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c68:	4b04      	ldr	r3, [pc, #16]	@ (8002c7c <__NVIC_GetPriorityGrouping+0x18>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	0a1b      	lsrs	r3, r3, #8
 8002c6e:	f003 0307 	and.w	r3, r3, #7
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr
 8002c7c:	e000ed00 	.word	0xe000ed00

08002c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	db0b      	blt.n	8002caa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	f003 021f 	and.w	r2, r3, #31
 8002c98:	4907      	ldr	r1, [pc, #28]	@ (8002cb8 <__NVIC_EnableIRQ+0x38>)
 8002c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9e:	095b      	lsrs	r3, r3, #5
 8002ca0:	2001      	movs	r0, #1
 8002ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	e000e100 	.word	0xe000e100

08002cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	6039      	str	r1, [r7, #0]
 8002cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	db0a      	blt.n	8002ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	b2da      	uxtb	r2, r3
 8002cd4:	490c      	ldr	r1, [pc, #48]	@ (8002d08 <__NVIC_SetPriority+0x4c>)
 8002cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cda:	0112      	lsls	r2, r2, #4
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	440b      	add	r3, r1
 8002ce0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ce4:	e00a      	b.n	8002cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	4908      	ldr	r1, [pc, #32]	@ (8002d0c <__NVIC_SetPriority+0x50>)
 8002cec:	79fb      	ldrb	r3, [r7, #7]
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	3b04      	subs	r3, #4
 8002cf4:	0112      	lsls	r2, r2, #4
 8002cf6:	b2d2      	uxtb	r2, r2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	761a      	strb	r2, [r3, #24]
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	e000e100 	.word	0xe000e100
 8002d0c:	e000ed00 	.word	0xe000ed00

08002d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b089      	sub	sp, #36	@ 0x24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	f1c3 0307 	rsb	r3, r3, #7
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	bf28      	it	cs
 8002d2e:	2304      	movcs	r3, #4
 8002d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	3304      	adds	r3, #4
 8002d36:	2b06      	cmp	r3, #6
 8002d38:	d902      	bls.n	8002d40 <NVIC_EncodePriority+0x30>
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	3b03      	subs	r3, #3
 8002d3e:	e000      	b.n	8002d42 <NVIC_EncodePriority+0x32>
 8002d40:	2300      	movs	r3, #0
 8002d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43da      	mvns	r2, r3
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	401a      	ands	r2, r3
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d58:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d62:	43d9      	mvns	r1, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d68:	4313      	orrs	r3, r2
         );
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3724      	adds	r7, #36	@ 0x24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
	...

08002d78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3b01      	subs	r3, #1
 8002d84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d88:	d301      	bcc.n	8002d8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e00f      	b.n	8002dae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002db8 <SysTick_Config+0x40>)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3b01      	subs	r3, #1
 8002d94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d96:	210f      	movs	r1, #15
 8002d98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002d9c:	f7ff ff8e 	bl	8002cbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002da0:	4b05      	ldr	r3, [pc, #20]	@ (8002db8 <SysTick_Config+0x40>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002da6:	4b04      	ldr	r3, [pc, #16]	@ (8002db8 <SysTick_Config+0x40>)
 8002da8:	2207      	movs	r2, #7
 8002daa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	e000e010 	.word	0xe000e010

08002dbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7ff ff29 	bl	8002c1c <__NVIC_SetPriorityGrouping>
}
 8002dca:	bf00      	nop
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b086      	sub	sp, #24
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	4603      	mov	r3, r0
 8002dda:	60b9      	str	r1, [r7, #8]
 8002ddc:	607a      	str	r2, [r7, #4]
 8002dde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002de0:	2300      	movs	r3, #0
 8002de2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002de4:	f7ff ff3e 	bl	8002c64 <__NVIC_GetPriorityGrouping>
 8002de8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	68b9      	ldr	r1, [r7, #8]
 8002dee:	6978      	ldr	r0, [r7, #20]
 8002df0:	f7ff ff8e 	bl	8002d10 <NVIC_EncodePriority>
 8002df4:	4602      	mov	r2, r0
 8002df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff ff5d 	bl	8002cbc <__NVIC_SetPriority>
}
 8002e02:	bf00      	nop
 8002e04:	3718      	adds	r7, #24
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b082      	sub	sp, #8
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	4603      	mov	r3, r0
 8002e12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff ff31 	bl	8002c80 <__NVIC_EnableIRQ>
}
 8002e1e:	bf00      	nop
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b082      	sub	sp, #8
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7ff ffa2 	bl	8002d78 <SysTick_Config>
 8002e34:	4603      	mov	r3, r0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
	...

08002e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b087      	sub	sp, #28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e4e:	e154      	b.n	80030fa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	2101      	movs	r1, #1
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 8146 	beq.w	80030f4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f003 0303 	and.w	r3, r3, #3
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d005      	beq.n	8002e80 <HAL_GPIO_Init+0x40>
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f003 0303 	and.w	r3, r3, #3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d130      	bne.n	8002ee2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	2203      	movs	r2, #3
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	43db      	mvns	r3, r3
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	4013      	ands	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	091b      	lsrs	r3, r3, #4
 8002ecc:	f003 0201 	and.w	r2, r3, #1
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	2b03      	cmp	r3, #3
 8002eec:	d017      	beq.n	8002f1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	2203      	movs	r2, #3
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43db      	mvns	r3, r3
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	4013      	ands	r3, r2
 8002f04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f003 0303 	and.w	r3, r3, #3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d123      	bne.n	8002f72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	08da      	lsrs	r2, r3, #3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	3208      	adds	r2, #8
 8002f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	220f      	movs	r2, #15
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	43db      	mvns	r3, r3
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	691a      	ldr	r2, [r3, #16]
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	08da      	lsrs	r2, r3, #3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3208      	adds	r2, #8
 8002f6c:	6939      	ldr	r1, [r7, #16]
 8002f6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	2203      	movs	r2, #3
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43db      	mvns	r3, r3
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	4013      	ands	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f003 0203 	and.w	r2, r3, #3
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 80a0 	beq.w	80030f4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fb4:	4b58      	ldr	r3, [pc, #352]	@ (8003118 <HAL_GPIO_Init+0x2d8>)
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	4a57      	ldr	r2, [pc, #348]	@ (8003118 <HAL_GPIO_Init+0x2d8>)
 8002fba:	f043 0301 	orr.w	r3, r3, #1
 8002fbe:	6193      	str	r3, [r2, #24]
 8002fc0:	4b55      	ldr	r3, [pc, #340]	@ (8003118 <HAL_GPIO_Init+0x2d8>)
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	60bb      	str	r3, [r7, #8]
 8002fca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002fcc:	4a53      	ldr	r2, [pc, #332]	@ (800311c <HAL_GPIO_Init+0x2dc>)
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	089b      	lsrs	r3, r3, #2
 8002fd2:	3302      	adds	r3, #2
 8002fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	f003 0303 	and.w	r3, r3, #3
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	220f      	movs	r2, #15
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	4013      	ands	r3, r2
 8002fee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002ff6:	d019      	beq.n	800302c <HAL_GPIO_Init+0x1ec>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a49      	ldr	r2, [pc, #292]	@ (8003120 <HAL_GPIO_Init+0x2e0>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d013      	beq.n	8003028 <HAL_GPIO_Init+0x1e8>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a48      	ldr	r2, [pc, #288]	@ (8003124 <HAL_GPIO_Init+0x2e4>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d00d      	beq.n	8003024 <HAL_GPIO_Init+0x1e4>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a47      	ldr	r2, [pc, #284]	@ (8003128 <HAL_GPIO_Init+0x2e8>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d007      	beq.n	8003020 <HAL_GPIO_Init+0x1e0>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a46      	ldr	r2, [pc, #280]	@ (800312c <HAL_GPIO_Init+0x2ec>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d101      	bne.n	800301c <HAL_GPIO_Init+0x1dc>
 8003018:	2304      	movs	r3, #4
 800301a:	e008      	b.n	800302e <HAL_GPIO_Init+0x1ee>
 800301c:	2305      	movs	r3, #5
 800301e:	e006      	b.n	800302e <HAL_GPIO_Init+0x1ee>
 8003020:	2303      	movs	r3, #3
 8003022:	e004      	b.n	800302e <HAL_GPIO_Init+0x1ee>
 8003024:	2302      	movs	r3, #2
 8003026:	e002      	b.n	800302e <HAL_GPIO_Init+0x1ee>
 8003028:	2301      	movs	r3, #1
 800302a:	e000      	b.n	800302e <HAL_GPIO_Init+0x1ee>
 800302c:	2300      	movs	r3, #0
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	f002 0203 	and.w	r2, r2, #3
 8003034:	0092      	lsls	r2, r2, #2
 8003036:	4093      	lsls	r3, r2
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	4313      	orrs	r3, r2
 800303c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800303e:	4937      	ldr	r1, [pc, #220]	@ (800311c <HAL_GPIO_Init+0x2dc>)
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	089b      	lsrs	r3, r3, #2
 8003044:	3302      	adds	r3, #2
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800304c:	4b38      	ldr	r3, [pc, #224]	@ (8003130 <HAL_GPIO_Init+0x2f0>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	43db      	mvns	r3, r3
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	4013      	ands	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	4313      	orrs	r3, r2
 800306e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003070:	4a2f      	ldr	r2, [pc, #188]	@ (8003130 <HAL_GPIO_Init+0x2f0>)
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003076:	4b2e      	ldr	r3, [pc, #184]	@ (8003130 <HAL_GPIO_Init+0x2f0>)
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	43db      	mvns	r3, r3
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	4013      	ands	r3, r2
 8003084:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	4313      	orrs	r3, r2
 8003098:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800309a:	4a25      	ldr	r2, [pc, #148]	@ (8003130 <HAL_GPIO_Init+0x2f0>)
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030a0:	4b23      	ldr	r3, [pc, #140]	@ (8003130 <HAL_GPIO_Init+0x2f0>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	43db      	mvns	r3, r3
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	4013      	ands	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d003      	beq.n	80030c4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80030c4:	4a1a      	ldr	r2, [pc, #104]	@ (8003130 <HAL_GPIO_Init+0x2f0>)
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030ca:	4b19      	ldr	r3, [pc, #100]	@ (8003130 <HAL_GPIO_Init+0x2f0>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	43db      	mvns	r3, r3
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	4013      	ands	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80030ee:	4a10      	ldr	r2, [pc, #64]	@ (8003130 <HAL_GPIO_Init+0x2f0>)
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	3301      	adds	r3, #1
 80030f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	fa22 f303 	lsr.w	r3, r2, r3
 8003104:	2b00      	cmp	r3, #0
 8003106:	f47f aea3 	bne.w	8002e50 <HAL_GPIO_Init+0x10>
  }
}
 800310a:	bf00      	nop
 800310c:	bf00      	nop
 800310e:	371c      	adds	r7, #28
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	40021000 	.word	0x40021000
 800311c:	40010000 	.word	0x40010000
 8003120:	48000400 	.word	0x48000400
 8003124:	48000800 	.word	0x48000800
 8003128:	48000c00 	.word	0x48000c00
 800312c:	48001000 	.word	0x48001000
 8003130:	40010400 	.word	0x40010400

08003134 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	691a      	ldr	r2, [r3, #16]
 8003144:	887b      	ldrh	r3, [r7, #2]
 8003146:	4013      	ands	r3, r2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d002      	beq.n	8003152 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800314c:	2301      	movs	r3, #1
 800314e:	73fb      	strb	r3, [r7, #15]
 8003150:	e001      	b.n	8003156 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003152:	2300      	movs	r3, #0
 8003154:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003156:	7bfb      	ldrb	r3, [r7, #15]
}
 8003158:	4618      	mov	r0, r3
 800315a:	3714      	adds	r7, #20
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	460b      	mov	r3, r1
 800316e:	807b      	strh	r3, [r7, #2]
 8003170:	4613      	mov	r3, r2
 8003172:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003174:	787b      	ldrb	r3, [r7, #1]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800317a:	887a      	ldrh	r2, [r7, #2]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003180:	e002      	b.n	8003188 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003182:	887a      	ldrh	r2, [r7, #2]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	460b      	mov	r3, r1
 800319e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031a6:	887a      	ldrh	r2, [r7, #2]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	4013      	ands	r3, r2
 80031ac:	041a      	lsls	r2, r3, #16
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	43d9      	mvns	r1, r3
 80031b2:	887b      	ldrh	r3, [r7, #2]
 80031b4:	400b      	ands	r3, r1
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	619a      	str	r2, [r3, #24]
}
 80031bc:	bf00      	nop
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4603      	mov	r3, r0
 80031d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80031d2:	4b08      	ldr	r3, [pc, #32]	@ (80031f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031d4:	695a      	ldr	r2, [r3, #20]
 80031d6:	88fb      	ldrh	r3, [r7, #6]
 80031d8:	4013      	ands	r3, r2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d006      	beq.n	80031ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031de:	4a05      	ldr	r2, [pc, #20]	@ (80031f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031e0:	88fb      	ldrh	r3, [r7, #6]
 80031e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031e4:	88fb      	ldrh	r3, [r7, #6]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fe ff82 	bl	80020f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80031ec:	bf00      	nop
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40010400 	.word	0x40010400

080031f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e08d      	b.n	8003326 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d106      	bne.n	8003224 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7ff fb50 	bl	80028c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2224      	movs	r2, #36	@ 0x24
 8003228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0201 	bic.w	r2, r2, #1
 800323a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003248:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003258:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d107      	bne.n	8003272 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800326e:	609a      	str	r2, [r3, #8]
 8003270:	e006      	b.n	8003280 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800327e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	2b02      	cmp	r3, #2
 8003286:	d108      	bne.n	800329a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003296:	605a      	str	r2, [r3, #4]
 8003298:	e007      	b.n	80032aa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6812      	ldr	r2, [r2, #0]
 80032b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80032b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68da      	ldr	r2, [r3, #12]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691a      	ldr	r2, [r3, #16]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	69d9      	ldr	r1, [r3, #28]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a1a      	ldr	r2, [r3, #32]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f042 0201 	orr.w	r2, r2, #1
 8003306:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2220      	movs	r2, #32
 8003312:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
	...

08003330 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b088      	sub	sp, #32
 8003334:	af02      	add	r7, sp, #8
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	4608      	mov	r0, r1
 800333a:	4611      	mov	r1, r2
 800333c:	461a      	mov	r2, r3
 800333e:	4603      	mov	r3, r0
 8003340:	817b      	strh	r3, [r7, #10]
 8003342:	460b      	mov	r3, r1
 8003344:	813b      	strh	r3, [r7, #8]
 8003346:	4613      	mov	r3, r2
 8003348:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b20      	cmp	r3, #32
 8003354:	f040 80f9 	bne.w	800354a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003358:	6a3b      	ldr	r3, [r7, #32]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <HAL_I2C_Mem_Write+0x34>
 800335e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003360:	2b00      	cmp	r3, #0
 8003362:	d105      	bne.n	8003370 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800336a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e0ed      	b.n	800354c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003376:	2b01      	cmp	r3, #1
 8003378:	d101      	bne.n	800337e <HAL_I2C_Mem_Write+0x4e>
 800337a:	2302      	movs	r3, #2
 800337c:	e0e6      	b.n	800354c <HAL_I2C_Mem_Write+0x21c>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003386:	f7ff fc19 	bl	8002bbc <HAL_GetTick>
 800338a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	2319      	movs	r3, #25
 8003392:	2201      	movs	r2, #1
 8003394:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f000 f955 	bl	8003648 <I2C_WaitOnFlagUntilTimeout>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e0d1      	b.n	800354c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2221      	movs	r2, #33	@ 0x21
 80033ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2240      	movs	r2, #64	@ 0x40
 80033b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6a3a      	ldr	r2, [r7, #32]
 80033c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80033c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033d0:	88f8      	ldrh	r0, [r7, #6]
 80033d2:	893a      	ldrh	r2, [r7, #8]
 80033d4:	8979      	ldrh	r1, [r7, #10]
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	9301      	str	r3, [sp, #4]
 80033da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033dc:	9300      	str	r3, [sp, #0]
 80033de:	4603      	mov	r3, r0
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f000 f8b9 	bl	8003558 <I2C_RequestMemoryWrite>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d005      	beq.n	80033f8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e0a9      	b.n	800354c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	2bff      	cmp	r3, #255	@ 0xff
 8003400:	d90e      	bls.n	8003420 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	22ff      	movs	r2, #255	@ 0xff
 8003406:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800340c:	b2da      	uxtb	r2, r3
 800340e:	8979      	ldrh	r1, [r7, #10]
 8003410:	2300      	movs	r3, #0
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 fad9 	bl	80039d0 <I2C_TransferConfig>
 800341e:	e00f      	b.n	8003440 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003424:	b29a      	uxth	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800342e:	b2da      	uxtb	r2, r3
 8003430:	8979      	ldrh	r1, [r7, #10]
 8003432:	2300      	movs	r3, #0
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 fac8 	bl	80039d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 f958 	bl	80036fa <I2C_WaitOnTXISFlagUntilTimeout>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e07b      	b.n	800354c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003458:	781a      	ldrb	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003464:	1c5a      	adds	r2, r3, #1
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800346e:	b29b      	uxth	r3, r3
 8003470:	3b01      	subs	r3, #1
 8003472:	b29a      	uxth	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800347c:	3b01      	subs	r3, #1
 800347e:	b29a      	uxth	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003488:	b29b      	uxth	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d034      	beq.n	80034f8 <HAL_I2C_Mem_Write+0x1c8>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003492:	2b00      	cmp	r3, #0
 8003494:	d130      	bne.n	80034f8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800349c:	2200      	movs	r2, #0
 800349e:	2180      	movs	r1, #128	@ 0x80
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f000 f8d1 	bl	8003648 <I2C_WaitOnFlagUntilTimeout>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e04d      	b.n	800354c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	2bff      	cmp	r3, #255	@ 0xff
 80034b8:	d90e      	bls.n	80034d8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	22ff      	movs	r2, #255	@ 0xff
 80034be:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	8979      	ldrh	r1, [r7, #10]
 80034c8:	2300      	movs	r3, #0
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 fa7d 	bl	80039d0 <I2C_TransferConfig>
 80034d6:	e00f      	b.n	80034f8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034dc:	b29a      	uxth	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	8979      	ldrh	r1, [r7, #10]
 80034ea:	2300      	movs	r3, #0
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f000 fa6c 	bl	80039d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d19e      	bne.n	8003440 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f000 f93e 	bl	8003788 <I2C_WaitOnSTOPFlagUntilTimeout>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e01a      	b.n	800354c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2220      	movs	r2, #32
 800351c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6859      	ldr	r1, [r3, #4]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	4b0a      	ldr	r3, [pc, #40]	@ (8003554 <HAL_I2C_Mem_Write+0x224>)
 800352a:	400b      	ands	r3, r1
 800352c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2220      	movs	r2, #32
 8003532:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003546:	2300      	movs	r3, #0
 8003548:	e000      	b.n	800354c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800354a:	2302      	movs	r3, #2
  }
}
 800354c:	4618      	mov	r0, r3
 800354e:	3718      	adds	r7, #24
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	fe00e800 	.word	0xfe00e800

08003558 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af02      	add	r7, sp, #8
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	4608      	mov	r0, r1
 8003562:	4611      	mov	r1, r2
 8003564:	461a      	mov	r2, r3
 8003566:	4603      	mov	r3, r0
 8003568:	817b      	strh	r3, [r7, #10]
 800356a:	460b      	mov	r3, r1
 800356c:	813b      	strh	r3, [r7, #8]
 800356e:	4613      	mov	r3, r2
 8003570:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003572:	88fb      	ldrh	r3, [r7, #6]
 8003574:	b2da      	uxtb	r2, r3
 8003576:	8979      	ldrh	r1, [r7, #10]
 8003578:	4b20      	ldr	r3, [pc, #128]	@ (80035fc <I2C_RequestMemoryWrite+0xa4>)
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 fa25 	bl	80039d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003586:	69fa      	ldr	r2, [r7, #28]
 8003588:	69b9      	ldr	r1, [r7, #24]
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 f8b5 	bl	80036fa <I2C_WaitOnTXISFlagUntilTimeout>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e02c      	b.n	80035f4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800359a:	88fb      	ldrh	r3, [r7, #6]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d105      	bne.n	80035ac <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035a0:	893b      	ldrh	r3, [r7, #8]
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	629a      	str	r2, [r3, #40]	@ 0x28
 80035aa:	e015      	b.n	80035d8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80035ac:	893b      	ldrh	r3, [r7, #8]
 80035ae:	0a1b      	lsrs	r3, r3, #8
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	b2da      	uxtb	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ba:	69fa      	ldr	r2, [r7, #28]
 80035bc:	69b9      	ldr	r1, [r7, #24]
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 f89b 	bl	80036fa <I2C_WaitOnTXISFlagUntilTimeout>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e012      	b.n	80035f4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035ce:	893b      	ldrh	r3, [r7, #8]
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	2200      	movs	r2, #0
 80035e0:	2180      	movs	r1, #128	@ 0x80
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 f830 	bl	8003648 <I2C_WaitOnFlagUntilTimeout>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e000      	b.n	80035f4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	80002000 	.word	0x80002000

08003600 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b02      	cmp	r3, #2
 8003614:	d103      	bne.n	800361e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2200      	movs	r2, #0
 800361c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b01      	cmp	r3, #1
 800362a:	d007      	beq.n	800363c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	699a      	ldr	r2, [r3, #24]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 0201 	orr.w	r2, r2, #1
 800363a:	619a      	str	r2, [r3, #24]
  }
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	603b      	str	r3, [r7, #0]
 8003654:	4613      	mov	r3, r2
 8003656:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003658:	e03b      	b.n	80036d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	6839      	ldr	r1, [r7, #0]
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 f8d6 	bl	8003810 <I2C_IsErrorOccurred>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e041      	b.n	80036f2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003674:	d02d      	beq.n	80036d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003676:	f7ff faa1 	bl	8002bbc <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	429a      	cmp	r2, r3
 8003684:	d302      	bcc.n	800368c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d122      	bne.n	80036d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699a      	ldr	r2, [r3, #24]
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	4013      	ands	r3, r2
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	429a      	cmp	r2, r3
 800369a:	bf0c      	ite	eq
 800369c:	2301      	moveq	r3, #1
 800369e:	2300      	movne	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	461a      	mov	r2, r3
 80036a4:	79fb      	ldrb	r3, [r7, #7]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d113      	bne.n	80036d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ae:	f043 0220 	orr.w	r2, r3, #32
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2220      	movs	r2, #32
 80036ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e00f      	b.n	80036f2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	699a      	ldr	r2, [r3, #24]
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	4013      	ands	r3, r2
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	429a      	cmp	r2, r3
 80036e0:	bf0c      	ite	eq
 80036e2:	2301      	moveq	r3, #1
 80036e4:	2300      	movne	r3, #0
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	461a      	mov	r2, r3
 80036ea:	79fb      	ldrb	r3, [r7, #7]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d0b4      	beq.n	800365a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b084      	sub	sp, #16
 80036fe:	af00      	add	r7, sp, #0
 8003700:	60f8      	str	r0, [r7, #12]
 8003702:	60b9      	str	r1, [r7, #8]
 8003704:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003706:	e033      	b.n	8003770 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	68b9      	ldr	r1, [r7, #8]
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 f87f 	bl	8003810 <I2C_IsErrorOccurred>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e031      	b.n	8003780 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003722:	d025      	beq.n	8003770 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003724:	f7ff fa4a 	bl	8002bbc <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	429a      	cmp	r2, r3
 8003732:	d302      	bcc.n	800373a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d11a      	bne.n	8003770 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b02      	cmp	r3, #2
 8003746:	d013      	beq.n	8003770 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374c:	f043 0220 	orr.w	r2, r3, #32
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2220      	movs	r2, #32
 8003758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e007      	b.n	8003780 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b02      	cmp	r3, #2
 800377c:	d1c4      	bne.n	8003708 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003794:	e02f      	b.n	80037f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	68b9      	ldr	r1, [r7, #8]
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 f838 	bl	8003810 <I2C_IsErrorOccurred>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e02d      	b.n	8003806 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037aa:	f7ff fa07 	bl	8002bbc <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	68ba      	ldr	r2, [r7, #8]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d302      	bcc.n	80037c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d11a      	bne.n	80037f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	f003 0320 	and.w	r3, r3, #32
 80037ca:	2b20      	cmp	r3, #32
 80037cc:	d013      	beq.n	80037f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037d2:	f043 0220 	orr.w	r2, r3, #32
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2220      	movs	r2, #32
 80037de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e007      	b.n	8003806 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	f003 0320 	and.w	r3, r3, #32
 8003800:	2b20      	cmp	r3, #32
 8003802:	d1c8      	bne.n	8003796 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
	...

08003810 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b08a      	sub	sp, #40	@ 0x28
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800381c:	2300      	movs	r3, #0
 800381e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800382a:	2300      	movs	r3, #0
 800382c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	f003 0310 	and.w	r3, r3, #16
 8003838:	2b00      	cmp	r3, #0
 800383a:	d068      	beq.n	800390e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2210      	movs	r2, #16
 8003842:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003844:	e049      	b.n	80038da <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800384c:	d045      	beq.n	80038da <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800384e:	f7ff f9b5 	bl	8002bbc <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	429a      	cmp	r2, r3
 800385c:	d302      	bcc.n	8003864 <I2C_IsErrorOccurred+0x54>
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d13a      	bne.n	80038da <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800386e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003876:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003882:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003886:	d121      	bne.n	80038cc <I2C_IsErrorOccurred+0xbc>
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800388e:	d01d      	beq.n	80038cc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003890:	7cfb      	ldrb	r3, [r7, #19]
 8003892:	2b20      	cmp	r3, #32
 8003894:	d01a      	beq.n	80038cc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038a4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80038a6:	f7ff f989 	bl	8002bbc <HAL_GetTick>
 80038aa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038ac:	e00e      	b.n	80038cc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80038ae:	f7ff f985 	bl	8002bbc <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b19      	cmp	r3, #25
 80038ba:	d907      	bls.n	80038cc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	f043 0320 	orr.w	r3, r3, #32
 80038c2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80038ca:	e006      	b.n	80038da <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	f003 0320 	and.w	r3, r3, #32
 80038d6:	2b20      	cmp	r3, #32
 80038d8:	d1e9      	bne.n	80038ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	f003 0320 	and.w	r3, r3, #32
 80038e4:	2b20      	cmp	r3, #32
 80038e6:	d003      	beq.n	80038f0 <I2C_IsErrorOccurred+0xe0>
 80038e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0aa      	beq.n	8003846 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80038f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d103      	bne.n	8003900 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2220      	movs	r2, #32
 80038fe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	f043 0304 	orr.w	r3, r3, #4
 8003906:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00b      	beq.n	8003938 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003920:	6a3b      	ldr	r3, [r7, #32]
 8003922:	f043 0301 	orr.w	r3, r3, #1
 8003926:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003930:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00b      	beq.n	800395a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003942:	6a3b      	ldr	r3, [r7, #32]
 8003944:	f043 0308 	orr.w	r3, r3, #8
 8003948:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003952:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00b      	beq.n	800397c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003964:	6a3b      	ldr	r3, [r7, #32]
 8003966:	f043 0302 	orr.w	r3, r3, #2
 800396a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003974:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800397c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003980:	2b00      	cmp	r3, #0
 8003982:	d01c      	beq.n	80039be <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f7ff fe3b 	bl	8003600 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	6859      	ldr	r1, [r3, #4]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	4b0d      	ldr	r3, [pc, #52]	@ (80039cc <I2C_IsErrorOccurred+0x1bc>)
 8003996:	400b      	ands	r3, r1
 8003998:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	431a      	orrs	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2220      	movs	r2, #32
 80039aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80039be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3728      	adds	r7, #40	@ 0x28
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	fe00e800 	.word	0xfe00e800

080039d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b087      	sub	sp, #28
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	607b      	str	r3, [r7, #4]
 80039da:	460b      	mov	r3, r1
 80039dc:	817b      	strh	r3, [r7, #10]
 80039de:	4613      	mov	r3, r2
 80039e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039e2:	897b      	ldrh	r3, [r7, #10]
 80039e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80039e8:	7a7b      	ldrb	r3, [r7, #9]
 80039ea:	041b      	lsls	r3, r3, #16
 80039ec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039f0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80039fe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	6a3b      	ldr	r3, [r7, #32]
 8003a08:	0d5b      	lsrs	r3, r3, #21
 8003a0a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003a0e:	4b08      	ldr	r3, [pc, #32]	@ (8003a30 <I2C_TransferConfig+0x60>)
 8003a10:	430b      	orrs	r3, r1
 8003a12:	43db      	mvns	r3, r3
 8003a14:	ea02 0103 	and.w	r1, r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003a22:	bf00      	nop
 8003a24:	371c      	adds	r7, #28
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	03ff63ff 	.word	0x03ff63ff

08003a34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b20      	cmp	r3, #32
 8003a48:	d138      	bne.n	8003abc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d101      	bne.n	8003a58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a54:	2302      	movs	r3, #2
 8003a56:	e032      	b.n	8003abe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2224      	movs	r2, #36	@ 0x24
 8003a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0201 	bic.w	r2, r2, #1
 8003a76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003a86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6819      	ldr	r1, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 0201 	orr.w	r2, r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	e000      	b.n	8003abe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003abc:	2302      	movs	r3, #2
  }
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b085      	sub	sp, #20
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
 8003ad2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b20      	cmp	r3, #32
 8003ade:	d139      	bne.n	8003b54 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d101      	bne.n	8003aee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003aea:	2302      	movs	r3, #2
 8003aec:	e033      	b.n	8003b56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2224      	movs	r2, #36	@ 0x24
 8003afa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0201 	bic.w	r2, r2, #1
 8003b0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003b1c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	021b      	lsls	r3, r3, #8
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 0201 	orr.w	r2, r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2220      	movs	r2, #32
 8003b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b50:	2300      	movs	r3, #0
 8003b52:	e000      	b.n	8003b56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b54:	2302      	movs	r3, #2
  }
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
	...

08003b64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b74:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d102      	bne.n	8003b8a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	f001 b823 	b.w	8004bd0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b8e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 817d 	beq.w	8003e9a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003ba0:	4bbc      	ldr	r3, [pc, #752]	@ (8003e94 <HAL_RCC_OscConfig+0x330>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f003 030c 	and.w	r3, r3, #12
 8003ba8:	2b04      	cmp	r3, #4
 8003baa:	d00c      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003bac:	4bb9      	ldr	r3, [pc, #740]	@ (8003e94 <HAL_RCC_OscConfig+0x330>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f003 030c 	and.w	r3, r3, #12
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d15c      	bne.n	8003c72 <HAL_RCC_OscConfig+0x10e>
 8003bb8:	4bb6      	ldr	r3, [pc, #728]	@ (8003e94 <HAL_RCC_OscConfig+0x330>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bc4:	d155      	bne.n	8003c72 <HAL_RCC_OscConfig+0x10e>
 8003bc6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003bca:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bce:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8003bd2:	fa93 f3a3 	rbit	r3, r3
 8003bd6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003bda:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bde:	fab3 f383 	clz	r3, r3
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	095b      	lsrs	r3, r3, #5
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	f043 0301 	orr.w	r3, r3, #1
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d102      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x94>
 8003bf2:	4ba8      	ldr	r3, [pc, #672]	@ (8003e94 <HAL_RCC_OscConfig+0x330>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	e015      	b.n	8003c24 <HAL_RCC_OscConfig+0xc0>
 8003bf8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003bfc:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c00:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003c04:	fa93 f3a3 	rbit	r3, r3
 8003c08:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003c0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c10:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003c14:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003c18:	fa93 f3a3 	rbit	r3, r3
 8003c1c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003c20:	4b9c      	ldr	r3, [pc, #624]	@ (8003e94 <HAL_RCC_OscConfig+0x330>)
 8003c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c24:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003c28:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003c2c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003c30:	fa92 f2a2 	rbit	r2, r2
 8003c34:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8003c38:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003c3c:	fab2 f282 	clz	r2, r2
 8003c40:	b2d2      	uxtb	r2, r2
 8003c42:	f042 0220 	orr.w	r2, r2, #32
 8003c46:	b2d2      	uxtb	r2, r2
 8003c48:	f002 021f 	and.w	r2, r2, #31
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c52:	4013      	ands	r3, r2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 811f 	beq.w	8003e98 <HAL_RCC_OscConfig+0x334>
 8003c5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f040 8116 	bne.w	8003e98 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	f000 bfaf 	b.w	8004bd0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c82:	d106      	bne.n	8003c92 <HAL_RCC_OscConfig+0x12e>
 8003c84:	4b83      	ldr	r3, [pc, #524]	@ (8003e94 <HAL_RCC_OscConfig+0x330>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a82      	ldr	r2, [pc, #520]	@ (8003e94 <HAL_RCC_OscConfig+0x330>)
 8003c8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c8e:	6013      	str	r3, [r2, #0]
 8003c90:	e036      	b.n	8003d00 <HAL_RCC_OscConfig+0x19c>
 8003c92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c96:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10c      	bne.n	8003cbc <HAL_RCC_OscConfig+0x158>
 8003ca2:	4b7c      	ldr	r3, [pc, #496]	@ (8003e94 <HAL_RCC_OscConfig+0x330>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a7b      	ldr	r2, [pc, #492]	@ (8003e94 <HAL_RCC_OscConfig+0x330>)
 8003ca8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cac:	6013      	str	r3, [r2, #0]
 8003cae:	4b79      	ldr	r3, [pc, #484]	@ (8003e94 <HAL_RCC_OscConfig+0x330>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a78      	ldr	r2, [pc, #480]	@ (8003e94 <HAL_RCC_OscConfig+0x330>)
 8003cb4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	e021      	b.n	8003d00 <HAL_RCC_OscConfig+0x19c>
 8003cbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cc0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ccc:	d10c      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x184>
 8003cce:	4b71      	ldr	r3, [pc, #452]	@ (8003e94 <HAL_RCC_OscConfig+0x330>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a70      	ldr	r2, [pc, #448]	@ (8003e94 <HAL_RCC_OscConfig+0x330>)
 8003cd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cd8:	6013      	str	r3, [r2, #0]
 8003cda:	4b6e      	ldr	r3, [pc, #440]	@ (8003e94 <HAL_RCC_OscConfig+0x330>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a6d      	ldr	r2, [pc, #436]	@ (8003e94 <HAL_RCC_OscConfig+0x330>)
 8003ce0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ce4:	6013      	str	r3, [r2, #0]
 8003ce6:	e00b      	b.n	8003d00 <HAL_RCC_OscConfig+0x19c>
 8003ce8:	4b6a      	ldr	r3, [pc, #424]	@ (8003e94 <HAL_RCC_OscConfig+0x330>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a69      	ldr	r2, [pc, #420]	@ (8003e94 <HAL_RCC_OscConfig+0x330>)
 8003cee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cf2:	6013      	str	r3, [r2, #0]
 8003cf4:	4b67      	ldr	r3, [pc, #412]	@ (8003e94 <HAL_RCC_OscConfig+0x330>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a66      	ldr	r2, [pc, #408]	@ (8003e94 <HAL_RCC_OscConfig+0x330>)
 8003cfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cfe:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d00:	4b64      	ldr	r3, [pc, #400]	@ (8003e94 <HAL_RCC_OscConfig+0x330>)
 8003d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d04:	f023 020f 	bic.w	r2, r3, #15
 8003d08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d0c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	495f      	ldr	r1, [pc, #380]	@ (8003e94 <HAL_RCC_OscConfig+0x330>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d059      	beq.n	8003dde <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d2a:	f7fe ff47 	bl	8002bbc <HAL_GetTick>
 8003d2e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d32:	e00a      	b.n	8003d4a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d34:	f7fe ff42 	bl	8002bbc <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b64      	cmp	r3, #100	@ 0x64
 8003d42:	d902      	bls.n	8003d4a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	f000 bf43 	b.w	8004bd0 <HAL_RCC_OscConfig+0x106c>
 8003d4a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d4e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d52:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003d56:	fa93 f3a3 	rbit	r3, r3
 8003d5a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003d5e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d62:	fab3 f383 	clz	r3, r3
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	095b      	lsrs	r3, r3, #5
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	f043 0301 	orr.w	r3, r3, #1
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d102      	bne.n	8003d7c <HAL_RCC_OscConfig+0x218>
 8003d76:	4b47      	ldr	r3, [pc, #284]	@ (8003e94 <HAL_RCC_OscConfig+0x330>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	e015      	b.n	8003da8 <HAL_RCC_OscConfig+0x244>
 8003d7c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d80:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d84:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003d88:	fa93 f3a3 	rbit	r3, r3
 8003d8c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003d90:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d94:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003d98:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003d9c:	fa93 f3a3 	rbit	r3, r3
 8003da0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003da4:	4b3b      	ldr	r3, [pc, #236]	@ (8003e94 <HAL_RCC_OscConfig+0x330>)
 8003da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003dac:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003db0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003db4:	fa92 f2a2 	rbit	r2, r2
 8003db8:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003dbc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003dc0:	fab2 f282 	clz	r2, r2
 8003dc4:	b2d2      	uxtb	r2, r2
 8003dc6:	f042 0220 	orr.w	r2, r2, #32
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	f002 021f 	and.w	r2, r2, #31
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0ab      	beq.n	8003d34 <HAL_RCC_OscConfig+0x1d0>
 8003ddc:	e05d      	b.n	8003e9a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dde:	f7fe feed 	bl	8002bbc <HAL_GetTick>
 8003de2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003de6:	e00a      	b.n	8003dfe <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003de8:	f7fe fee8 	bl	8002bbc <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b64      	cmp	r3, #100	@ 0x64
 8003df6:	d902      	bls.n	8003dfe <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	f000 bee9 	b.w	8004bd0 <HAL_RCC_OscConfig+0x106c>
 8003dfe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e02:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e06:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003e0a:	fa93 f3a3 	rbit	r3, r3
 8003e0e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8003e12:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e16:	fab3 f383 	clz	r3, r3
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	095b      	lsrs	r3, r3, #5
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	f043 0301 	orr.w	r3, r3, #1
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d102      	bne.n	8003e30 <HAL_RCC_OscConfig+0x2cc>
 8003e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8003e94 <HAL_RCC_OscConfig+0x330>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	e015      	b.n	8003e5c <HAL_RCC_OscConfig+0x2f8>
 8003e30:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e34:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e38:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003e3c:	fa93 f3a3 	rbit	r3, r3
 8003e40:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003e44:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e48:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003e4c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003e50:	fa93 f3a3 	rbit	r3, r3
 8003e54:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003e58:	4b0e      	ldr	r3, [pc, #56]	@ (8003e94 <HAL_RCC_OscConfig+0x330>)
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003e60:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003e64:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003e68:	fa92 f2a2 	rbit	r2, r2
 8003e6c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003e70:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003e74:	fab2 f282 	clz	r2, r2
 8003e78:	b2d2      	uxtb	r2, r2
 8003e7a:	f042 0220 	orr.w	r2, r2, #32
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	f002 021f 	and.w	r2, r2, #31
 8003e84:	2101      	movs	r1, #1
 8003e86:	fa01 f202 	lsl.w	r2, r1, r2
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1ab      	bne.n	8003de8 <HAL_RCC_OscConfig+0x284>
 8003e90:	e003      	b.n	8003e9a <HAL_RCC_OscConfig+0x336>
 8003e92:	bf00      	nop
 8003e94:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f000 817d 	beq.w	80041aa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003eb0:	4ba6      	ldr	r3, [pc, #664]	@ (800414c <HAL_RCC_OscConfig+0x5e8>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f003 030c 	and.w	r3, r3, #12
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00b      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003ebc:	4ba3      	ldr	r3, [pc, #652]	@ (800414c <HAL_RCC_OscConfig+0x5e8>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f003 030c 	and.w	r3, r3, #12
 8003ec4:	2b08      	cmp	r3, #8
 8003ec6:	d172      	bne.n	8003fae <HAL_RCC_OscConfig+0x44a>
 8003ec8:	4ba0      	ldr	r3, [pc, #640]	@ (800414c <HAL_RCC_OscConfig+0x5e8>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d16c      	bne.n	8003fae <HAL_RCC_OscConfig+0x44a>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eda:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003ede:	fa93 f3a3 	rbit	r3, r3
 8003ee2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8003ee6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eea:	fab3 f383 	clz	r3, r3
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	095b      	lsrs	r3, r3, #5
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	f043 0301 	orr.w	r3, r3, #1
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d102      	bne.n	8003f04 <HAL_RCC_OscConfig+0x3a0>
 8003efe:	4b93      	ldr	r3, [pc, #588]	@ (800414c <HAL_RCC_OscConfig+0x5e8>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	e013      	b.n	8003f2c <HAL_RCC_OscConfig+0x3c8>
 8003f04:	2302      	movs	r3, #2
 8003f06:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003f0e:	fa93 f3a3 	rbit	r3, r3
 8003f12:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003f16:	2302      	movs	r3, #2
 8003f18:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003f1c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003f20:	fa93 f3a3 	rbit	r3, r3
 8003f24:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003f28:	4b88      	ldr	r3, [pc, #544]	@ (800414c <HAL_RCC_OscConfig+0x5e8>)
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2c:	2202      	movs	r2, #2
 8003f2e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8003f32:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003f36:	fa92 f2a2 	rbit	r2, r2
 8003f3a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8003f3e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003f42:	fab2 f282 	clz	r2, r2
 8003f46:	b2d2      	uxtb	r2, r2
 8003f48:	f042 0220 	orr.w	r2, r2, #32
 8003f4c:	b2d2      	uxtb	r2, r2
 8003f4e:	f002 021f 	and.w	r2, r2, #31
 8003f52:	2101      	movs	r1, #1
 8003f54:	fa01 f202 	lsl.w	r2, r1, r2
 8003f58:	4013      	ands	r3, r2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00a      	beq.n	8003f74 <HAL_RCC_OscConfig+0x410>
 8003f5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d002      	beq.n	8003f74 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	f000 be2e 	b.w	8004bd0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f74:	4b75      	ldr	r3, [pc, #468]	@ (800414c <HAL_RCC_OscConfig+0x5e8>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f80:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	21f8      	movs	r1, #248	@ 0xf8
 8003f8a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003f92:	fa91 f1a1 	rbit	r1, r1
 8003f96:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003f9a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003f9e:	fab1 f181 	clz	r1, r1
 8003fa2:	b2c9      	uxtb	r1, r1
 8003fa4:	408b      	lsls	r3, r1
 8003fa6:	4969      	ldr	r1, [pc, #420]	@ (800414c <HAL_RCC_OscConfig+0x5e8>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fac:	e0fd      	b.n	80041aa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fb2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f000 8088 	beq.w	80040d0 <HAL_RCC_OscConfig+0x56c>
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003fca:	fa93 f3a3 	rbit	r3, r3
 8003fce:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003fd2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fd6:	fab3 f383 	clz	r3, r3
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003fe0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	2301      	movs	r3, #1
 8003fea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fec:	f7fe fde6 	bl	8002bbc <HAL_GetTick>
 8003ff0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ff4:	e00a      	b.n	800400c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ff6:	f7fe fde1 	bl	8002bbc <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d902      	bls.n	800400c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	f000 bde2 	b.w	8004bd0 <HAL_RCC_OscConfig+0x106c>
 800400c:	2302      	movs	r3, #2
 800400e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004012:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8004016:	fa93 f3a3 	rbit	r3, r3
 800401a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800401e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004022:	fab3 f383 	clz	r3, r3
 8004026:	b2db      	uxtb	r3, r3
 8004028:	095b      	lsrs	r3, r3, #5
 800402a:	b2db      	uxtb	r3, r3
 800402c:	f043 0301 	orr.w	r3, r3, #1
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b01      	cmp	r3, #1
 8004034:	d102      	bne.n	800403c <HAL_RCC_OscConfig+0x4d8>
 8004036:	4b45      	ldr	r3, [pc, #276]	@ (800414c <HAL_RCC_OscConfig+0x5e8>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	e013      	b.n	8004064 <HAL_RCC_OscConfig+0x500>
 800403c:	2302      	movs	r3, #2
 800403e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004042:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8004046:	fa93 f3a3 	rbit	r3, r3
 800404a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800404e:	2302      	movs	r3, #2
 8004050:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004054:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8004058:	fa93 f3a3 	rbit	r3, r3
 800405c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8004060:	4b3a      	ldr	r3, [pc, #232]	@ (800414c <HAL_RCC_OscConfig+0x5e8>)
 8004062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004064:	2202      	movs	r2, #2
 8004066:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800406a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800406e:	fa92 f2a2 	rbit	r2, r2
 8004072:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8004076:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800407a:	fab2 f282 	clz	r2, r2
 800407e:	b2d2      	uxtb	r2, r2
 8004080:	f042 0220 	orr.w	r2, r2, #32
 8004084:	b2d2      	uxtb	r2, r2
 8004086:	f002 021f 	and.w	r2, r2, #31
 800408a:	2101      	movs	r1, #1
 800408c:	fa01 f202 	lsl.w	r2, r1, r2
 8004090:	4013      	ands	r3, r2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d0af      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004096:	4b2d      	ldr	r3, [pc, #180]	@ (800414c <HAL_RCC_OscConfig+0x5e8>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800409e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	21f8      	movs	r1, #248	@ 0xf8
 80040ac:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b0:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80040b4:	fa91 f1a1 	rbit	r1, r1
 80040b8:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80040bc:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80040c0:	fab1 f181 	clz	r1, r1
 80040c4:	b2c9      	uxtb	r1, r1
 80040c6:	408b      	lsls	r3, r1
 80040c8:	4920      	ldr	r1, [pc, #128]	@ (800414c <HAL_RCC_OscConfig+0x5e8>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	600b      	str	r3, [r1, #0]
 80040ce:	e06c      	b.n	80041aa <HAL_RCC_OscConfig+0x646>
 80040d0:	2301      	movs	r3, #1
 80040d2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80040da:	fa93 f3a3 	rbit	r3, r3
 80040de:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80040e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040e6:	fab3 f383 	clz	r3, r3
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80040f0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	461a      	mov	r2, r3
 80040f8:	2300      	movs	r3, #0
 80040fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040fc:	f7fe fd5e 	bl	8002bbc <HAL_GetTick>
 8004100:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004104:	e00a      	b.n	800411c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004106:	f7fe fd59 	bl	8002bbc <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d902      	bls.n	800411c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	f000 bd5a 	b.w	8004bd0 <HAL_RCC_OscConfig+0x106c>
 800411c:	2302      	movs	r3, #2
 800411e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004122:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004126:	fa93 f3a3 	rbit	r3, r3
 800412a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800412e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004132:	fab3 f383 	clz	r3, r3
 8004136:	b2db      	uxtb	r3, r3
 8004138:	095b      	lsrs	r3, r3, #5
 800413a:	b2db      	uxtb	r3, r3
 800413c:	f043 0301 	orr.w	r3, r3, #1
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b01      	cmp	r3, #1
 8004144:	d104      	bne.n	8004150 <HAL_RCC_OscConfig+0x5ec>
 8004146:	4b01      	ldr	r3, [pc, #4]	@ (800414c <HAL_RCC_OscConfig+0x5e8>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	e015      	b.n	8004178 <HAL_RCC_OscConfig+0x614>
 800414c:	40021000 	.word	0x40021000
 8004150:	2302      	movs	r3, #2
 8004152:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004156:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800415a:	fa93 f3a3 	rbit	r3, r3
 800415e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8004162:	2302      	movs	r3, #2
 8004164:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8004168:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800416c:	fa93 f3a3 	rbit	r3, r3
 8004170:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8004174:	4bc8      	ldr	r3, [pc, #800]	@ (8004498 <HAL_RCC_OscConfig+0x934>)
 8004176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004178:	2202      	movs	r2, #2
 800417a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800417e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8004182:	fa92 f2a2 	rbit	r2, r2
 8004186:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800418a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800418e:	fab2 f282 	clz	r2, r2
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	f042 0220 	orr.w	r2, r2, #32
 8004198:	b2d2      	uxtb	r2, r2
 800419a:	f002 021f 	and.w	r2, r2, #31
 800419e:	2101      	movs	r1, #1
 80041a0:	fa01 f202 	lsl.w	r2, r1, r2
 80041a4:	4013      	ands	r3, r2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1ad      	bne.n	8004106 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0308 	and.w	r3, r3, #8
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 8110 	beq.w	80043e0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d079      	beq.n	80042c4 <HAL_RCC_OscConfig+0x760>
 80041d0:	2301      	movs	r3, #1
 80041d2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80041da:	fa93 f3a3 	rbit	r3, r3
 80041de:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80041e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041e6:	fab3 f383 	clz	r3, r3
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	461a      	mov	r2, r3
 80041ee:	4bab      	ldr	r3, [pc, #684]	@ (800449c <HAL_RCC_OscConfig+0x938>)
 80041f0:	4413      	add	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	461a      	mov	r2, r3
 80041f6:	2301      	movs	r3, #1
 80041f8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041fa:	f7fe fcdf 	bl	8002bbc <HAL_GetTick>
 80041fe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004202:	e00a      	b.n	800421a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004204:	f7fe fcda 	bl	8002bbc <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d902      	bls.n	800421a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	f000 bcdb 	b.w	8004bd0 <HAL_RCC_OscConfig+0x106c>
 800421a:	2302      	movs	r3, #2
 800421c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004220:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8004224:	fa93 f3a3 	rbit	r3, r3
 8004228:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800422c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004230:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004234:	2202      	movs	r2, #2
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800423c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	fa93 f2a3 	rbit	r2, r3
 8004246:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800424a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800424e:	601a      	str	r2, [r3, #0]
 8004250:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004254:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004258:	2202      	movs	r2, #2
 800425a:	601a      	str	r2, [r3, #0]
 800425c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004260:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	fa93 f2a3 	rbit	r2, r3
 800426a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800426e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004272:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004274:	4b88      	ldr	r3, [pc, #544]	@ (8004498 <HAL_RCC_OscConfig+0x934>)
 8004276:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004278:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800427c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004280:	2102      	movs	r1, #2
 8004282:	6019      	str	r1, [r3, #0]
 8004284:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004288:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	fa93 f1a3 	rbit	r1, r3
 8004292:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004296:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800429a:	6019      	str	r1, [r3, #0]
  return result;
 800429c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042a0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	fab3 f383 	clz	r3, r3
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	f003 031f 	and.w	r3, r3, #31
 80042b6:	2101      	movs	r1, #1
 80042b8:	fa01 f303 	lsl.w	r3, r1, r3
 80042bc:	4013      	ands	r3, r2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0a0      	beq.n	8004204 <HAL_RCC_OscConfig+0x6a0>
 80042c2:	e08d      	b.n	80043e0 <HAL_RCC_OscConfig+0x87c>
 80042c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042c8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80042cc:	2201      	movs	r2, #1
 80042ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042d4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	fa93 f2a3 	rbit	r2, r3
 80042de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042e2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80042e6:	601a      	str	r2, [r3, #0]
  return result;
 80042e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042ec:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80042f0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042f2:	fab3 f383 	clz	r3, r3
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	461a      	mov	r2, r3
 80042fa:	4b68      	ldr	r3, [pc, #416]	@ (800449c <HAL_RCC_OscConfig+0x938>)
 80042fc:	4413      	add	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	461a      	mov	r2, r3
 8004302:	2300      	movs	r3, #0
 8004304:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004306:	f7fe fc59 	bl	8002bbc <HAL_GetTick>
 800430a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800430e:	e00a      	b.n	8004326 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004310:	f7fe fc54 	bl	8002bbc <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d902      	bls.n	8004326 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	f000 bc55 	b.w	8004bd0 <HAL_RCC_OscConfig+0x106c>
 8004326:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800432a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800432e:	2202      	movs	r2, #2
 8004330:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004332:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004336:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	fa93 f2a3 	rbit	r2, r3
 8004340:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004344:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800434e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004352:	2202      	movs	r2, #2
 8004354:	601a      	str	r2, [r3, #0]
 8004356:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800435a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	fa93 f2a3 	rbit	r2, r3
 8004364:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004368:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004372:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004376:	2202      	movs	r2, #2
 8004378:	601a      	str	r2, [r3, #0]
 800437a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800437e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	fa93 f2a3 	rbit	r2, r3
 8004388:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800438c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004390:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004392:	4b41      	ldr	r3, [pc, #260]	@ (8004498 <HAL_RCC_OscConfig+0x934>)
 8004394:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004396:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800439a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800439e:	2102      	movs	r1, #2
 80043a0:	6019      	str	r1, [r3, #0]
 80043a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043a6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	fa93 f1a3 	rbit	r1, r3
 80043b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043b4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80043b8:	6019      	str	r1, [r3, #0]
  return result;
 80043ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043be:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	fab3 f383 	clz	r3, r3
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	f003 031f 	and.w	r3, r3, #31
 80043d4:	2101      	movs	r1, #1
 80043d6:	fa01 f303 	lsl.w	r3, r1, r3
 80043da:	4013      	ands	r3, r2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d197      	bne.n	8004310 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 81a1 	beq.w	8004738 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043f6:	2300      	movs	r3, #0
 80043f8:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043fc:	4b26      	ldr	r3, [pc, #152]	@ (8004498 <HAL_RCC_OscConfig+0x934>)
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d116      	bne.n	8004436 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004408:	4b23      	ldr	r3, [pc, #140]	@ (8004498 <HAL_RCC_OscConfig+0x934>)
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	4a22      	ldr	r2, [pc, #136]	@ (8004498 <HAL_RCC_OscConfig+0x934>)
 800440e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004412:	61d3      	str	r3, [r2, #28]
 8004414:	4b20      	ldr	r3, [pc, #128]	@ (8004498 <HAL_RCC_OscConfig+0x934>)
 8004416:	69db      	ldr	r3, [r3, #28]
 8004418:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800441c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004420:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004424:	601a      	str	r2, [r3, #0]
 8004426:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800442a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800442e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004430:	2301      	movs	r3, #1
 8004432:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004436:	4b1a      	ldr	r3, [pc, #104]	@ (80044a0 <HAL_RCC_OscConfig+0x93c>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800443e:	2b00      	cmp	r3, #0
 8004440:	d11a      	bne.n	8004478 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004442:	4b17      	ldr	r3, [pc, #92]	@ (80044a0 <HAL_RCC_OscConfig+0x93c>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a16      	ldr	r2, [pc, #88]	@ (80044a0 <HAL_RCC_OscConfig+0x93c>)
 8004448:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800444c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800444e:	f7fe fbb5 	bl	8002bbc <HAL_GetTick>
 8004452:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004456:	e009      	b.n	800446c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004458:	f7fe fbb0 	bl	8002bbc <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b64      	cmp	r3, #100	@ 0x64
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e3b1      	b.n	8004bd0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800446c:	4b0c      	ldr	r3, [pc, #48]	@ (80044a0 <HAL_RCC_OscConfig+0x93c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004474:	2b00      	cmp	r3, #0
 8004476:	d0ef      	beq.n	8004458 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004478:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800447c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d10d      	bne.n	80044a4 <HAL_RCC_OscConfig+0x940>
 8004488:	4b03      	ldr	r3, [pc, #12]	@ (8004498 <HAL_RCC_OscConfig+0x934>)
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	4a02      	ldr	r2, [pc, #8]	@ (8004498 <HAL_RCC_OscConfig+0x934>)
 800448e:	f043 0301 	orr.w	r3, r3, #1
 8004492:	6213      	str	r3, [r2, #32]
 8004494:	e03c      	b.n	8004510 <HAL_RCC_OscConfig+0x9ac>
 8004496:	bf00      	nop
 8004498:	40021000 	.word	0x40021000
 800449c:	10908120 	.word	0x10908120
 80044a0:	40007000 	.word	0x40007000
 80044a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10c      	bne.n	80044ce <HAL_RCC_OscConfig+0x96a>
 80044b4:	4bc1      	ldr	r3, [pc, #772]	@ (80047bc <HAL_RCC_OscConfig+0xc58>)
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	4ac0      	ldr	r2, [pc, #768]	@ (80047bc <HAL_RCC_OscConfig+0xc58>)
 80044ba:	f023 0301 	bic.w	r3, r3, #1
 80044be:	6213      	str	r3, [r2, #32]
 80044c0:	4bbe      	ldr	r3, [pc, #760]	@ (80047bc <HAL_RCC_OscConfig+0xc58>)
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	4abd      	ldr	r2, [pc, #756]	@ (80047bc <HAL_RCC_OscConfig+0xc58>)
 80044c6:	f023 0304 	bic.w	r3, r3, #4
 80044ca:	6213      	str	r3, [r2, #32]
 80044cc:	e020      	b.n	8004510 <HAL_RCC_OscConfig+0x9ac>
 80044ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	2b05      	cmp	r3, #5
 80044dc:	d10c      	bne.n	80044f8 <HAL_RCC_OscConfig+0x994>
 80044de:	4bb7      	ldr	r3, [pc, #732]	@ (80047bc <HAL_RCC_OscConfig+0xc58>)
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	4ab6      	ldr	r2, [pc, #728]	@ (80047bc <HAL_RCC_OscConfig+0xc58>)
 80044e4:	f043 0304 	orr.w	r3, r3, #4
 80044e8:	6213      	str	r3, [r2, #32]
 80044ea:	4bb4      	ldr	r3, [pc, #720]	@ (80047bc <HAL_RCC_OscConfig+0xc58>)
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	4ab3      	ldr	r2, [pc, #716]	@ (80047bc <HAL_RCC_OscConfig+0xc58>)
 80044f0:	f043 0301 	orr.w	r3, r3, #1
 80044f4:	6213      	str	r3, [r2, #32]
 80044f6:	e00b      	b.n	8004510 <HAL_RCC_OscConfig+0x9ac>
 80044f8:	4bb0      	ldr	r3, [pc, #704]	@ (80047bc <HAL_RCC_OscConfig+0xc58>)
 80044fa:	6a1b      	ldr	r3, [r3, #32]
 80044fc:	4aaf      	ldr	r2, [pc, #700]	@ (80047bc <HAL_RCC_OscConfig+0xc58>)
 80044fe:	f023 0301 	bic.w	r3, r3, #1
 8004502:	6213      	str	r3, [r2, #32]
 8004504:	4bad      	ldr	r3, [pc, #692]	@ (80047bc <HAL_RCC_OscConfig+0xc58>)
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	4aac      	ldr	r2, [pc, #688]	@ (80047bc <HAL_RCC_OscConfig+0xc58>)
 800450a:	f023 0304 	bic.w	r3, r3, #4
 800450e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004510:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004514:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 8081 	beq.w	8004624 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004522:	f7fe fb4b 	bl	8002bbc <HAL_GetTick>
 8004526:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800452a:	e00b      	b.n	8004544 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800452c:	f7fe fb46 	bl	8002bbc <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	f241 3288 	movw	r2, #5000	@ 0x1388
 800453c:	4293      	cmp	r3, r2
 800453e:	d901      	bls.n	8004544 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e345      	b.n	8004bd0 <HAL_RCC_OscConfig+0x106c>
 8004544:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004548:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800454c:	2202      	movs	r2, #2
 800454e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004550:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004554:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	fa93 f2a3 	rbit	r2, r3
 800455e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004562:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800456c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004570:	2202      	movs	r2, #2
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004578:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	fa93 f2a3 	rbit	r2, r3
 8004582:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004586:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800458a:	601a      	str	r2, [r3, #0]
  return result;
 800458c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004590:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004594:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004596:	fab3 f383 	clz	r3, r3
 800459a:	b2db      	uxtb	r3, r3
 800459c:	095b      	lsrs	r3, r3, #5
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	f043 0302 	orr.w	r3, r3, #2
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d102      	bne.n	80045b0 <HAL_RCC_OscConfig+0xa4c>
 80045aa:	4b84      	ldr	r3, [pc, #528]	@ (80047bc <HAL_RCC_OscConfig+0xc58>)
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	e013      	b.n	80045d8 <HAL_RCC_OscConfig+0xa74>
 80045b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045b4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80045b8:	2202      	movs	r2, #2
 80045ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045c0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	fa93 f2a3 	rbit	r2, r3
 80045ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045ce:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	4b79      	ldr	r3, [pc, #484]	@ (80047bc <HAL_RCC_OscConfig+0xc58>)
 80045d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80045dc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80045e0:	2102      	movs	r1, #2
 80045e2:	6011      	str	r1, [r2, #0]
 80045e4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80045e8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80045ec:	6812      	ldr	r2, [r2, #0]
 80045ee:	fa92 f1a2 	rbit	r1, r2
 80045f2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80045f6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80045fa:	6011      	str	r1, [r2, #0]
  return result;
 80045fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004600:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004604:	6812      	ldr	r2, [r2, #0]
 8004606:	fab2 f282 	clz	r2, r2
 800460a:	b2d2      	uxtb	r2, r2
 800460c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004610:	b2d2      	uxtb	r2, r2
 8004612:	f002 021f 	and.w	r2, r2, #31
 8004616:	2101      	movs	r1, #1
 8004618:	fa01 f202 	lsl.w	r2, r1, r2
 800461c:	4013      	ands	r3, r2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d084      	beq.n	800452c <HAL_RCC_OscConfig+0x9c8>
 8004622:	e07f      	b.n	8004724 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004624:	f7fe faca 	bl	8002bbc <HAL_GetTick>
 8004628:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800462c:	e00b      	b.n	8004646 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800462e:	f7fe fac5 	bl	8002bbc <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800463e:	4293      	cmp	r3, r2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e2c4      	b.n	8004bd0 <HAL_RCC_OscConfig+0x106c>
 8004646:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800464a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800464e:	2202      	movs	r2, #2
 8004650:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004652:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004656:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	fa93 f2a3 	rbit	r2, r3
 8004660:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004664:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004668:	601a      	str	r2, [r3, #0]
 800466a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800466e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004672:	2202      	movs	r2, #2
 8004674:	601a      	str	r2, [r3, #0]
 8004676:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800467a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	fa93 f2a3 	rbit	r2, r3
 8004684:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004688:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800468c:	601a      	str	r2, [r3, #0]
  return result;
 800468e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004692:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004696:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004698:	fab3 f383 	clz	r3, r3
 800469c:	b2db      	uxtb	r3, r3
 800469e:	095b      	lsrs	r3, r3, #5
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	f043 0302 	orr.w	r3, r3, #2
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d102      	bne.n	80046b2 <HAL_RCC_OscConfig+0xb4e>
 80046ac:	4b43      	ldr	r3, [pc, #268]	@ (80047bc <HAL_RCC_OscConfig+0xc58>)
 80046ae:	6a1b      	ldr	r3, [r3, #32]
 80046b0:	e013      	b.n	80046da <HAL_RCC_OscConfig+0xb76>
 80046b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046b6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80046ba:	2202      	movs	r2, #2
 80046bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046c2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	fa93 f2a3 	rbit	r2, r3
 80046cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046d0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80046d4:	601a      	str	r2, [r3, #0]
 80046d6:	4b39      	ldr	r3, [pc, #228]	@ (80047bc <HAL_RCC_OscConfig+0xc58>)
 80046d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046da:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046de:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80046e2:	2102      	movs	r1, #2
 80046e4:	6011      	str	r1, [r2, #0]
 80046e6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046ea:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80046ee:	6812      	ldr	r2, [r2, #0]
 80046f0:	fa92 f1a2 	rbit	r1, r2
 80046f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046f8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80046fc:	6011      	str	r1, [r2, #0]
  return result;
 80046fe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004702:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004706:	6812      	ldr	r2, [r2, #0]
 8004708:	fab2 f282 	clz	r2, r2
 800470c:	b2d2      	uxtb	r2, r2
 800470e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004712:	b2d2      	uxtb	r2, r2
 8004714:	f002 021f 	and.w	r2, r2, #31
 8004718:	2101      	movs	r1, #1
 800471a:	fa01 f202 	lsl.w	r2, r1, r2
 800471e:	4013      	ands	r3, r2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d184      	bne.n	800462e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004724:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8004728:	2b01      	cmp	r3, #1
 800472a:	d105      	bne.n	8004738 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800472c:	4b23      	ldr	r3, [pc, #140]	@ (80047bc <HAL_RCC_OscConfig+0xc58>)
 800472e:	69db      	ldr	r3, [r3, #28]
 8004730:	4a22      	ldr	r2, [pc, #136]	@ (80047bc <HAL_RCC_OscConfig+0xc58>)
 8004732:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004736:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004738:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800473c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	69db      	ldr	r3, [r3, #28]
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 8242 	beq.w	8004bce <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800474a:	4b1c      	ldr	r3, [pc, #112]	@ (80047bc <HAL_RCC_OscConfig+0xc58>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f003 030c 	and.w	r3, r3, #12
 8004752:	2b08      	cmp	r3, #8
 8004754:	f000 8213 	beq.w	8004b7e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004758:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800475c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	2b02      	cmp	r3, #2
 8004766:	f040 8162 	bne.w	8004a2e <HAL_RCC_OscConfig+0xeca>
 800476a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800476e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004772:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004776:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004778:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800477c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	fa93 f2a3 	rbit	r2, r3
 8004786:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800478a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800478e:	601a      	str	r2, [r3, #0]
  return result;
 8004790:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004794:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004798:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800479a:	fab3 f383 	clz	r3, r3
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80047a4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	461a      	mov	r2, r3
 80047ac:	2300      	movs	r3, #0
 80047ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b0:	f7fe fa04 	bl	8002bbc <HAL_GetTick>
 80047b4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047b8:	e00c      	b.n	80047d4 <HAL_RCC_OscConfig+0xc70>
 80047ba:	bf00      	nop
 80047bc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047c0:	f7fe f9fc 	bl	8002bbc <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d901      	bls.n	80047d4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e1fd      	b.n	8004bd0 <HAL_RCC_OscConfig+0x106c>
 80047d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047d8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80047dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80047e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047e6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	fa93 f2a3 	rbit	r2, r3
 80047f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047f4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80047f8:	601a      	str	r2, [r3, #0]
  return result;
 80047fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047fe:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004802:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004804:	fab3 f383 	clz	r3, r3
 8004808:	b2db      	uxtb	r3, r3
 800480a:	095b      	lsrs	r3, r3, #5
 800480c:	b2db      	uxtb	r3, r3
 800480e:	f043 0301 	orr.w	r3, r3, #1
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b01      	cmp	r3, #1
 8004816:	d102      	bne.n	800481e <HAL_RCC_OscConfig+0xcba>
 8004818:	4bb0      	ldr	r3, [pc, #704]	@ (8004adc <HAL_RCC_OscConfig+0xf78>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	e027      	b.n	800486e <HAL_RCC_OscConfig+0xd0a>
 800481e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004822:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004826:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800482a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800482c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004830:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	fa93 f2a3 	rbit	r2, r3
 800483a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800483e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004848:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800484c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004856:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	fa93 f2a3 	rbit	r2, r3
 8004860:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004864:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004868:	601a      	str	r2, [r3, #0]
 800486a:	4b9c      	ldr	r3, [pc, #624]	@ (8004adc <HAL_RCC_OscConfig+0xf78>)
 800486c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800486e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004872:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004876:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800487a:	6011      	str	r1, [r2, #0]
 800487c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004880:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004884:	6812      	ldr	r2, [r2, #0]
 8004886:	fa92 f1a2 	rbit	r1, r2
 800488a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800488e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004892:	6011      	str	r1, [r2, #0]
  return result;
 8004894:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004898:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800489c:	6812      	ldr	r2, [r2, #0]
 800489e:	fab2 f282 	clz	r2, r2
 80048a2:	b2d2      	uxtb	r2, r2
 80048a4:	f042 0220 	orr.w	r2, r2, #32
 80048a8:	b2d2      	uxtb	r2, r2
 80048aa:	f002 021f 	and.w	r2, r2, #31
 80048ae:	2101      	movs	r1, #1
 80048b0:	fa01 f202 	lsl.w	r2, r1, r2
 80048b4:	4013      	ands	r3, r2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d182      	bne.n	80047c0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048ba:	4b88      	ldr	r3, [pc, #544]	@ (8004adc <HAL_RCC_OscConfig+0xf78>)
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80048c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80048ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	430b      	orrs	r3, r1
 80048dc:	497f      	ldr	r1, [pc, #508]	@ (8004adc <HAL_RCC_OscConfig+0xf78>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	604b      	str	r3, [r1, #4]
 80048e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048e6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80048ea:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80048ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048f4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	fa93 f2a3 	rbit	r2, r3
 80048fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004902:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004906:	601a      	str	r2, [r3, #0]
  return result;
 8004908:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800490c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004910:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004912:	fab3 f383 	clz	r3, r3
 8004916:	b2db      	uxtb	r3, r3
 8004918:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800491c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	461a      	mov	r2, r3
 8004924:	2301      	movs	r3, #1
 8004926:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004928:	f7fe f948 	bl	8002bbc <HAL_GetTick>
 800492c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004930:	e009      	b.n	8004946 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004932:	f7fe f943 	bl	8002bbc <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e144      	b.n	8004bd0 <HAL_RCC_OscConfig+0x106c>
 8004946:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800494a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800494e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004952:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004954:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004958:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	fa93 f2a3 	rbit	r2, r3
 8004962:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004966:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800496a:	601a      	str	r2, [r3, #0]
  return result;
 800496c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004970:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004974:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004976:	fab3 f383 	clz	r3, r3
 800497a:	b2db      	uxtb	r3, r3
 800497c:	095b      	lsrs	r3, r3, #5
 800497e:	b2db      	uxtb	r3, r3
 8004980:	f043 0301 	orr.w	r3, r3, #1
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b01      	cmp	r3, #1
 8004988:	d102      	bne.n	8004990 <HAL_RCC_OscConfig+0xe2c>
 800498a:	4b54      	ldr	r3, [pc, #336]	@ (8004adc <HAL_RCC_OscConfig+0xf78>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	e027      	b.n	80049e0 <HAL_RCC_OscConfig+0xe7c>
 8004990:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004994:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004998:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800499c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049a2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	fa93 f2a3 	rbit	r2, r3
 80049ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049b0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80049b4:	601a      	str	r2, [r3, #0]
 80049b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049ba:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80049be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049c8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	fa93 f2a3 	rbit	r2, r3
 80049d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049d6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80049da:	601a      	str	r2, [r3, #0]
 80049dc:	4b3f      	ldr	r3, [pc, #252]	@ (8004adc <HAL_RCC_OscConfig+0xf78>)
 80049de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80049e4:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80049e8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80049ec:	6011      	str	r1, [r2, #0]
 80049ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80049f2:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80049f6:	6812      	ldr	r2, [r2, #0]
 80049f8:	fa92 f1a2 	rbit	r1, r2
 80049fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004a00:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004a04:	6011      	str	r1, [r2, #0]
  return result;
 8004a06:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004a0a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004a0e:	6812      	ldr	r2, [r2, #0]
 8004a10:	fab2 f282 	clz	r2, r2
 8004a14:	b2d2      	uxtb	r2, r2
 8004a16:	f042 0220 	orr.w	r2, r2, #32
 8004a1a:	b2d2      	uxtb	r2, r2
 8004a1c:	f002 021f 	and.w	r2, r2, #31
 8004a20:	2101      	movs	r1, #1
 8004a22:	fa01 f202 	lsl.w	r2, r1, r2
 8004a26:	4013      	ands	r3, r2
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d082      	beq.n	8004932 <HAL_RCC_OscConfig+0xdce>
 8004a2c:	e0cf      	b.n	8004bce <HAL_RCC_OscConfig+0x106a>
 8004a2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a32:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004a36:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004a3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a40:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	fa93 f2a3 	rbit	r2, r3
 8004a4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a4e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004a52:	601a      	str	r2, [r3, #0]
  return result;
 8004a54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a58:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004a5c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a5e:	fab3 f383 	clz	r3, r3
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004a68:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	461a      	mov	r2, r3
 8004a70:	2300      	movs	r3, #0
 8004a72:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a74:	f7fe f8a2 	bl	8002bbc <HAL_GetTick>
 8004a78:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a7c:	e009      	b.n	8004a92 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a7e:	f7fe f89d 	bl	8002bbc <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e09e      	b.n	8004bd0 <HAL_RCC_OscConfig+0x106c>
 8004a92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a96:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004a9a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004aa4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	fa93 f2a3 	rbit	r2, r3
 8004aae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ab2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004ab6:	601a      	str	r2, [r3, #0]
  return result;
 8004ab8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004abc:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004ac0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ac2:	fab3 f383 	clz	r3, r3
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	095b      	lsrs	r3, r3, #5
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	f043 0301 	orr.w	r3, r3, #1
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d104      	bne.n	8004ae0 <HAL_RCC_OscConfig+0xf7c>
 8004ad6:	4b01      	ldr	r3, [pc, #4]	@ (8004adc <HAL_RCC_OscConfig+0xf78>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	e029      	b.n	8004b30 <HAL_RCC_OscConfig+0xfcc>
 8004adc:	40021000 	.word	0x40021000
 8004ae0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ae4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004ae8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004aec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004af2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	fa93 f2a3 	rbit	r2, r3
 8004afc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b00:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b0a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004b0e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004b12:	601a      	str	r2, [r3, #0]
 8004b14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b18:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	fa93 f2a3 	rbit	r2, r3
 8004b22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b26:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004b2a:	601a      	str	r2, [r3, #0]
 8004b2c:	4b2b      	ldr	r3, [pc, #172]	@ (8004bdc <HAL_RCC_OscConfig+0x1078>)
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b30:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b34:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004b38:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004b3c:	6011      	str	r1, [r2, #0]
 8004b3e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b42:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004b46:	6812      	ldr	r2, [r2, #0]
 8004b48:	fa92 f1a2 	rbit	r1, r2
 8004b4c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b50:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004b54:	6011      	str	r1, [r2, #0]
  return result;
 8004b56:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b5a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004b5e:	6812      	ldr	r2, [r2, #0]
 8004b60:	fab2 f282 	clz	r2, r2
 8004b64:	b2d2      	uxtb	r2, r2
 8004b66:	f042 0220 	orr.w	r2, r2, #32
 8004b6a:	b2d2      	uxtb	r2, r2
 8004b6c:	f002 021f 	and.w	r2, r2, #31
 8004b70:	2101      	movs	r1, #1
 8004b72:	fa01 f202 	lsl.w	r2, r1, r2
 8004b76:	4013      	ands	r3, r2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d180      	bne.n	8004a7e <HAL_RCC_OscConfig+0xf1a>
 8004b7c:	e027      	b.n	8004bce <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	69db      	ldr	r3, [r3, #28]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d101      	bne.n	8004b92 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e01e      	b.n	8004bd0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b92:	4b12      	ldr	r3, [pc, #72]	@ (8004bdc <HAL_RCC_OscConfig+0x1078>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004b9a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004b9e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004ba2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ba6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d10b      	bne.n	8004bca <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004bb2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004bb6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004bba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bbe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d001      	beq.n	8004bce <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e000      	b.n	8004bd0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	40021000 	.word	0x40021000

08004be0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b09e      	sub	sp, #120	@ 0x78
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004bea:	2300      	movs	r3, #0
 8004bec:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d101      	bne.n	8004bf8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e162      	b.n	8004ebe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bf8:	4b90      	ldr	r3, [pc, #576]	@ (8004e3c <HAL_RCC_ClockConfig+0x25c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0307 	and.w	r3, r3, #7
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d910      	bls.n	8004c28 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c06:	4b8d      	ldr	r3, [pc, #564]	@ (8004e3c <HAL_RCC_ClockConfig+0x25c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f023 0207 	bic.w	r2, r3, #7
 8004c0e:	498b      	ldr	r1, [pc, #556]	@ (8004e3c <HAL_RCC_ClockConfig+0x25c>)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c16:	4b89      	ldr	r3, [pc, #548]	@ (8004e3c <HAL_RCC_ClockConfig+0x25c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0307 	and.w	r3, r3, #7
 8004c1e:	683a      	ldr	r2, [r7, #0]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d001      	beq.n	8004c28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e14a      	b.n	8004ebe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d008      	beq.n	8004c46 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c34:	4b82      	ldr	r3, [pc, #520]	@ (8004e40 <HAL_RCC_ClockConfig+0x260>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	497f      	ldr	r1, [pc, #508]	@ (8004e40 <HAL_RCC_ClockConfig+0x260>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 80dc 	beq.w	8004e0c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d13c      	bne.n	8004cd6 <HAL_RCC_ClockConfig+0xf6>
 8004c5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004c60:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c64:	fa93 f3a3 	rbit	r3, r3
 8004c68:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004c6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c6c:	fab3 f383 	clz	r3, r3
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	095b      	lsrs	r3, r3, #5
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	f043 0301 	orr.w	r3, r3, #1
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d102      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xa6>
 8004c80:	4b6f      	ldr	r3, [pc, #444]	@ (8004e40 <HAL_RCC_ClockConfig+0x260>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	e00f      	b.n	8004ca6 <HAL_RCC_ClockConfig+0xc6>
 8004c86:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004c8a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c8e:	fa93 f3a3 	rbit	r3, r3
 8004c92:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004c98:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c9c:	fa93 f3a3 	rbit	r3, r3
 8004ca0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ca2:	4b67      	ldr	r3, [pc, #412]	@ (8004e40 <HAL_RCC_ClockConfig+0x260>)
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004caa:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004cac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004cae:	fa92 f2a2 	rbit	r2, r2
 8004cb2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004cb4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004cb6:	fab2 f282 	clz	r2, r2
 8004cba:	b2d2      	uxtb	r2, r2
 8004cbc:	f042 0220 	orr.w	r2, r2, #32
 8004cc0:	b2d2      	uxtb	r2, r2
 8004cc2:	f002 021f 	and.w	r2, r2, #31
 8004cc6:	2101      	movs	r1, #1
 8004cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8004ccc:	4013      	ands	r3, r2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d17b      	bne.n	8004dca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e0f3      	b.n	8004ebe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d13c      	bne.n	8004d58 <HAL_RCC_ClockConfig+0x178>
 8004cde:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ce2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ce6:	fa93 f3a3 	rbit	r3, r3
 8004cea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004cec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cee:	fab3 f383 	clz	r3, r3
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	095b      	lsrs	r3, r3, #5
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	f043 0301 	orr.w	r3, r3, #1
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d102      	bne.n	8004d08 <HAL_RCC_ClockConfig+0x128>
 8004d02:	4b4f      	ldr	r3, [pc, #316]	@ (8004e40 <HAL_RCC_ClockConfig+0x260>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	e00f      	b.n	8004d28 <HAL_RCC_ClockConfig+0x148>
 8004d08:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d10:	fa93 f3a3 	rbit	r3, r3
 8004d14:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d1e:	fa93 f3a3 	rbit	r3, r3
 8004d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d24:	4b46      	ldr	r3, [pc, #280]	@ (8004e40 <HAL_RCC_ClockConfig+0x260>)
 8004d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004d2c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004d2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d30:	fa92 f2a2 	rbit	r2, r2
 8004d34:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004d36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004d38:	fab2 f282 	clz	r2, r2
 8004d3c:	b2d2      	uxtb	r2, r2
 8004d3e:	f042 0220 	orr.w	r2, r2, #32
 8004d42:	b2d2      	uxtb	r2, r2
 8004d44:	f002 021f 	and.w	r2, r2, #31
 8004d48:	2101      	movs	r1, #1
 8004d4a:	fa01 f202 	lsl.w	r2, r1, r2
 8004d4e:	4013      	ands	r3, r2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d13a      	bne.n	8004dca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e0b2      	b.n	8004ebe <HAL_RCC_ClockConfig+0x2de>
 8004d58:	2302      	movs	r3, #2
 8004d5a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d5e:	fa93 f3a3 	rbit	r3, r3
 8004d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d66:	fab3 f383 	clz	r3, r3
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	095b      	lsrs	r3, r3, #5
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	f043 0301 	orr.w	r3, r3, #1
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d102      	bne.n	8004d80 <HAL_RCC_ClockConfig+0x1a0>
 8004d7a:	4b31      	ldr	r3, [pc, #196]	@ (8004e40 <HAL_RCC_ClockConfig+0x260>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	e00d      	b.n	8004d9c <HAL_RCC_ClockConfig+0x1bc>
 8004d80:	2302      	movs	r3, #2
 8004d82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d86:	fa93 f3a3 	rbit	r3, r3
 8004d8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	623b      	str	r3, [r7, #32]
 8004d90:	6a3b      	ldr	r3, [r7, #32]
 8004d92:	fa93 f3a3 	rbit	r3, r3
 8004d96:	61fb      	str	r3, [r7, #28]
 8004d98:	4b29      	ldr	r3, [pc, #164]	@ (8004e40 <HAL_RCC_ClockConfig+0x260>)
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9c:	2202      	movs	r2, #2
 8004d9e:	61ba      	str	r2, [r7, #24]
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	fa92 f2a2 	rbit	r2, r2
 8004da6:	617a      	str	r2, [r7, #20]
  return result;
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	fab2 f282 	clz	r2, r2
 8004dae:	b2d2      	uxtb	r2, r2
 8004db0:	f042 0220 	orr.w	r2, r2, #32
 8004db4:	b2d2      	uxtb	r2, r2
 8004db6:	f002 021f 	and.w	r2, r2, #31
 8004dba:	2101      	movs	r1, #1
 8004dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e079      	b.n	8004ebe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dca:	4b1d      	ldr	r3, [pc, #116]	@ (8004e40 <HAL_RCC_ClockConfig+0x260>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f023 0203 	bic.w	r2, r3, #3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	491a      	ldr	r1, [pc, #104]	@ (8004e40 <HAL_RCC_ClockConfig+0x260>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ddc:	f7fd feee 	bl	8002bbc <HAL_GetTick>
 8004de0:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004de2:	e00a      	b.n	8004dfa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004de4:	f7fd feea 	bl	8002bbc <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e061      	b.n	8004ebe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dfa:	4b11      	ldr	r3, [pc, #68]	@ (8004e40 <HAL_RCC_ClockConfig+0x260>)
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f003 020c 	and.w	r2, r3, #12
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d1eb      	bne.n	8004de4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004e3c <HAL_RCC_ClockConfig+0x25c>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0307 	and.w	r3, r3, #7
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d214      	bcs.n	8004e44 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e1a:	4b08      	ldr	r3, [pc, #32]	@ (8004e3c <HAL_RCC_ClockConfig+0x25c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f023 0207 	bic.w	r2, r3, #7
 8004e22:	4906      	ldr	r1, [pc, #24]	@ (8004e3c <HAL_RCC_ClockConfig+0x25c>)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e2a:	4b04      	ldr	r3, [pc, #16]	@ (8004e3c <HAL_RCC_ClockConfig+0x25c>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0307 	and.w	r3, r3, #7
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d005      	beq.n	8004e44 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e040      	b.n	8004ebe <HAL_RCC_ClockConfig+0x2de>
 8004e3c:	40022000 	.word	0x40022000
 8004e40:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0304 	and.w	r3, r3, #4
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d008      	beq.n	8004e62 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e50:	4b1d      	ldr	r3, [pc, #116]	@ (8004ec8 <HAL_RCC_ClockConfig+0x2e8>)
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	491a      	ldr	r1, [pc, #104]	@ (8004ec8 <HAL_RCC_ClockConfig+0x2e8>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0308 	and.w	r3, r3, #8
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d009      	beq.n	8004e82 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e6e:	4b16      	ldr	r3, [pc, #88]	@ (8004ec8 <HAL_RCC_ClockConfig+0x2e8>)
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	4912      	ldr	r1, [pc, #72]	@ (8004ec8 <HAL_RCC_ClockConfig+0x2e8>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004e82:	f000 f829 	bl	8004ed8 <HAL_RCC_GetSysClockFreq>
 8004e86:	4601      	mov	r1, r0
 8004e88:	4b0f      	ldr	r3, [pc, #60]	@ (8004ec8 <HAL_RCC_ClockConfig+0x2e8>)
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e90:	22f0      	movs	r2, #240	@ 0xf0
 8004e92:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	fa92 f2a2 	rbit	r2, r2
 8004e9a:	60fa      	str	r2, [r7, #12]
  return result;
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	fab2 f282 	clz	r2, r2
 8004ea2:	b2d2      	uxtb	r2, r2
 8004ea4:	40d3      	lsrs	r3, r2
 8004ea6:	4a09      	ldr	r2, [pc, #36]	@ (8004ecc <HAL_RCC_ClockConfig+0x2ec>)
 8004ea8:	5cd3      	ldrb	r3, [r2, r3]
 8004eaa:	fa21 f303 	lsr.w	r3, r1, r3
 8004eae:	4a08      	ldr	r2, [pc, #32]	@ (8004ed0 <HAL_RCC_ClockConfig+0x2f0>)
 8004eb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004eb2:	4b08      	ldr	r3, [pc, #32]	@ (8004ed4 <HAL_RCC_ClockConfig+0x2f4>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7fd fe3c 	bl	8002b34 <HAL_InitTick>
  
  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3778      	adds	r7, #120	@ 0x78
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	40021000 	.word	0x40021000
 8004ecc:	08007fe8 	.word	0x08007fe8
 8004ed0:	20000040 	.word	0x20000040
 8004ed4:	20000044 	.word	0x20000044

08004ed8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b087      	sub	sp, #28
 8004edc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	60fb      	str	r3, [r7, #12]
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	60bb      	str	r3, [r7, #8]
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	617b      	str	r3, [r7, #20]
 8004eea:	2300      	movs	r3, #0
 8004eec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8004f6c <HAL_RCC_GetSysClockFreq+0x94>)
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f003 030c 	and.w	r3, r3, #12
 8004efe:	2b04      	cmp	r3, #4
 8004f00:	d002      	beq.n	8004f08 <HAL_RCC_GetSysClockFreq+0x30>
 8004f02:	2b08      	cmp	r3, #8
 8004f04:	d003      	beq.n	8004f0e <HAL_RCC_GetSysClockFreq+0x36>
 8004f06:	e026      	b.n	8004f56 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f08:	4b19      	ldr	r3, [pc, #100]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0x98>)
 8004f0a:	613b      	str	r3, [r7, #16]
      break;
 8004f0c:	e026      	b.n	8004f5c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	0c9b      	lsrs	r3, r3, #18
 8004f12:	f003 030f 	and.w	r3, r3, #15
 8004f16:	4a17      	ldr	r2, [pc, #92]	@ (8004f74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004f18:	5cd3      	ldrb	r3, [r2, r3]
 8004f1a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004f1c:	4b13      	ldr	r3, [pc, #76]	@ (8004f6c <HAL_RCC_GetSysClockFreq+0x94>)
 8004f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f20:	f003 030f 	and.w	r3, r3, #15
 8004f24:	4a14      	ldr	r2, [pc, #80]	@ (8004f78 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004f26:	5cd3      	ldrb	r3, [r2, r3]
 8004f28:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d008      	beq.n	8004f46 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004f34:	4a0e      	ldr	r2, [pc, #56]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0x98>)
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	fb02 f303 	mul.w	r3, r2, r3
 8004f42:	617b      	str	r3, [r7, #20]
 8004f44:	e004      	b.n	8004f50 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a0c      	ldr	r2, [pc, #48]	@ (8004f7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004f4a:	fb02 f303 	mul.w	r3, r2, r3
 8004f4e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	613b      	str	r3, [r7, #16]
      break;
 8004f54:	e002      	b.n	8004f5c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f56:	4b06      	ldr	r3, [pc, #24]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0x98>)
 8004f58:	613b      	str	r3, [r7, #16]
      break;
 8004f5a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f5c:	693b      	ldr	r3, [r7, #16]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	371c      	adds	r7, #28
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	40021000 	.word	0x40021000
 8004f70:	007a1200 	.word	0x007a1200
 8004f74:	08008000 	.word	0x08008000
 8004f78:	08008010 	.word	0x08008010
 8004f7c:	003d0900 	.word	0x003d0900

08004f80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f80:	b480      	push	{r7}
 8004f82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f84:	4b03      	ldr	r3, [pc, #12]	@ (8004f94 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f86:	681b      	ldr	r3, [r3, #0]
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	20000040 	.word	0x20000040

08004f98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004f9e:	f7ff ffef 	bl	8004f80 <HAL_RCC_GetHCLKFreq>
 8004fa2:	4601      	mov	r1, r0
 8004fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004fac:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004fb0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	fa92 f2a2 	rbit	r2, r2
 8004fb8:	603a      	str	r2, [r7, #0]
  return result;
 8004fba:	683a      	ldr	r2, [r7, #0]
 8004fbc:	fab2 f282 	clz	r2, r2
 8004fc0:	b2d2      	uxtb	r2, r2
 8004fc2:	40d3      	lsrs	r3, r2
 8004fc4:	4a04      	ldr	r2, [pc, #16]	@ (8004fd8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004fc6:	5cd3      	ldrb	r3, [r2, r3]
 8004fc8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3708      	adds	r7, #8
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	40021000 	.word	0x40021000
 8004fd8:	08007ff8 	.word	0x08007ff8

08004fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004fe2:	f7ff ffcd 	bl	8004f80 <HAL_RCC_GetHCLKFreq>
 8004fe6:	4601      	mov	r1, r0
 8004fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8005018 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004ff0:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004ff4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	fa92 f2a2 	rbit	r2, r2
 8004ffc:	603a      	str	r2, [r7, #0]
  return result;
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	fab2 f282 	clz	r2, r2
 8005004:	b2d2      	uxtb	r2, r2
 8005006:	40d3      	lsrs	r3, r2
 8005008:	4a04      	ldr	r2, [pc, #16]	@ (800501c <HAL_RCC_GetPCLK2Freq+0x40>)
 800500a:	5cd3      	ldrb	r3, [r2, r3]
 800500c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005010:	4618      	mov	r0, r3
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	40021000 	.word	0x40021000
 800501c:	08007ff8 	.word	0x08007ff8

08005020 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b092      	sub	sp, #72	@ 0x48
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005028:	2300      	movs	r3, #0
 800502a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800502c:	2300      	movs	r3, #0
 800502e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005030:	2300      	movs	r3, #0
 8005032:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800503e:	2b00      	cmp	r3, #0
 8005040:	f000 80d4 	beq.w	80051ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005044:	4b4e      	ldr	r3, [pc, #312]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005046:	69db      	ldr	r3, [r3, #28]
 8005048:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10e      	bne.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005050:	4b4b      	ldr	r3, [pc, #300]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005052:	69db      	ldr	r3, [r3, #28]
 8005054:	4a4a      	ldr	r2, [pc, #296]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005056:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800505a:	61d3      	str	r3, [r2, #28]
 800505c:	4b48      	ldr	r3, [pc, #288]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800505e:	69db      	ldr	r3, [r3, #28]
 8005060:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005064:	60bb      	str	r3, [r7, #8]
 8005066:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005068:	2301      	movs	r3, #1
 800506a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800506e:	4b45      	ldr	r3, [pc, #276]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005076:	2b00      	cmp	r3, #0
 8005078:	d118      	bne.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800507a:	4b42      	ldr	r3, [pc, #264]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a41      	ldr	r2, [pc, #260]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005080:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005084:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005086:	f7fd fd99 	bl	8002bbc <HAL_GetTick>
 800508a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800508c:	e008      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800508e:	f7fd fd95 	bl	8002bbc <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	2b64      	cmp	r3, #100	@ 0x64
 800509a:	d901      	bls.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e169      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050a0:	4b38      	ldr	r3, [pc, #224]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d0f0      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050ac:	4b34      	ldr	r3, [pc, #208]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050ae:	6a1b      	ldr	r3, [r3, #32]
 80050b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f000 8084 	beq.w	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050c6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d07c      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050cc:	4b2c      	ldr	r3, [pc, #176]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80050da:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050de:	fa93 f3a3 	rbit	r3, r3
 80050e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80050e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050e6:	fab3 f383 	clz	r3, r3
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	461a      	mov	r2, r3
 80050ee:	4b26      	ldr	r3, [pc, #152]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80050f0:	4413      	add	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	461a      	mov	r2, r3
 80050f6:	2301      	movs	r3, #1
 80050f8:	6013      	str	r3, [r2, #0]
 80050fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80050fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005102:	fa93 f3a3 	rbit	r3, r3
 8005106:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800510a:	fab3 f383 	clz	r3, r3
 800510e:	b2db      	uxtb	r3, r3
 8005110:	461a      	mov	r2, r3
 8005112:	4b1d      	ldr	r3, [pc, #116]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005114:	4413      	add	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	461a      	mov	r2, r3
 800511a:	2300      	movs	r3, #0
 800511c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800511e:	4a18      	ldr	r2, [pc, #96]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005120:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005122:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005124:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b00      	cmp	r3, #0
 800512c:	d04b      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800512e:	f7fd fd45 	bl	8002bbc <HAL_GetTick>
 8005132:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005134:	e00a      	b.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005136:	f7fd fd41 	bl	8002bbc <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005144:	4293      	cmp	r3, r2
 8005146:	d901      	bls.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e113      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800514c:	2302      	movs	r3, #2
 800514e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005152:	fa93 f3a3 	rbit	r3, r3
 8005156:	627b      	str	r3, [r7, #36]	@ 0x24
 8005158:	2302      	movs	r3, #2
 800515a:	623b      	str	r3, [r7, #32]
 800515c:	6a3b      	ldr	r3, [r7, #32]
 800515e:	fa93 f3a3 	rbit	r3, r3
 8005162:	61fb      	str	r3, [r7, #28]
  return result;
 8005164:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005166:	fab3 f383 	clz	r3, r3
 800516a:	b2db      	uxtb	r3, r3
 800516c:	095b      	lsrs	r3, r3, #5
 800516e:	b2db      	uxtb	r3, r3
 8005170:	f043 0302 	orr.w	r3, r3, #2
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b02      	cmp	r3, #2
 8005178:	d108      	bne.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800517a:	4b01      	ldr	r3, [pc, #4]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	e00d      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005180:	40021000 	.word	0x40021000
 8005184:	40007000 	.word	0x40007000
 8005188:	10908100 	.word	0x10908100
 800518c:	2302      	movs	r3, #2
 800518e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	fa93 f3a3 	rbit	r3, r3
 8005196:	617b      	str	r3, [r7, #20]
 8005198:	4b78      	ldr	r3, [pc, #480]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800519a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800519c:	2202      	movs	r2, #2
 800519e:	613a      	str	r2, [r7, #16]
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	fa92 f2a2 	rbit	r2, r2
 80051a6:	60fa      	str	r2, [r7, #12]
  return result;
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	fab2 f282 	clz	r2, r2
 80051ae:	b2d2      	uxtb	r2, r2
 80051b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051b4:	b2d2      	uxtb	r2, r2
 80051b6:	f002 021f 	and.w	r2, r2, #31
 80051ba:	2101      	movs	r1, #1
 80051bc:	fa01 f202 	lsl.w	r2, r1, r2
 80051c0:	4013      	ands	r3, r2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d0b7      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80051c6:	4b6d      	ldr	r3, [pc, #436]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	496a      	ldr	r1, [pc, #424]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80051d8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d105      	bne.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051e0:	4b66      	ldr	r3, [pc, #408]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051e2:	69db      	ldr	r3, [r3, #28]
 80051e4:	4a65      	ldr	r2, [pc, #404]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0301 	and.w	r3, r3, #1
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d008      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051f8:	4b60      	ldr	r3, [pc, #384]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051fc:	f023 0203 	bic.w	r2, r3, #3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	495d      	ldr	r1, [pc, #372]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005206:	4313      	orrs	r3, r2
 8005208:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d008      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005216:	4b59      	ldr	r3, [pc, #356]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800521a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	4956      	ldr	r1, [pc, #344]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005224:	4313      	orrs	r3, r2
 8005226:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0304 	and.w	r3, r3, #4
 8005230:	2b00      	cmp	r3, #0
 8005232:	d008      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005234:	4b51      	ldr	r3, [pc, #324]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005238:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	494e      	ldr	r1, [pc, #312]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005242:	4313      	orrs	r3, r2
 8005244:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0320 	and.w	r3, r3, #32
 800524e:	2b00      	cmp	r3, #0
 8005250:	d008      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005252:	4b4a      	ldr	r3, [pc, #296]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005256:	f023 0210 	bic.w	r2, r3, #16
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	69db      	ldr	r3, [r3, #28]
 800525e:	4947      	ldr	r1, [pc, #284]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005260:	4313      	orrs	r3, r2
 8005262:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d008      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005270:	4b42      	ldr	r3, [pc, #264]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800527c:	493f      	ldr	r1, [pc, #252]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800527e:	4313      	orrs	r3, r2
 8005280:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800528a:	2b00      	cmp	r3, #0
 800528c:	d008      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800528e:	4b3b      	ldr	r3, [pc, #236]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005292:	f023 0220 	bic.w	r2, r3, #32
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	4938      	ldr	r1, [pc, #224]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800529c:	4313      	orrs	r3, r2
 800529e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0308 	and.w	r3, r3, #8
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d008      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80052ac:	4b33      	ldr	r3, [pc, #204]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	4930      	ldr	r1, [pc, #192]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0310 	and.w	r3, r3, #16
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d008      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80052ca:	4b2c      	ldr	r3, [pc, #176]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	4929      	ldr	r1, [pc, #164]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d008      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80052e8:	4b24      	ldr	r3, [pc, #144]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f4:	4921      	ldr	r1, [pc, #132]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005302:	2b00      	cmp	r3, #0
 8005304:	d008      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005306:	4b1d      	ldr	r3, [pc, #116]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800530a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005312:	491a      	ldr	r1, [pc, #104]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005314:	4313      	orrs	r3, r2
 8005316:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005320:	2b00      	cmp	r3, #0
 8005322:	d008      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005324:	4b15      	ldr	r3, [pc, #84]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005328:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005330:	4912      	ldr	r1, [pc, #72]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005332:	4313      	orrs	r3, r2
 8005334:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d008      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005342:	4b0e      	ldr	r3, [pc, #56]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005346:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800534e:	490b      	ldr	r1, [pc, #44]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005350:	4313      	orrs	r3, r2
 8005352:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d008      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005360:	4b06      	ldr	r3, [pc, #24]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005364:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800536c:	4903      	ldr	r1, [pc, #12]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800536e:	4313      	orrs	r3, r2
 8005370:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3748      	adds	r7, #72	@ 0x48
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	40021000 	.word	0x40021000

08005380 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e040      	b.n	8005414 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005396:	2b00      	cmp	r3, #0
 8005398:	d106      	bne.n	80053a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f7fd fad2 	bl	800294c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2224      	movs	r2, #36	@ 0x24
 80053ac:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f022 0201 	bic.w	r2, r2, #1
 80053bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d002      	beq.n	80053cc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 fb3c 	bl	8005a44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 f965 	bl	800569c <UART_SetConfig>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d101      	bne.n	80053dc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e01b      	b.n	8005414 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80053ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	689a      	ldr	r2, [r3, #8]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80053fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f042 0201 	orr.w	r2, r2, #1
 800540a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 fbbb 	bl	8005b88 <UART_CheckIdleState>
 8005412:	4603      	mov	r3, r0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3708      	adds	r7, #8
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b08a      	sub	sp, #40	@ 0x28
 8005420:	af02      	add	r7, sp, #8
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	603b      	str	r3, [r7, #0]
 8005428:	4613      	mov	r3, r2
 800542a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005430:	2b20      	cmp	r3, #32
 8005432:	d177      	bne.n	8005524 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d002      	beq.n	8005440 <HAL_UART_Transmit+0x24>
 800543a:	88fb      	ldrh	r3, [r7, #6]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e070      	b.n	8005526 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2221      	movs	r2, #33	@ 0x21
 8005450:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005452:	f7fd fbb3 	bl	8002bbc <HAL_GetTick>
 8005456:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	88fa      	ldrh	r2, [r7, #6]
 800545c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	88fa      	ldrh	r2, [r7, #6]
 8005464:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005470:	d108      	bne.n	8005484 <HAL_UART_Transmit+0x68>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d104      	bne.n	8005484 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800547a:	2300      	movs	r3, #0
 800547c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	61bb      	str	r3, [r7, #24]
 8005482:	e003      	b.n	800548c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005488:	2300      	movs	r3, #0
 800548a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800548c:	e02f      	b.n	80054ee <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	9300      	str	r3, [sp, #0]
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	2200      	movs	r2, #0
 8005496:	2180      	movs	r1, #128	@ 0x80
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f000 fc1d 	bl	8005cd8 <UART_WaitOnFlagUntilTimeout>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d004      	beq.n	80054ae <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2220      	movs	r2, #32
 80054a8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e03b      	b.n	8005526 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d10b      	bne.n	80054cc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	881a      	ldrh	r2, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054c0:	b292      	uxth	r2, r2
 80054c2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	3302      	adds	r3, #2
 80054c8:	61bb      	str	r3, [r7, #24]
 80054ca:	e007      	b.n	80054dc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	781a      	ldrb	r2, [r3, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	3301      	adds	r3, #1
 80054da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	3b01      	subs	r3, #1
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1c9      	bne.n	800548e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	2200      	movs	r2, #0
 8005502:	2140      	movs	r1, #64	@ 0x40
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f000 fbe7 	bl	8005cd8 <UART_WaitOnFlagUntilTimeout>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d004      	beq.n	800551a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2220      	movs	r2, #32
 8005514:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e005      	b.n	8005526 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2220      	movs	r2, #32
 800551e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005520:	2300      	movs	r3, #0
 8005522:	e000      	b.n	8005526 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005524:	2302      	movs	r3, #2
  }
}
 8005526:	4618      	mov	r0, r3
 8005528:	3720      	adds	r7, #32
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b08a      	sub	sp, #40	@ 0x28
 8005532:	af02      	add	r7, sp, #8
 8005534:	60f8      	str	r0, [r7, #12]
 8005536:	60b9      	str	r1, [r7, #8]
 8005538:	603b      	str	r3, [r7, #0]
 800553a:	4613      	mov	r3, r2
 800553c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005544:	2b20      	cmp	r3, #32
 8005546:	f040 80a3 	bne.w	8005690 <HAL_UART_Receive+0x162>
  {
    if ((pData == NULL) || (Size == 0U))
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d002      	beq.n	8005556 <HAL_UART_Receive+0x28>
 8005550:	88fb      	ldrh	r3, [r7, #6]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e09b      	b.n	8005692 <HAL_UART_Receive+0x164>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2222      	movs	r2, #34	@ 0x22
 8005566:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005570:	f7fd fb24 	bl	8002bbc <HAL_GetTick>
 8005574:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	88fa      	ldrh	r2, [r7, #6]
 800557a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	88fa      	ldrh	r2, [r7, #6]
 8005582:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800558e:	d10e      	bne.n	80055ae <HAL_UART_Receive+0x80>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d105      	bne.n	80055a4 <HAL_UART_Receive+0x76>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800559e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80055a2:	e01a      	b.n	80055da <HAL_UART_Receive+0xac>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	22ff      	movs	r2, #255	@ 0xff
 80055a8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80055ac:	e015      	b.n	80055da <HAL_UART_Receive+0xac>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10d      	bne.n	80055d2 <HAL_UART_Receive+0xa4>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d104      	bne.n	80055c8 <HAL_UART_Receive+0x9a>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	22ff      	movs	r2, #255	@ 0xff
 80055c2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80055c6:	e008      	b.n	80055da <HAL_UART_Receive+0xac>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	227f      	movs	r2, #127	@ 0x7f
 80055cc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80055d0:	e003      	b.n	80055da <HAL_UART_Receive+0xac>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80055e0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055ea:	d108      	bne.n	80055fe <HAL_UART_Receive+0xd0>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d104      	bne.n	80055fe <HAL_UART_Receive+0xd0>
    {
      pdata8bits  = NULL;
 80055f4:	2300      	movs	r3, #0
 80055f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	61bb      	str	r3, [r7, #24]
 80055fc:	e003      	b.n	8005606 <HAL_UART_Receive+0xd8>
    }
    else
    {
      pdata8bits  = pData;
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005602:	2300      	movs	r3, #0
 8005604:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005606:	e037      	b.n	8005678 <HAL_UART_Receive+0x14a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	9300      	str	r3, [sp, #0]
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	2200      	movs	r2, #0
 8005610:	2120      	movs	r1, #32
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f000 fb60 	bl	8005cd8 <UART_WaitOnFlagUntilTimeout>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d005      	beq.n	800562a <HAL_UART_Receive+0xfc>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2220      	movs	r2, #32
 8005622:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e033      	b.n	8005692 <HAL_UART_Receive+0x164>
      }
      if (pdata8bits == NULL)
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10c      	bne.n	800564a <HAL_UART_Receive+0x11c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005636:	b29a      	uxth	r2, r3
 8005638:	8a7b      	ldrh	r3, [r7, #18]
 800563a:	4013      	ands	r3, r2
 800563c:	b29a      	uxth	r2, r3
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	3302      	adds	r3, #2
 8005646:	61bb      	str	r3, [r7, #24]
 8005648:	e00d      	b.n	8005666 <HAL_UART_Receive+0x138>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005650:	b29b      	uxth	r3, r3
 8005652:	b2da      	uxtb	r2, r3
 8005654:	8a7b      	ldrh	r3, [r7, #18]
 8005656:	b2db      	uxtb	r3, r3
 8005658:	4013      	ands	r3, r2
 800565a:	b2da      	uxtb	r2, r3
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	3301      	adds	r3, #1
 8005664:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800566c:	b29b      	uxth	r3, r3
 800566e:	3b01      	subs	r3, #1
 8005670:	b29a      	uxth	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800567e:	b29b      	uxth	r3, r3
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1c1      	bne.n	8005608 <HAL_UART_Receive+0xda>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2220      	movs	r2, #32
 8005688:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800568c:	2300      	movs	r3, #0
 800568e:	e000      	b.n	8005692 <HAL_UART_Receive+0x164>
  }
  else
  {
    return HAL_BUSY;
 8005690:	2302      	movs	r3, #2
  }
}
 8005692:	4618      	mov	r0, r3
 8005694:	3720      	adds	r7, #32
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
	...

0800569c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b088      	sub	sp, #32
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056a4:	2300      	movs	r3, #0
 80056a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689a      	ldr	r2, [r3, #8]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	431a      	orrs	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	431a      	orrs	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	69db      	ldr	r3, [r3, #28]
 80056bc:	4313      	orrs	r3, r2
 80056be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80056ca:	f023 030c 	bic.w	r3, r3, #12
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	6812      	ldr	r2, [r2, #0]
 80056d2:	6979      	ldr	r1, [r7, #20]
 80056d4:	430b      	orrs	r3, r1
 80056d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68da      	ldr	r2, [r3, #12]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	430a      	orrs	r2, r1
 80056ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a1b      	ldr	r3, [r3, #32]
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	430a      	orrs	r2, r1
 8005710:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4aa7      	ldr	r2, [pc, #668]	@ (80059b4 <UART_SetConfig+0x318>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d120      	bne.n	800575e <UART_SetConfig+0xc2>
 800571c:	4ba6      	ldr	r3, [pc, #664]	@ (80059b8 <UART_SetConfig+0x31c>)
 800571e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005720:	f003 0303 	and.w	r3, r3, #3
 8005724:	2b03      	cmp	r3, #3
 8005726:	d817      	bhi.n	8005758 <UART_SetConfig+0xbc>
 8005728:	a201      	add	r2, pc, #4	@ (adr r2, 8005730 <UART_SetConfig+0x94>)
 800572a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572e:	bf00      	nop
 8005730:	08005741 	.word	0x08005741
 8005734:	0800574d 	.word	0x0800574d
 8005738:	08005753 	.word	0x08005753
 800573c:	08005747 	.word	0x08005747
 8005740:	2301      	movs	r3, #1
 8005742:	77fb      	strb	r3, [r7, #31]
 8005744:	e0b5      	b.n	80058b2 <UART_SetConfig+0x216>
 8005746:	2302      	movs	r3, #2
 8005748:	77fb      	strb	r3, [r7, #31]
 800574a:	e0b2      	b.n	80058b2 <UART_SetConfig+0x216>
 800574c:	2304      	movs	r3, #4
 800574e:	77fb      	strb	r3, [r7, #31]
 8005750:	e0af      	b.n	80058b2 <UART_SetConfig+0x216>
 8005752:	2308      	movs	r3, #8
 8005754:	77fb      	strb	r3, [r7, #31]
 8005756:	e0ac      	b.n	80058b2 <UART_SetConfig+0x216>
 8005758:	2310      	movs	r3, #16
 800575a:	77fb      	strb	r3, [r7, #31]
 800575c:	e0a9      	b.n	80058b2 <UART_SetConfig+0x216>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a96      	ldr	r2, [pc, #600]	@ (80059bc <UART_SetConfig+0x320>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d124      	bne.n	80057b2 <UART_SetConfig+0x116>
 8005768:	4b93      	ldr	r3, [pc, #588]	@ (80059b8 <UART_SetConfig+0x31c>)
 800576a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800576c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005770:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005774:	d011      	beq.n	800579a <UART_SetConfig+0xfe>
 8005776:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800577a:	d817      	bhi.n	80057ac <UART_SetConfig+0x110>
 800577c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005780:	d011      	beq.n	80057a6 <UART_SetConfig+0x10a>
 8005782:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005786:	d811      	bhi.n	80057ac <UART_SetConfig+0x110>
 8005788:	2b00      	cmp	r3, #0
 800578a:	d003      	beq.n	8005794 <UART_SetConfig+0xf8>
 800578c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005790:	d006      	beq.n	80057a0 <UART_SetConfig+0x104>
 8005792:	e00b      	b.n	80057ac <UART_SetConfig+0x110>
 8005794:	2300      	movs	r3, #0
 8005796:	77fb      	strb	r3, [r7, #31]
 8005798:	e08b      	b.n	80058b2 <UART_SetConfig+0x216>
 800579a:	2302      	movs	r3, #2
 800579c:	77fb      	strb	r3, [r7, #31]
 800579e:	e088      	b.n	80058b2 <UART_SetConfig+0x216>
 80057a0:	2304      	movs	r3, #4
 80057a2:	77fb      	strb	r3, [r7, #31]
 80057a4:	e085      	b.n	80058b2 <UART_SetConfig+0x216>
 80057a6:	2308      	movs	r3, #8
 80057a8:	77fb      	strb	r3, [r7, #31]
 80057aa:	e082      	b.n	80058b2 <UART_SetConfig+0x216>
 80057ac:	2310      	movs	r3, #16
 80057ae:	77fb      	strb	r3, [r7, #31]
 80057b0:	e07f      	b.n	80058b2 <UART_SetConfig+0x216>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a82      	ldr	r2, [pc, #520]	@ (80059c0 <UART_SetConfig+0x324>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d124      	bne.n	8005806 <UART_SetConfig+0x16a>
 80057bc:	4b7e      	ldr	r3, [pc, #504]	@ (80059b8 <UART_SetConfig+0x31c>)
 80057be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80057c4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80057c8:	d011      	beq.n	80057ee <UART_SetConfig+0x152>
 80057ca:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80057ce:	d817      	bhi.n	8005800 <UART_SetConfig+0x164>
 80057d0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80057d4:	d011      	beq.n	80057fa <UART_SetConfig+0x15e>
 80057d6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80057da:	d811      	bhi.n	8005800 <UART_SetConfig+0x164>
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d003      	beq.n	80057e8 <UART_SetConfig+0x14c>
 80057e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80057e4:	d006      	beq.n	80057f4 <UART_SetConfig+0x158>
 80057e6:	e00b      	b.n	8005800 <UART_SetConfig+0x164>
 80057e8:	2300      	movs	r3, #0
 80057ea:	77fb      	strb	r3, [r7, #31]
 80057ec:	e061      	b.n	80058b2 <UART_SetConfig+0x216>
 80057ee:	2302      	movs	r3, #2
 80057f0:	77fb      	strb	r3, [r7, #31]
 80057f2:	e05e      	b.n	80058b2 <UART_SetConfig+0x216>
 80057f4:	2304      	movs	r3, #4
 80057f6:	77fb      	strb	r3, [r7, #31]
 80057f8:	e05b      	b.n	80058b2 <UART_SetConfig+0x216>
 80057fa:	2308      	movs	r3, #8
 80057fc:	77fb      	strb	r3, [r7, #31]
 80057fe:	e058      	b.n	80058b2 <UART_SetConfig+0x216>
 8005800:	2310      	movs	r3, #16
 8005802:	77fb      	strb	r3, [r7, #31]
 8005804:	e055      	b.n	80058b2 <UART_SetConfig+0x216>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a6e      	ldr	r2, [pc, #440]	@ (80059c4 <UART_SetConfig+0x328>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d124      	bne.n	800585a <UART_SetConfig+0x1be>
 8005810:	4b69      	ldr	r3, [pc, #420]	@ (80059b8 <UART_SetConfig+0x31c>)
 8005812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005814:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005818:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800581c:	d011      	beq.n	8005842 <UART_SetConfig+0x1a6>
 800581e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005822:	d817      	bhi.n	8005854 <UART_SetConfig+0x1b8>
 8005824:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005828:	d011      	beq.n	800584e <UART_SetConfig+0x1b2>
 800582a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800582e:	d811      	bhi.n	8005854 <UART_SetConfig+0x1b8>
 8005830:	2b00      	cmp	r3, #0
 8005832:	d003      	beq.n	800583c <UART_SetConfig+0x1a0>
 8005834:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005838:	d006      	beq.n	8005848 <UART_SetConfig+0x1ac>
 800583a:	e00b      	b.n	8005854 <UART_SetConfig+0x1b8>
 800583c:	2300      	movs	r3, #0
 800583e:	77fb      	strb	r3, [r7, #31]
 8005840:	e037      	b.n	80058b2 <UART_SetConfig+0x216>
 8005842:	2302      	movs	r3, #2
 8005844:	77fb      	strb	r3, [r7, #31]
 8005846:	e034      	b.n	80058b2 <UART_SetConfig+0x216>
 8005848:	2304      	movs	r3, #4
 800584a:	77fb      	strb	r3, [r7, #31]
 800584c:	e031      	b.n	80058b2 <UART_SetConfig+0x216>
 800584e:	2308      	movs	r3, #8
 8005850:	77fb      	strb	r3, [r7, #31]
 8005852:	e02e      	b.n	80058b2 <UART_SetConfig+0x216>
 8005854:	2310      	movs	r3, #16
 8005856:	77fb      	strb	r3, [r7, #31]
 8005858:	e02b      	b.n	80058b2 <UART_SetConfig+0x216>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a5a      	ldr	r2, [pc, #360]	@ (80059c8 <UART_SetConfig+0x32c>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d124      	bne.n	80058ae <UART_SetConfig+0x212>
 8005864:	4b54      	ldr	r3, [pc, #336]	@ (80059b8 <UART_SetConfig+0x31c>)
 8005866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005868:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800586c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005870:	d011      	beq.n	8005896 <UART_SetConfig+0x1fa>
 8005872:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005876:	d817      	bhi.n	80058a8 <UART_SetConfig+0x20c>
 8005878:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800587c:	d011      	beq.n	80058a2 <UART_SetConfig+0x206>
 800587e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005882:	d811      	bhi.n	80058a8 <UART_SetConfig+0x20c>
 8005884:	2b00      	cmp	r3, #0
 8005886:	d003      	beq.n	8005890 <UART_SetConfig+0x1f4>
 8005888:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800588c:	d006      	beq.n	800589c <UART_SetConfig+0x200>
 800588e:	e00b      	b.n	80058a8 <UART_SetConfig+0x20c>
 8005890:	2300      	movs	r3, #0
 8005892:	77fb      	strb	r3, [r7, #31]
 8005894:	e00d      	b.n	80058b2 <UART_SetConfig+0x216>
 8005896:	2302      	movs	r3, #2
 8005898:	77fb      	strb	r3, [r7, #31]
 800589a:	e00a      	b.n	80058b2 <UART_SetConfig+0x216>
 800589c:	2304      	movs	r3, #4
 800589e:	77fb      	strb	r3, [r7, #31]
 80058a0:	e007      	b.n	80058b2 <UART_SetConfig+0x216>
 80058a2:	2308      	movs	r3, #8
 80058a4:	77fb      	strb	r3, [r7, #31]
 80058a6:	e004      	b.n	80058b2 <UART_SetConfig+0x216>
 80058a8:	2310      	movs	r3, #16
 80058aa:	77fb      	strb	r3, [r7, #31]
 80058ac:	e001      	b.n	80058b2 <UART_SetConfig+0x216>
 80058ae:	2310      	movs	r3, #16
 80058b0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058ba:	d15b      	bne.n	8005974 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80058bc:	7ffb      	ldrb	r3, [r7, #31]
 80058be:	2b08      	cmp	r3, #8
 80058c0:	d827      	bhi.n	8005912 <UART_SetConfig+0x276>
 80058c2:	a201      	add	r2, pc, #4	@ (adr r2, 80058c8 <UART_SetConfig+0x22c>)
 80058c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c8:	080058ed 	.word	0x080058ed
 80058cc:	080058f5 	.word	0x080058f5
 80058d0:	080058fd 	.word	0x080058fd
 80058d4:	08005913 	.word	0x08005913
 80058d8:	08005903 	.word	0x08005903
 80058dc:	08005913 	.word	0x08005913
 80058e0:	08005913 	.word	0x08005913
 80058e4:	08005913 	.word	0x08005913
 80058e8:	0800590b 	.word	0x0800590b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058ec:	f7ff fb54 	bl	8004f98 <HAL_RCC_GetPCLK1Freq>
 80058f0:	61b8      	str	r0, [r7, #24]
        break;
 80058f2:	e013      	b.n	800591c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058f4:	f7ff fb72 	bl	8004fdc <HAL_RCC_GetPCLK2Freq>
 80058f8:	61b8      	str	r0, [r7, #24]
        break;
 80058fa:	e00f      	b.n	800591c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058fc:	4b33      	ldr	r3, [pc, #204]	@ (80059cc <UART_SetConfig+0x330>)
 80058fe:	61bb      	str	r3, [r7, #24]
        break;
 8005900:	e00c      	b.n	800591c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005902:	f7ff fae9 	bl	8004ed8 <HAL_RCC_GetSysClockFreq>
 8005906:	61b8      	str	r0, [r7, #24]
        break;
 8005908:	e008      	b.n	800591c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800590a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800590e:	61bb      	str	r3, [r7, #24]
        break;
 8005910:	e004      	b.n	800591c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8005912:	2300      	movs	r3, #0
 8005914:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	77bb      	strb	r3, [r7, #30]
        break;
 800591a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	2b00      	cmp	r3, #0
 8005920:	f000 8082 	beq.w	8005a28 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	005a      	lsls	r2, r3, #1
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	085b      	lsrs	r3, r3, #1
 800592e:	441a      	add	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	fbb2 f3f3 	udiv	r3, r2, r3
 8005938:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	2b0f      	cmp	r3, #15
 800593e:	d916      	bls.n	800596e <UART_SetConfig+0x2d2>
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005946:	d212      	bcs.n	800596e <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	b29b      	uxth	r3, r3
 800594c:	f023 030f 	bic.w	r3, r3, #15
 8005950:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	085b      	lsrs	r3, r3, #1
 8005956:	b29b      	uxth	r3, r3
 8005958:	f003 0307 	and.w	r3, r3, #7
 800595c:	b29a      	uxth	r2, r3
 800595e:	89fb      	ldrh	r3, [r7, #14]
 8005960:	4313      	orrs	r3, r2
 8005962:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	89fa      	ldrh	r2, [r7, #14]
 800596a:	60da      	str	r2, [r3, #12]
 800596c:	e05c      	b.n	8005a28 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	77bb      	strb	r3, [r7, #30]
 8005972:	e059      	b.n	8005a28 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005974:	7ffb      	ldrb	r3, [r7, #31]
 8005976:	2b08      	cmp	r3, #8
 8005978:	d835      	bhi.n	80059e6 <UART_SetConfig+0x34a>
 800597a:	a201      	add	r2, pc, #4	@ (adr r2, 8005980 <UART_SetConfig+0x2e4>)
 800597c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005980:	080059a5 	.word	0x080059a5
 8005984:	080059ad 	.word	0x080059ad
 8005988:	080059d1 	.word	0x080059d1
 800598c:	080059e7 	.word	0x080059e7
 8005990:	080059d7 	.word	0x080059d7
 8005994:	080059e7 	.word	0x080059e7
 8005998:	080059e7 	.word	0x080059e7
 800599c:	080059e7 	.word	0x080059e7
 80059a0:	080059df 	.word	0x080059df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059a4:	f7ff faf8 	bl	8004f98 <HAL_RCC_GetPCLK1Freq>
 80059a8:	61b8      	str	r0, [r7, #24]
        break;
 80059aa:	e021      	b.n	80059f0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059ac:	f7ff fb16 	bl	8004fdc <HAL_RCC_GetPCLK2Freq>
 80059b0:	61b8      	str	r0, [r7, #24]
        break;
 80059b2:	e01d      	b.n	80059f0 <UART_SetConfig+0x354>
 80059b4:	40013800 	.word	0x40013800
 80059b8:	40021000 	.word	0x40021000
 80059bc:	40004400 	.word	0x40004400
 80059c0:	40004800 	.word	0x40004800
 80059c4:	40004c00 	.word	0x40004c00
 80059c8:	40005000 	.word	0x40005000
 80059cc:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059d0:	4b1b      	ldr	r3, [pc, #108]	@ (8005a40 <UART_SetConfig+0x3a4>)
 80059d2:	61bb      	str	r3, [r7, #24]
        break;
 80059d4:	e00c      	b.n	80059f0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059d6:	f7ff fa7f 	bl	8004ed8 <HAL_RCC_GetSysClockFreq>
 80059da:	61b8      	str	r0, [r7, #24]
        break;
 80059dc:	e008      	b.n	80059f0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059e2:	61bb      	str	r3, [r7, #24]
        break;
 80059e4:	e004      	b.n	80059f0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80059e6:	2300      	movs	r3, #0
 80059e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	77bb      	strb	r3, [r7, #30]
        break;
 80059ee:	bf00      	nop
    }

    if (pclk != 0U)
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d018      	beq.n	8005a28 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	085a      	lsrs	r2, r3, #1
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	441a      	add	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a08:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	2b0f      	cmp	r3, #15
 8005a0e:	d909      	bls.n	8005a24 <UART_SetConfig+0x388>
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a16:	d205      	bcs.n	8005a24 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	60da      	str	r2, [r3, #12]
 8005a22:	e001      	b.n	8005a28 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005a34:	7fbb      	ldrb	r3, [r7, #30]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3720      	adds	r7, #32
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	007a1200 	.word	0x007a1200

08005a44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a50:	f003 0308 	and.w	r3, r3, #8
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00a      	beq.n	8005a6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00a      	beq.n	8005a90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a94:	f003 0302 	and.w	r3, r3, #2
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00a      	beq.n	8005ab2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab6:	f003 0304 	and.w	r3, r3, #4
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00a      	beq.n	8005ad4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad8:	f003 0310 	and.w	r3, r3, #16
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00a      	beq.n	8005af6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	430a      	orrs	r2, r1
 8005af4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005afa:	f003 0320 	and.w	r3, r3, #32
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00a      	beq.n	8005b18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	430a      	orrs	r2, r1
 8005b16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d01a      	beq.n	8005b5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	430a      	orrs	r2, r1
 8005b38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b42:	d10a      	bne.n	8005b5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	430a      	orrs	r2, r1
 8005b58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00a      	beq.n	8005b7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	605a      	str	r2, [r3, #4]
  }
}
 8005b7c:	bf00      	nop
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b098      	sub	sp, #96	@ 0x60
 8005b8c:	af02      	add	r7, sp, #8
 8005b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b98:	f7fd f810 	bl	8002bbc <HAL_GetTick>
 8005b9c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0308 	and.w	r3, r3, #8
 8005ba8:	2b08      	cmp	r3, #8
 8005baa:	d12e      	bne.n	8005c0a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005bb0:	9300      	str	r3, [sp, #0]
 8005bb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f88c 	bl	8005cd8 <UART_WaitOnFlagUntilTimeout>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d021      	beq.n	8005c0a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bce:	e853 3f00 	ldrex	r3, [r3]
 8005bd2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bda:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	461a      	mov	r2, r3
 8005be2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005be4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005be6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005bea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bec:	e841 2300 	strex	r3, r2, [r1]
 8005bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005bf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1e6      	bne.n	8005bc6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e062      	b.n	8005cd0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0304 	and.w	r3, r3, #4
 8005c14:	2b04      	cmp	r3, #4
 8005c16:	d149      	bne.n	8005cac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c18:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c1c:	9300      	str	r3, [sp, #0]
 8005c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c20:	2200      	movs	r2, #0
 8005c22:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f856 	bl	8005cd8 <UART_WaitOnFlagUntilTimeout>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d03c      	beq.n	8005cac <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3a:	e853 3f00 	ldrex	r3, [r3]
 8005c3e:	623b      	str	r3, [r7, #32]
   return(result);
 8005c40:	6a3b      	ldr	r3, [r7, #32]
 8005c42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c50:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c52:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c58:	e841 2300 	strex	r3, r2, [r1]
 8005c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1e6      	bne.n	8005c32 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	3308      	adds	r3, #8
 8005c6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	e853 3f00 	ldrex	r3, [r3]
 8005c72:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f023 0301 	bic.w	r3, r3, #1
 8005c7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	3308      	adds	r3, #8
 8005c82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c84:	61fa      	str	r2, [r7, #28]
 8005c86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c88:	69b9      	ldr	r1, [r7, #24]
 8005c8a:	69fa      	ldr	r2, [r7, #28]
 8005c8c:	e841 2300 	strex	r3, r2, [r1]
 8005c90:	617b      	str	r3, [r7, #20]
   return(result);
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1e5      	bne.n	8005c64 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2220      	movs	r2, #32
 8005c9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e011      	b.n	8005cd0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2220      	movs	r2, #32
 8005cb0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2220      	movs	r2, #32
 8005cb6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3758      	adds	r7, #88	@ 0x58
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	603b      	str	r3, [r7, #0]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ce8:	e04f      	b.n	8005d8a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005cf0:	d04b      	beq.n	8005d8a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cf2:	f7fc ff63 	bl	8002bbc <HAL_GetTick>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	69ba      	ldr	r2, [r7, #24]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d302      	bcc.n	8005d08 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d101      	bne.n	8005d0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e04e      	b.n	8005daa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0304 	and.w	r3, r3, #4
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d037      	beq.n	8005d8a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	2b80      	cmp	r3, #128	@ 0x80
 8005d1e:	d034      	beq.n	8005d8a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	2b40      	cmp	r3, #64	@ 0x40
 8005d24:	d031      	beq.n	8005d8a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	69db      	ldr	r3, [r3, #28]
 8005d2c:	f003 0308 	and.w	r3, r3, #8
 8005d30:	2b08      	cmp	r3, #8
 8005d32:	d110      	bne.n	8005d56 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2208      	movs	r2, #8
 8005d3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f000 f838 	bl	8005db2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2208      	movs	r2, #8
 8005d46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e029      	b.n	8005daa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	69db      	ldr	r3, [r3, #28]
 8005d5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d64:	d111      	bne.n	8005d8a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f000 f81e 	bl	8005db2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2220      	movs	r2, #32
 8005d7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e00f      	b.n	8005daa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	69da      	ldr	r2, [r3, #28]
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	4013      	ands	r3, r2
 8005d94:	68ba      	ldr	r2, [r7, #8]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	bf0c      	ite	eq
 8005d9a:	2301      	moveq	r3, #1
 8005d9c:	2300      	movne	r3, #0
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	461a      	mov	r2, r3
 8005da2:	79fb      	ldrb	r3, [r7, #7]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d0a0      	beq.n	8005cea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b095      	sub	sp, #84	@ 0x54
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dc2:	e853 3f00 	ldrex	r3, [r3]
 8005dc6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005dce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dd8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005dda:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ddc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005dde:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005de0:	e841 2300 	strex	r3, r2, [r1]
 8005de4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1e6      	bne.n	8005dba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	3308      	adds	r3, #8
 8005df2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df4:	6a3b      	ldr	r3, [r7, #32]
 8005df6:	e853 3f00 	ldrex	r3, [r3]
 8005dfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	f023 0301 	bic.w	r3, r3, #1
 8005e02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	3308      	adds	r3, #8
 8005e0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e14:	e841 2300 	strex	r3, r2, [r1]
 8005e18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1e5      	bne.n	8005dec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d118      	bne.n	8005e5a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	e853 3f00 	ldrex	r3, [r3]
 8005e34:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	f023 0310 	bic.w	r3, r3, #16
 8005e3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	461a      	mov	r2, r3
 8005e44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e46:	61bb      	str	r3, [r7, #24]
 8005e48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4a:	6979      	ldr	r1, [r7, #20]
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	e841 2300 	strex	r3, r2, [r1]
 8005e52:	613b      	str	r3, [r7, #16]
   return(result);
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1e6      	bne.n	8005e28 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2220      	movs	r2, #32
 8005e5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005e6e:	bf00      	nop
 8005e70:	3754      	adds	r7, #84	@ 0x54
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr

08005e7a <memset>:
 8005e7a:	4402      	add	r2, r0
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d100      	bne.n	8005e84 <memset+0xa>
 8005e82:	4770      	bx	lr
 8005e84:	f803 1b01 	strb.w	r1, [r3], #1
 8005e88:	e7f9      	b.n	8005e7e <memset+0x4>
	...

08005e8c <__libc_init_array>:
 8005e8c:	b570      	push	{r4, r5, r6, lr}
 8005e8e:	4d0d      	ldr	r5, [pc, #52]	@ (8005ec4 <__libc_init_array+0x38>)
 8005e90:	4c0d      	ldr	r4, [pc, #52]	@ (8005ec8 <__libc_init_array+0x3c>)
 8005e92:	1b64      	subs	r4, r4, r5
 8005e94:	10a4      	asrs	r4, r4, #2
 8005e96:	2600      	movs	r6, #0
 8005e98:	42a6      	cmp	r6, r4
 8005e9a:	d109      	bne.n	8005eb0 <__libc_init_array+0x24>
 8005e9c:	4d0b      	ldr	r5, [pc, #44]	@ (8005ecc <__libc_init_array+0x40>)
 8005e9e:	4c0c      	ldr	r4, [pc, #48]	@ (8005ed0 <__libc_init_array+0x44>)
 8005ea0:	f000 f818 	bl	8005ed4 <_init>
 8005ea4:	1b64      	subs	r4, r4, r5
 8005ea6:	10a4      	asrs	r4, r4, #2
 8005ea8:	2600      	movs	r6, #0
 8005eaa:	42a6      	cmp	r6, r4
 8005eac:	d105      	bne.n	8005eba <__libc_init_array+0x2e>
 8005eae:	bd70      	pop	{r4, r5, r6, pc}
 8005eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eb4:	4798      	blx	r3
 8005eb6:	3601      	adds	r6, #1
 8005eb8:	e7ee      	b.n	8005e98 <__libc_init_array+0xc>
 8005eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ebe:	4798      	blx	r3
 8005ec0:	3601      	adds	r6, #1
 8005ec2:	e7f2      	b.n	8005eaa <__libc_init_array+0x1e>
 8005ec4:	08008020 	.word	0x08008020
 8005ec8:	08008020 	.word	0x08008020
 8005ecc:	08008020 	.word	0x08008020
 8005ed0:	08008024 	.word	0x08008024

08005ed4 <_init>:
 8005ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ed6:	bf00      	nop
 8005ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eda:	bc08      	pop	{r3}
 8005edc:	469e      	mov	lr, r3
 8005ede:	4770      	bx	lr

08005ee0 <_fini>:
 8005ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ee2:	bf00      	nop
 8005ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ee6:	bc08      	pop	{r3}
 8005ee8:	469e      	mov	lr, r3
 8005eea:	4770      	bx	lr
